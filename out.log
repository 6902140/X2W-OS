riscv64-unknown-elf-gcc -nostdlib -nostdinc -fno-builtin -fno-pie -mabi=lp64 -march=rv64imafd -mcmodel=medany -g -O0 -I include/ -fomit-frame-pointer -Wall -Wmissing-prototypes -Werror=strict-prototypes -Werror=incompatible-pointer-types  -c -o /home/lighthouse/xzr/X2W-OS/build/kernel/kmain.o kernel/kmain.c
运行内核: kernel.elf, 所有输出将在下方显示
首先按下 Ctrl+A, 然后按下 X 键以退出 QEMU
你可以运行 `make debug-gdb` 以使用 GDB 调试内核
或者运行 `make debug-vscode` 以使用 VSCode 链接 QEMU 调试内核
----------------------------------------------------------------------------
`YMM'   `MP'      `7MMF'     A     `7MF'             .M"""bgd `7MM"""Yp, `7MMF'
  VMb.  ,P          `MA     ,MA     ,V              ,MI    "Y   MM    Yb   MM  
   `MM.M'     pd*"*b.VM:   ,VVM:   ,V               `MMb.       MM    dP   MM  
     MMb     (O)   j8 MM.  M' MM.  M'   **********    `YMMNq.   MM"""bg.   MM  
   ,M'`Mb.       ,;j9 `MM A'  `MM A'                .     `MM   MM    `Y   MM  
  ,P   `MM.   ,-='     :MM;    :MM;                 Mb     dM   MM    ,9   MM  
.MM:.  .:MMa.Ammmmmmm   VF      VF                  P"Ybmmd"  .JMMmmmd9  .JMML.

Copyright Shihong Wang, Shaofei Wang, Zhuiri Xiao (c) 2023 with GNU Public License V3.0
Enjoy!
============================================================
Enter SBI!
SBI init!
=> strap_init
=> secall_init
=> delegate_traps
=> stimer_init
Jump to kernel!
============================================================
In kernel!
Kernel init!
=> ktrap_init
=> ktimer_init
=> local_interrupt_enable
Memory: 14264KB available, 3566 free pages, phy_start_address=0x80212000

*************successfully initialize kernel_pool and user_pool***********
Start testing!
============================================================
X2W-OS Image Layout:
  kernel: 0x80200000 - 0x80211148 ( 69960 B)
  .text.boot: 0x80200000 - 0x80200028 (    40 B)
       .text: 0x80200028 - 0x80209000 ( 36824 B)
     .rodata: 0x80209000 - 0x8020aa7a (  6778 B)
       .data: 0x8020aa7a - 0x80210000 ( 21894 B)
        .bss: 0x80210000 - 0x80211148 (  4424 B)
============================================================
Kernel Hanging Here!
kernel main sstatus:0x122
fetch a pid=1
!!------------------!!
ok start to move to user space
*pid[1]*: move to user space success,pgdir vaddr=0x0
---thread pid[1] bitmap alloc successfully!!!---
append p->runlist=8048098
ready_task_num=1
fetch a pid=2
!!------------------!!
ok start to move to user space
*pid[2]*: move to user space success,pgdir vaddr=0x0
---thread pid[2] bitmap alloc successfully!!!---
append p->runlist=8049098
ready_task_num=2
fetch a pid=3
!!------------------!!
ok start to move to user space
*pid[3]*: move to user space success,pgdir vaddr=0x0
---thread pid[3] bitmap alloc successfully!!!---
append p->runlist=804a098
ready_task_num=3
bitmap start from 0x804c000
sstatus 0x22 sp 0x804c000  pc 0x8020509c
bitmap start from 0x804f000
sstatus 0x22 sp 0x804f000  pc 0x80205120
bitmap pid 0 need sched out!
start from 0x8052000
sstpid 0 need sched out!
atus 0x22 sp 0x8052000  pc 0x80205190
PID [1][2][3] move to upid 0 need sched out!
ser spacpid 0 need sched out!
e success!!!
pid[0]'s pgdir vaddr=0x0
pid[1]'s pgdir vaddr=0x804d000
pid 0 need sched out!
pid 0 need sched out!
pid[2]'s pgdir vaddr=0x8050000
pid[3]'s pgdir vaddr=0x8053000
00ci0w-acvjd
append p->runlist=8020dpid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
welcome to kernel stage .2
now public variable with lock protection is <1>
pid[1] 9 is on running 12345;
now public variable with lock protection is <2>
pid[1] 8 is on running 12345;
now public variable with lock protection is <3>
pid[1] 6 is on running 12345;
now public variable with lock protection is <4>
pid[1] 5 is on running 12345;
now public variable with lock protection is <5>
pid[1] 3 is on running 12345;
now public variable with lock protection is <6>
pid[1] 2 is on running 12345;
now pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
welcome to kernel stage 3
now public variable with lock protection is <8>
pid[2] is on running abcde;
now public variable with lock protection is <9>
pid[2] is on running abcde;
now public variable with lock protection is <10>
pid[2] is on running abcde;
now public variable with lock protection is <11>
pid[2] is on running abcde;
now public variable with lock protection is <12>
pid[2] is on running abcde;
now public variable with lock protection is <13>
pid[2] is on running abcde;
now public variable with lock protection is <14>
pid[2] is on running abcde;
now public variable with lock protection is <15>
pid[2]pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
welcome to kernel stage 3
now public variable with lock protection is <16>
pid[3] is on running !@#$^;
now public variable with lock protection is <17>
pid[3] is on running !@#$^;
now public variable with lock protection is <18>
pid[3] is on running !@#$^;
now public variable with lock protection is <19>
pid[3] is on running !@#$^;
now public variable with lock protection is <20>
pid[3] is on running !@#$^;
now public variable with lock protection is <21>
pid[3] is on running !@#$^;
now public variable with lock protection is <22>
pid[3] is on running !@#$^;
now public variable withpid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 098
ready_task_num=4
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pidpid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
public variable with lock protection is <7>
pid[1] 10 is on running 12345;
now public variable with lock protection is <24>
pid[1] 7 is on running 12345;
now public variable with lock protection is <25>
pid[1] 4 is on running 12345;
now public variable with lock protection is <26>
pid[1] 2 is on rupid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
 is on running abcde;
now public variable with lock protection is <27>
pid[2] is on running abcde;
now public variable with lock protection is <28>
pid[2] is on running abcde;
now public variable with lock protection is <29>
pid[2] is on running abcde;
now public variable with lock protection is <30>
pid[2] is on running abcde;
pid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
 lock protection is <23>
pid[3] is on running !@#$^;
now public variable with lock protection is <32>
pid[3] is on running !@#$^;
now public variable with lock protection is <33>
pid[3] is on running !@#$^;
now public variable with lock protection is <34>
pid[3] is on running !@#$^;
now public variable with lock protection is <35>
pid[3] is on running !@#$^;
npid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 [0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread nopid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
nning 12345;
now public variable with lock protection is <37>
pid[1] 8 is on running 12345;
now public variable with lock protection is <38>
pid[1] 4 is on running 12345;
now public variable with lock protection is <39>
pid[1] 3 is on running 12345;
now public variable with lock protectionpid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
now public variable with lock protection is <40>
pid[2] is on running abcde;
now public variable with lock protection is <41>
pid[2] is on running abcde;
now public variable with lock protection is <42>
pid[2] is on running abcde;
now public variable with lock protection is <43>
pid[2] is on running abcde;
now pubpid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
ow public variable with lock protection is <36>
pid[3] is on running !@#$^;
now public variable with lock protection is <45>
pid[3] is on running !@#$^;
now public variable with lock protection is <46>
pid[3] is on running !@#$^;
now public variable with lock protection is <47>
pid[3] is on running pid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 w
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0]pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
 is <40>
pid[1] 11 is on running 12345;
now public variable with lock protection is <48>
pid[1] 8 is on running 12345;
now public variable with lock protection is <49>
pid[1] 5 is on running 12345;
now public variable with lock protection is <50>
pid[1] 3 is on running 12345;
now pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
lic variable with lock protection is <44>
pid[2] is on running abcde;
now public variable with lock protection is <52>
pid[2] is on running abcde;
now public variable with lock protection is <53>
pid[2] is on running abcde;
now public variable with lock protection is <54>
pid[2] is on running abcde;
now public variapid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
!@#$^;
now public variable with lock protection is <56>
pid[3] is on running !@#$^;
now public variable with lock protection is <57>
pid[3] is on running !@#$^;
now public variable with lock protection is <58>
pid[3] is on running !@#$^;
now public variable with lock protection is <59>
pid[3] is on running !@#$^;
nopid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 ,In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[pid 0 need sched out!
pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
public variable with lock protection is <51>
pid[1] 9 is on running 12345;
now public variable with lock protection is <61>
pid[1] 7 is on running 12345;
now public variable with lock protection is <62>
pid[1] 4 is on running 12345;
now public variable with lock protection is <63>
pid[1] 2 is on running 12345;
now publpid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
ble with lock protection is <55>
pid[2] is on running abcde;
now public variable with lock protection is <65>
pid[2] is on running abcde;
now public variable with lock protection is <66>
pid[2] is on running abcde;
now public variable with lock protection is <67>
pid[2] is on running abcde;
now public variable with lock protection is <68>
pid[2] is on running abcde;
pid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
w public variable with lock protection is <60>
pid[3] is on running !@#$^;
now public variable with lock protection is <70>
pid[3] is on running !@#$^;
now public variable with lock protection is <71>
pid[3] is on running !@#$^;
now public variable with lock protection is <72>
pid[3] is on running !@#$^;
now publicpid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main threadpid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
ic variable with lock protection is <64>
pid[1] 11 is on running 12345;
now public variable with lock protection is <74>
pid[1] 8 is on running 12345;
now public variable with lock protection is <75>
pid[1] 6 is on running 12345;
now public variable with lock protection is <76>
pid[1] 3 is on running 12345;
now public variablpid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
now public variable with lock protection is <77>
pid[2] is on running abcde;
now public variable with lock protection is <78>
pid[2] is on running abcde;
now public variable with lock protection is <79>
pid[2] is on running abcde;
now public variapid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
 variable with lock protection is <73>
pid[3] is on running !@#$^;
now public variable with lock protection is <81>
pid[3] is on running !@#$^;
now public variable with lock protection is <82>
pid[3] is on running !@#$^;
now public variable with lock protection is <83>
pid[3] is on running !@#$^;
now public variable with lock protection is <84>
pid[3] is on runningpid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
  now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
e with lock protection is <77>
pid[1] 10 is on running 12345;
now public variable with lock protection is <85>
pid[1] 8 is on running 12345;
now public variable with lock protection is <86>
pid[1] 4 is on running 12345;
now public variable with lock protection is <87>
pid[1] 2 is on running 12345;
now pubpid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
ble with lock protection is <80>
pid[2] is on running abcde;
now public variable with lock protection is <89>
pid[2] is on running abcde;
now public variable with lock protection is <90>
pid[2] is on running abcde;
now public variable with lock protection is <91>
pid[2] is on running abcde;
now public pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
 !@#$^;
now public variable with lock protection is <93>
pid[3] is on running !@#$^;
now public variable with lock protection is <94>
pid[3] is on running !@#$^;
now public variable with lock protection is <95>
pid[3] is on running !@#$^;
now public variable with lock protection is <96>
pid[3] is on running !@#$^;
pid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 ],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
lic variable with lock protection is <88>
pid[1] 8 is on running 12345;
now public variable with lock protection is <98>
pid[1] 6 is on running 12345;
now public variable with lock protection is <99>
pid[1] 3 is on running 12345;
now public variable with lock protection is <100>
pid[1] 1 is on running 12345;
now public variable with lock protection is <101>
pid[1] 1 is on rupid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
variable with lock protection is <92>
pid[2] is on running abcde;
now public variable with lock protection is <102>
pid[2] is on running abcde;
now public variable with lock protection is <103>
pid[2] is on running abcde;
now public variable with lock protection is <104>
pid[2] is on running abcde;
now public variablpid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
now public variable with lock protection is <105>
pid[3] is on running !@#$^;
now public variable with lock protection is <106>
pid[3] is on running !@#$^;
now public variable with lock protection is <107>
pid[3] is on running !@#$^;
now public variable with lock protection is <108>
pid[3] is on running !@#$^;
now publpid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 ],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kpid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
nning 12345;
now public variable with lock protection is <110>
pid[1] 10 is on running 12345;
now public variable with lock protection is <111>
pid[1] 7 is on running 12345;
now public variable with lock protection is <112>
pid[1] 3 is on running 12345;
now public variable with lock protection is <113>
pid[1] 1 is on running 12pid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
e with lock protection is <105>
pid[2] is on running abcde;
now public variable with lock protection is <114>
pid[2] is on running abcde;
now public variable with lock protection is <115>
pid[2] is on running abcde;
now public variable with lock protection is <116>
pid[2] is on running abcde;
now public variable with lock protection is <117>
pid[2] is on running abcde;
now public variable with lock protection is <118>
pid[2] is on running abcde;
now public variable with lock protection ispid 2 need sched out!
pid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
ic variable with lock protection is <109>
pid[3] is on running !@#$^;
now public variable with lock protection is <120>
pid[3] is on running !@#$^;
now public variable with lock protection is <121>
pid[3] is on running !@#$^;
now public variable with lock protection is <122>
pid[3] is on running !@#$^;
now publicpid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 ernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],Ipid 0 need sched out!
pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
345;
now public variable with lock protection is <124>
pid[1] 10 is on running 12345;
now public variable with lock protection is <125>
pid[1] 7 is on running 12345;
now public variable with lock protection is <126>
pid[1] 4 is on running 12345;
now public variable with lock protection is <127>
pid[1] 1 is on running 12345;
npid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
 <119>
pid[2] is on running abcde;
now public variable with lock protection is <129>
pid[2] is on running abcde;
now public variable with lock protection is <130>
pid[2] is on running abcde;
now public variable with lock protection is <131>
pid[2] is on running abcde;
now public variable with lock protection is <132>
pipid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
 variable with lock protection is <123>
pid[3] is on running !@#$^;
now public variable with lock protection is <133>
pid[3] is on running !@#$^;
now public variable with lock protection is <134>
pid[3] is on running !@#$^;
now public variable with lock protection is <135>
pid[3] is on running !@#$^;
now publicpid 3 need sched out!
pid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 n kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
ow public variable with lock protection is <128>
pid[1] 10 is on running 12345;
now public variable with lock protection is <137>
pid[1] 8 is on running 12345;
now public variable with lock protection is <138>
pid[1] 5 is on running 12345;
now public variable with lock protection is <139>
pid[1] 2 is on running 12345;
now publicpid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
d[2] is on running abcde;
now public variable with lock protection is <141>
pid[2] is on running abcde;
now public variable with lock protection is <142>
pid[2] is on running abcde;
now public variable with lock protection is <143>
pid[2] is on running abcde;
now public variabpid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
 variable with lock protection is <136>
pid[3] is on running !@#$^;
now public variable with lock protection is <145>
pid[3] is on running !@#$^;
now public variable with lock protection is <146>
pid[3] is on running !@#$^;
now public variable with lock protection is <147>
pid[3] is on running !@#$^;
nowpid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pipid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
 variable with lock protection is <140>
pid[1] 8 is on running 12345;
now public variable with lock protection is <149>
pid[1] 6 is on running 12345;
now public variable with lock protection is <150>
pid[1] 3 is on running 12345;
now public variable with lock protection is <151>
pid[1]pid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
le with lock protection is <144>
pid[2] is on running abcde;
now public variable with lock protection is <152>
pid[2] is on running abcde;
now public variable with lock protection is <153>
pid[2] is on running abcde;
now public variable with lock protection is <154>
pid[2] is on running abcde;
now public varipid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
 public variable with lock protection is <148>
pid[3] is on running !@#$^;
now public variable with lock protection is <156>
pid[3] is on running !@#$^;
now public variable with lock protection is <157>
pid[3] is on running !@#$^;
now public variable with lock protection is <158>
pid[3] is on running !@#$^;
now ppid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 d[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel mapid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
 1 is on running 12345;
now public variable with lock protection is <160>
pid[1] 9 is on running 12345;
now public variable with lock protection is <161>
pid[1] 7 is on running 12345;
now public variable with lock protection is <162>
pid[1] 4 is on running 12345;
now public variable with lock protection is <163>
pid[1] 1 is on running 12345pid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
able with lock protection is <155>
pid[2] is on running abcde;
now public variable with lock protection is <164>
pid[2] is on running abcde;
now public variable with lock protection is <165>
pid[2] is on running abcde;
now public variable with lock protection is <166>
pid[2] is on running abcde;
now public variable with lock protection is <167>
pid[2] is on running abcde;
nopid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
ublic variable with lock protection is <159>
pid[3] is on running !@#$^;
now public variable with lock protection is <169>
pid[3] is on running !@#$^;
now public variable with lock protection is <170>
pid[3] is on running !@#$^;
now public variable with lock protection is <171>
pid[3] is on running !@#$^;
now public variable with lock protection is <172>
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 in thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
;
now public variable with lock protection is <173>
pid[1] 8 is on running 12345;
now public variable with lock protection is <174>
pid[1] 5 is on running 12345;
now public variable with lock protection is <175>
pid[1] 3 is on running 12345;
now ppid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
w public variable with lock protection is <168>
pid[2] is on running abcde;
now public variable with lock protection is <177>
pid[2] is on running abcde;
now public variable with lock protection is <178>
pid[2] is on running abcde;
now public variable with lock protection is <179>
pid[2] is on running abcde;
now ppid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
pid[3] is on running !@#$^;
now public variable with lock protection is <181>
pid[3] is on running !@#$^;
now public variable with lock protection is <182>
pid[3] is on running !@#$^;
now public variable with lock protection is <183>
pid[3] is on running !@#$^;
now public variable with lock protection is <184>
pid[3] is on running !@#$^;
now publipid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
ublic variable with lock protection is <176>
pid[1] 11 is on running 12345;
now public variable with lock protection is <186>
pid[1] 8 is on running 12345;
now public variable with lock protection is <187>
pid[1] 5 is on running 12345;
now public variable with lock protection is <188>
pid[1] 3 is on running 12345;
now ppid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
ublic variable with lock protection is <180>
pid[2] is on running abcde;
now public variable with lock protection is <190>
pid[2] is on running abcde;
now public variable with lock protection is <191>
pid[2] is on running abcde;
now public variable with lock protection is <192>
pid[2] is on running abcde;
now pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
c variable with lock protection is <185>
pid[3] is on running !@#$^;
now public variable with lock protection is <194>
pid[3] is on running !@#$^;
now public variable with lock protection is <195>
pid[3] is on running !@#$^;
now public variable with lock protection is <196>
pid[3] is on running !@#$^;
now public variable with lock protection is <197>
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 ],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
ublic variable with lock protection is <189>
pid[1] 11 is on running 12345;
now public variable with lock protection is <198>
pid[1] 8 is on running 12345;
now public variable with lock protection is <199>
pid[1] 6 is on running 12345;
now public variable with lock protection is <200>
pid[1] 3 is on running 12345;
now public variable with lock protection is <201>
pid[1] 1 is on running 12345;
pid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
public variable with lock protection is <193>
pid[2] is on running abcde;
now public variable with lock protection is <203>
pid[2] is on running abcde;
now public variable with lock protection is <204>
pid[2] is on running abcde;
now public variable with lock protection is <205>
pid[2] is on running abcde;
now public variable with lock protection is <206>
pid[2] is on running abcpid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
pid[3] is on running !@#$^;
now public variable with lock protection is <207>
pid[3] is on running !@#$^;
now public variable with lock protection is <208>
pid[3] is on running !@#$^;
now public variable with lock protection is <209>
pid[3] is on running !@#$^;
now public variable with lock protection is <210>
pid[3] is on running !@#$^;
now pid 3 need sched out!
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
now public variable with lock protection is <211>
pid[1] 10 is on running 12345;
now public variable with lock protection is <212>
pid[1] 7 is on running 12345;
now public variable with lock protection is <213>
pid[1] 5 is on running 12345;
now public variable with lock protection is <214>
pid[1] 2 is on running 12345;
now publipid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
de;
now public variable with lock protection is <216>
pid[2] is on running abcde;
now public variable with lock protection is <217>
pid[2] is on running abcde;
now public variable with lock protection is <218>
pid[2] is on running abcde;
now public variable with lock protection is <219>
pid[2] is on running abcde;
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
public variable with lock protection is <211>
pid[3] is on running !@#$^;
now public variable with lock protection is <220>
pid[3] is on running !@#$^;
now public variable with lock protection is <221>
pid[3] is on running !@#$^;
now public variable with lock protection is <222>
pid[3] is on running !@#$^;
now public pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thpid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
c variable with lock protection is <215>
pid[1] 11 is on running 12345;
now public variable with lock protection is <224>
pid[1] 8 is on running 12345;
now public variable with lock protection is <225>
pid[1] 5 is on running 12345;
now public variable with lock protection is <226>
pid[1] 3 is on running 12345;
now public variapid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
now public variable with lock protection is <228>
pid[2] is on running abcde;
now public variable with lock protection is <229>
pid[2] is on running abcde;
now public variable with lock protection is <230>
pid[2] is on running abcde;
now public variable with lock protection is <231>
pid[2] is on running abcde;
nopid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
variable with lock protection is <223>
pid[3] is on running !@#$^;
now public variable with lock protection is <233>
pid[3] is on running !@#$^;
now public variable with lock protection is <234>
pid[3] is on running !@#$^;
now public variable with lock protection is <235>
pid[3] is on running !@#$^;
now public variable with lock protection is <236>
pid[3] is on runnpid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 read now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pipid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
ble with lock protection is <227>
pid[1] 11 is on running 12345;
now public variable with lock protection is <237>
pid[1] 8 is on running 12345;
now public variable with lock protection is <238>
pid[1] 6 is on running 12345;
now public variable with lock protection is <239>
pid[1] 3 is on running 12345;
now public variable with lock protection is <240>
pid[1] 1 is on running 12345;
pid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
w public variable with lock protection is <232>
pid[2] is on running abcde;
now public variable with lock protection is <242>
pid[2] is on running abcde;
now public variable with lock protection is <243>
pid[2] is on running abcde;
now public variable with lock protection is <244>
pid[2] is on running abcde;
now public variable with lock protection is <245>
pid[2] is on running abcde;
now public variable with lock protection is <246>
ppid 2 need sched out!
pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
ing !@#$^;
now public variable with lock protection is <247>
pid[3] is on running !@#$^;
now public variable with lock protection is <248>
pid[3] is on running !@#$^;
now public variable with lock protection is <249>
pid[3] is on running !@#$^;
now public variable with lock protection is <250>
pid[3] is on running !@#$^;
now public variable with lock protection is <251>
pid[3] is on running !@#$^;
now public variable with lock protection is <252>
pid[3] is on running !@#$^;
now public variable with lock protection is <253>
pid[3] is on running !@#$^;
now publpid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 d[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
now public variable with lock protection is <254>
pid[1] 11 is on running 12345;
now public variable with lock protection is <255>
pid[1] 9 is on running 12345;
now public variable with lock protection is <256>
pid[1] 8 is on running 12345;
now public variable with lock protection is <257>
pid[1] 7 is on running 12345;
now public variable with lock protection is <258>
pid[1] 5 is on running 12345;
now public variable with lock protection is <259>
pid[1] 3 is on running 12345;
now public variable with lock protection is <260>
pid[1] 2 is on running 12345;
now public vapid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
id[2] is on running abcde;
now public variable with lock protection is <262>
pid[2] is on running abcde;
now public variable with lock protection is <263>
pid[2] is on running abcde;
now public variable with lock protection is <264>
pid[2] is on running abcde;
now public variable with lock protection is <265>
pid[2] is on running abcde;
now public variable with lock protection is <266>
pid[2] is on running abcde;
now public variable with lock protection is <267>
pid[2] is on running abcde;
now public variable with lock protection is <268>
pid[2] is on running abcde;
now public variable with lock protection is <269>
pid[2] is on running abcde;
nopid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
ic variable with lock protection is <254>
pid[3] is on running !@#$^;
now public variable with lock protection is <271>
pid[3] is on running !@#$^;
now public variable with lock protection is <272>
pid[3] is on running !@#$^;
now public variable with lock protection is <273>
pid[3] is on running !@#$^;
now public variable with lock protection is <274>
pid[3] is on running !@#$^;
now public variable with lock protection is <275>
pid[3] is on running !@#$^;
now public variable with lock protection is <276>
pid[3] is on running !@#$^;
now public variable with lock protection is <277>
pid[3] is on running !@#$^;
now public variable with lock protection is <278>
pid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!
pid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdir
riable with lock protection is <261>
pid[1] 12 is on running 12345;
now public variable with lock protection is <279>
pid[1] 8 is on running 12345;
now public variable with lock protection is <280>
pid[1] 5 is on running 12345;
now public variable with lock protection is <281>
pid[1] 5 is on running 12345;
now public variable with lock protpid 1 need sched out!
pid 1 need sched out!

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 next pid[2] reset pgdir
w public variable with lock protection is <270>
pid[2] is on running abcde;
now public variable with lock protection is <283>
pid[2] is on running abcde;
now public variable with lock protection is <284>
pid[2] is on running abcde;
now public variable with lock pid 2 need sched out!

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 next pid[3] reset pgdir
pid[3] is on running !@#$^;
now public variable with lock protection is <286>
pid[3] is on running !@#$^;
now public variable with lock protection is <287>
pid[3] is on running !@#$^;
now public variable with lock protection is <288>
pid[3] is on running !@#$^;
now public varipid 3 need sched out!

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernelpid 0 need sched out!

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 next pid[1] reset pgdiQEMU: Terminated
