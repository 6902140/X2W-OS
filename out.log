riscv64-unknown-elf-gcc -nostdlib -nostdinc -fno-builtin -fno-pie -mabi=lp64 -march=rv64imafd -mcmodel=medany -g -O0 -I include/ -fomit-frame-pointer -Wall -Wmissing-prototypes -Werror=strict-prototypes -Werror=incompatible-pointer-types  -c -o /home/lighthouse/xzr/X2W-OS/build/kernel/thread.o kernel/thread.c
运行内核: kernel.elf, 所有输出将在下方显示
首先按下 Ctrl+A, 然后按下 X 键以退出 QEMU
你可以运行 `make debug-gdb` 以使用 GDB 调试内核
或者运行 `make debug-vscode` 以使用 VSCode 链接 QEMU 调试内核
----------------------------------------------------------------------------
`YMM'   `MP'      `7MMF'     A     `7MF'             .M"""bgd `7MM"""Yp, `7MMF'
  VMb.  ,P          `MA     ,MA     ,V              ,MI    "Y   MM    Yb   MM  
   `MM.M'     pd*"*b.VM:   ,VVM:   ,V               `MMb.       MM    dP   MM  
     MMb     (O)   j8 MM.  M' MM.  M'   **********    `YMMNq.   MM"""bg.   MM  
   ,M'`Mb.       ,;j9 `MM A'  `MM A'                .     `MM   MM    `Y   MM  
  ,P   `MM.   ,-='     :MM;    :MM;                 Mb     dM   MM    ,9   MM  
.MM:.  .:MMa.Ammmmmmm   VF      VF                  P"Ybmmd"  .JMMmmmd9  .JMML.

Copyright Shihong Wang, Shaofei Wang, Zhuiri Xiao (c) 2023 with GNU Public License V3.0
Enjoy!
============================================================
Enter SBI!
SBI init!
=> strap_init
=> secall_init
=> delegate_traps
=> stimer_init
Jump to kernel!
============================================================
In kernel!
Kernel init!
=> ktrap_init
=> ktimer_init
=> local_interrupt_enable
Memory: 14264KB available, 3566 free pages, phy_start_address=0x80212000

*************successfully initialize kernel_pool and user_pool***********
Start testing!
============================================================
X2W-OS Image Layout:
  kernel: 0x80200000 - 0x80211148 ( 69960 B)
  .text.boot: 0x80200000 - 0x80200028 (    40 B)
       .text: 0x80200028 - 0x80209000 ( 36824 B)
     .rodata: 0x80209000 - 0x8020a9d2 (  6610 B)
       .data: 0x8020a9d2 - 0x80210000 ( 22062 B)
        .bss: 0x80210000 - 0x80211148 (  4424 B)
============================================================
Kernel Hanging Here!
fetch a pid=1
!!------------------!!
bitmap start from 0x8049000
---thread pid[1] bitmap alloc successfully!!!---
append p->runlist=80480c0
ready_task_num=1
fetch a pid=2
!!------------------!!
bitmap start from 0x804b000
---thread pid[2] bitmap alloc successfully!!!---
append p->runlist=804a0c0
ready_task_num=2
fetch a pid=3
!!------------------!!
bitmap start from 0x804d000
---thread pid[3] bitmap alloc successfully!!!---
append p->runlist=804c0c0
ready_task_num=3
00ci0w-acvjd
pid:1,2,3
append p->runlist=8020d0c0
ready_task_num=4
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 welcome to kernel stage .2
now public variable with lock protection is <1>
pid[1] is on running 12345;
now public variable with lock protection is <2>
pid[1] is on running 12345;
now public variable with lock protection is <3>
pid[1] is on running 12345;
now public variable with lock protection is <4>
pid[1] is on running 12345;
now public variable with lock protection is <5>
pid[1] is on running 12345;
now public variable with lock protection is <6>
pid[1] is on running 12345;
now public variable with lock protection is <7>
pid[1] is on running 12345;
now public variable with lock protection is <8>
pid[1] is on running 12345;
now public variable with lock protection is <9>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 welcome to kernel stage 3
now public variable with lock protection is <10>
pid[2] is on running abcde;
now public variable with lock protection is <11>
pid[2] is on running abcde;
now public variable with lock protection is <12>
pid[2] is on running abcde;
now public variable with lock protection is <13>
pid[2] is on running abcde;
now public variable with lock protection is <14>
pid[2] is on running abcde;
now public variable with lock protection is <15>
pid[2] is on running abcde;
now public variable with lock protection is <16>
pid[2] is on running abcde;
now public variable with lock protection is <17>
pid[2] is on running abcde;
now public variable with lock protection is <18>
pid[2] is on running abcde;
now public variable with lock protection is <19>
pid[2] is on running abcde;
now public variable with lock protection is <20>
pid[2] is on running abcde;
now public variable with lock protection is <21>
pid[2] is on running abcde;
now public variable with lock protection is <22>
pid[2] is on running abcde;
now public variable with lock protection is <23>
pid[2] is on running abcde;
now public variable with lock protection is <24>
pid[2] is on running abcde;
now public variable with lock protection is <25>
pid[2] is on running abcde;
now public variable with lock protection is <26>
pid[2] is on running abcde;
now public variable with lock protection is <27>
pid[2] is on running abcde;
now public variable with lock protection is <28>
pid[2] is on running abcde;
now public variable with lock protection is <29>
pid[2] is on running abcde;
now public variable with lock protection is <30>
pid[2] is on running abcde;
now public variable with lock protection is <31>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 welcome to kernel stage 3
now public variable with lock protection is <33>
pid[3] is on running !@#$^;
now public variable with lock protection is <34>
pid[3] is on running !@#$^;
now public variable with lock protection is <35>
pid[3] is on running !@#$^;
now public variable with lock protection is <36>
pid[3] is on running !@#$^;
now public variable with lock protection is <37>
pid[3] is on running !@#$^;
now public variable with lock protection is <38>
pid[3] is on running !@#$^;
now public variable with lock protection is <39>
pid[3] is on running !@#$^;
now public variable with lock protection is <40>
pid[3] is on running !@#$^;
now public variable with lock protection is <41>
pid[3] is on running !@#$^;
now public variable with lock protection is <42>
pid[3] is on running !@#$^;
now public variable with lock protection is <43>
pid[3] is on running !@#$^;
now public variable with lock protection is <44>
pid[3] is on running !@#$^;
now public variable with lock protection is <45>
pid[3] is on running !@#$^;
now public variable with lock protection is <46>
pid[3] is on running !@#$^;
now public variable with lock protection is <47>
pid[3] is on running !@#$^;
now public variable with lock protection is <48>
pid[3] is on running !@#$^;
now public variable with lock protection is <49>
pid[3] is on running !@#$^;
now public variable with lock protection is <50>
pid[3] is on running !@#$^;
now public variable with lock protection is <51>
pid[3] is on running !@#$^;
now public variable with lock protection is <52>
pid[3] is on running !@#$^;
now public variable with lock protection is <53>
pid[3] is on running !@#$^;
now public variable with lock protection is <54>
pid[3] is on running !@#$^;
now public variable with lock protection is <55>
pid[3] is on running !@#$^;
now public variable with lock protectionpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel mpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <57>
pid[1] is on running 12345;
now public variable with lock protection is <58>
pid[1] is on running 12345;
now public variable with lock protection is <59>
pid[1] is on running 12345;
now public variable with lock protection is <60>
pid[1] is on running 12345;
now public variable with lock protection is <61>
pid[1] is on running 12345;
now public variable with lock protection is <62>
pid[1] is on running 12345;
now public variable with lock protection is <63>
pid[1] is on running 12345;
now public variable with lock protection is <64>
pid[1] is on running 12345;
now public variable with lock protection is <65>
pid[1] is on running 12345;
now public variable with lock protection is <66>
pid[1] is on running 12345;
nopid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <67>
pid[2] is on running abcde;
now public variable with lock protection is <68>
pid[2] is on running abcde;
now public variable with lock protection is <69>
pid[2] is on running abcde;
now public variable with lock protection is <70>
pid[2] is on running abcde;
now public variable with lock protection is <71>
pid[2] is on running abcde;
now public variable with lock protection is <72>
pid[2] is on running abcde;
now public variable with lock protection is <73>
pid[2] is on running abcde;
now public variable with lock protection is <74>
pid[2] is on running abcde;
now public variable with lock protection is <75>
pid[2] is on running abcde;
now public variable with lock protection is <76>
pid[2] is on running abcde;
now public variable with lock protection is <77>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 is <56>
pid[3] is on running !@#$^;
now public variable with lock protection is <79>
pid[3] is on running !@#$^;
now public variable with lock protection is <80>
pid[3] is on running !@#$^;
now public variable with lock protection is <81>
pid[3] is on running !@#$^;
now public variable with lock protection is <82>
pid[3] is on running !@#$^;
now public variable with lock protection is <83>
pid[3] is on running !@#$^;
now public variable with lock protection is <84>
pid[3] is on running !@#$^;
now public variable with lock protection is <85>
pid[3] is on running !@#$^;
now public variable with lock protection is <86>
pid[3] is on running !@#$^;
now public variable with lock protection is <87>
pid[3] is on running !@#$^;
now public variable with lock protection is <88>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ain thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main threapid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
w public variable with lock protection is <67>
pid[1] is on running 12345;
now public variable with lock protection is <90>
pid[1] is on running 12345;
now public variable with lock protection is <91>
pid[1] is on running 12345;
now public variable with lock protection is <92>
pid[1] is on running 12345;
now public variable with lock protection is <93>
pid[1] is on running 12345;
now public variable with lock protection is <94>
pid[1] is on running 12345;
now public variable with lock protection is <95>
pid[1] is on running 12345;
now public variable with lock protection is <96>
pid[1] is on running 12345;
now public variable with lock protection is <97>
pid[1] is on running 12345;
now public variable with lock protection is <98>
pid[1] is on running 12345;
now public variable pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <78>
pid[2] is on running abcde;
now public variable with lock protection is <100>
pid[2] is on running abcde;
now public variable with lock protection is <101>
pid[2] is on running abcde;
now public variable with lock protection is <102>
pid[2] is on running abcde;
now public variable with lock protection is <103>
pid[2] is on running abcde;
now public variable with lock protection is <104>
pid[2] is on running abcde;
now public variable with lock protection is <105>
pid[2] is on running abcde;
now public variable with lock protection is <106>
pid[2] is on running abcde;
now public variable with lock protection is <107>
pid[2] is on running abcde;
now public variable with lock protection is <108>
pid[2] is on running abcde;
now public variable with lock protection is <109>
pid[2] is on running abcde;
now public variable with lock protection is <110>
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <110>
pid[3] is on running !@#$^;
now public variable with lock protection is <111>
pid[3] is on running !@#$^;
now public variable with lock protection is <112>
pid[3] is on running !@#$^;
now public variable with lock protection is <113>
pid[3] is on running !@#$^;
now public variable with lock protection is <114>
pid[3] is on running !@#$^;
now public variable with lock protection is <115>
pid[3] is on running !@#$^;
now public variable with lock protection is <116>
pid[3] is on running !@#$^;
now public variable with lock protection is <117>
pid[3] is on running !@#$^;
now public variable with lock protection is <118>
pid[3] is on running !@#$^;
now public variable with lock protection is <119>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
d now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
with lock protection is <99>
pid[1] is on running 12345;
now public variable with lock protection is <120>
pid[1] is on running 12345;
now public variable with lock protection is <121>
pid[1] is on running 12345;
now public variable with lock protection is <122>
pid[1] is on running 12345;
now public variable with lock protection is <123>
pid[1] is on running 12345;
now public variable with lock protection is <124>
pid[1] is on running 12345;
now public variable with lock protection is <125>
pid[1] is on running 12345;
now public variable with lock protection is <126>
pid[1] is on running 12345;
now public variable with lock protection is <127>
pid[1] is on running 12345;
now public variable with lock protection is <128>
pid[1] is on running 12345;
now public variable with lock protection is <129>
pid[1] is on running 12345;
now public variable with lock protection is <130>
pid[1] is on running 12345;
now public variable with lock protection is <131>
pid[1] is on running 12345;
now public variable with lock protection is <132>
pid[1] is on running 12345;
now public variable with lock protection is <133>
pid[1] is on running 12345;
now public variable with lock protection is <134>
pid[1] is on running 12345;
now public variable with lock protection is <135>
pid[1] is on running 12345;
now public variable with lock protection is <136>
pid[1] is on running 12345;
now public variable with lock protection is <137>
pid[1] is on running 12345;
now public variable with lock protection is <138>
pid[1] is on running 12345;
now public variable with lock protection is <139>
pid[1] is on running 12345;
now public variable with lock protection is <140>
pid[1] is on running 12345;
now public variable with lock protection is <141>
pid[1] is on running 12345;
now public variable with lock protectipid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
pid[2] is on running abcde;
now public variable with lock protection is <143>
pid[2] is on running abcde;
now public variable with lock protection is <144>
pid[2] is on running abcde;
now public variable with lock protection is <145>
pid[2] is on running abcde;
now public variable with lock protection is <146>
pid[2] is on running abcde;
now public variable with lock protection is <147>
pid[2] is on running abcde;
now public variable with lock protection is <148>
pid[2] is on running abcde;
now public variable with lock protection is <149>
pid[2] is on running abcde;
now public variable with lock protection is <150>
pid[2] is on running abcde;
now public variable with lock protection is <151>
pid[2] is on running abcde;
now public variable with lock protection is <152>
pid[2] is on running abcde;
now public variable with lock protection is <153>
pid[2] is on running abcde;
now public variable with lock protection is <154>
pid[2] is on running abcde;
now public variable with lock protection is <155>
pid[2] is on running abcde;
now public variable with lock protection is <156>
pid[2] is on running abcde;
now public variable with lock protection is <157>
pid[2] is on running abcde;
now public variable with lock protection is <158>
pid[2] is on running abcde;
now public variable with lock protection is <159>
pid[2] is on running abcde;
now public variable with lock protection is <160>
pid[2] is on running abcde;
now public variable with lock protection is <161>
pid[2] is on running abcde;
now public variable with lock protection is <162>
pid[2] is on running abcde;
now public variable with lock protection is <163>
pid[2] is on running abcde;
now public varipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <165>
pid[3] is on running !@#$^;
now public variable with lock protection is <166>
pid[3] is on running !@#$^;
now public variable with lock protection is <167>
pid[3] is on running !@#$^;
now public variable with lock protection is <168>
pid[3] is on running !@#$^;
now public variable with lock protection is <169>
pid[3] is on running !@#$^;
now public variable with lock protection is <170>
pid[3] is on running !@#$^;
now public variable with lock protection is <171>
pid[3] is on running !@#$^;
now public variable with lock protection is <172>
pid[3] is on running !@#$^;
now public variable with lock protection is <173>
pid[3] is on running !@#$^;
now public variable with lock protection is <174>
pid[3] is on running !@#$^;
now public variable with lock protection is <175>
pid[3] is on running !@#$^;
now public variable with lock protection is <176>
pid[3] is on running !@#$^;
now public variable with lock protection is <177>
pid[3] is on running !@#$^;
now public variable with lock protection is <178>
pid[3] is on running !@#$^;
now pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
on is <142>
pid[1] is on running 12345;
now public variable with lock protection is <180>
pid[1] is on running 12345;
now public variable with lock protection is <181>
pid[1] is on running 12345;
now public variable with lock protection is <182>
pid[1] is on running 12345;
now public variable with lock protection is <183>
pid[1] is on running 12345;
now public variable with lock protection is <184>
pid[1] is on running 12345;
now public variable with lock protection is <185>
pid[1] is on running 12345;
now public variable with lock protection is <186>
pid[1] is on running 12345;
now public variable with lock protection is <187>
pid[1] is on running 12345;
now public variable with lock protection is <188>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
able with lock protection is <164>
pid[2] is on running abcde;
now public variable with lock protection is <190>
pid[2] is on running abcde;
now public variable with lock protection is <191>
pid[2] is on running abcde;
now public variable with lock protection is <192>
pid[2] is on running abcde;
now public variable with lock protection is <193>
pid[2] is on running abcde;
now public variable with lock protection is <194>
pid[2] is on running abcde;
now public variable with lock protection is <195>
pid[2] is on running abcde;
now public variable with lock protection is <196>
pid[2] is on running abcde;
now public variable with lock protection is <197>
pid[2] is on running abcde;
now public vapid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
public variable with lock protection is <179>
pid[3] is on running !@#$^;
now public variable with lock protection is <199>
pid[3] is on running !@#$^;
now public variable with lock protection is <200>
pid[3] is on running !@#$^;
now public variable with lock protection is <201>
pid[3] is on running !@#$^;
now public variable with lock protection is <202>
pid[3] is on running !@#$^;
now public variable with lock protection is <203>
pid[3] is on running !@#$^;
now public variable with lock protection is <204>
pid[3] is on running !@#$^;
now public variable with lock protection is <205>
pid[3] is on running !@#$^;
now public variable with lock protection is <206>
pid[3] is on running !@#$^;
now public variable with lock protection is <207>
pid[3] is on running !@#$^;
now public variable with lock protection is <208>
pid[3] ipid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <208>
pid[1] is on running 12345;
now public variable with lock protection is <209>
pid[1] is on running 12345;
now public variable with lock protection is <210>
pid[1] is on running 12345;
now public variable with lock protection is <211>
pid[1] is on running 12345;
now public variable with lock protection is <212>
pid[1] is on running 12345;
now public variable with lock protection is <213>
pid[1] is on running 12345;
now public variable with lock protection is <214>
pid[1] is on running 12345;
now public variable with lock protection is <215>
pid[1] is on running 12345;
now public variable with lock protection is <216>
pid[1] is on running 12345;
now public variable with lock protection is <217>
pid[1] is on running 12345;
now public variable with lock protection is <218>
pid[1] is on running 12345;
now public variable with lock protection is <219>
pid[1] is on running 12345;
now public variable with lock protection is <220>
pid[1] is on running 12345;
now public variable with lock protection is <221>
pid[1] is on running 12345;
now public variable with lock ppid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
riable with lock protection is <198>
pid[2] is on running abcde;
now public variable with lock protection is <223>
pid[2] is on running abcde;
now public variable with lock protection is <224>
pid[2] is on running abcde;
now public variable with lock protection is <225>
pid[2] is on running abcde;
now public variable with lock protection is <226>
pid[2] is on running abcde;
now public variable with lock protection is <227>
pid[2] is on running abcde;
now public variable with lock protection is <228>
pid[2] is on running abcde;
now public variable with lock protection is <229>
pid[2] is on running abcde;
now public variable with lock protection is <230>
pid[2] is on running abcde;
now public variable with lock protection is <231>
pid[2] is on running abcde;
now public variable with lock protection is <232>
pid[2] is on running abcde;
now public variable with lock protection is <233>
pid[2] is on running abcde;
now public variable with lock protection is <234>
pid[2] is on running abcde;
now public variable with lock protection is <235>
pid[2] is on running abcde;
now public variable with lock protection is <236>
pid[2] is on running abcde;
now public variable with lock protection is <237>
pid[2] is on running abcde;
now public variable with lock protection is <238>
pid[2] is on running abcde;
now public variable with lock protection is <239>
pid[2] is on running abcde;
now public variable with lock protection is <240>
pid[2] is on running abcde;
now public variable with lock protection is <241>
pid[2] is on running abcde;
now public variable with lock protection is <242>
pid[2] is on running abcde;
now public variable with lock protection is <243>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
s on running !@#$^;
now public variable with lock protection is <245>
pid[3] is on running !@#$^;
now public variable with lock protection is <246>
pid[3] is on running !@#$^;
now public variable with lock protection is <247>
pid[3] is on running !@#$^;
now public variable with lock protection is <248>
pid[3] is on running !@#$^;
now public variable with lock protection is <249>
pid[3] is on running !@#$^;
now public variable with lock protection is <250>
pid[3] is on running !@#$^;
now public variable with lock protection is <251>
pid[3] is on running !@#$^;
now public variable with lock protection is <252>
pid[3] is on running !@#$^;
now public variable with lock protection is <253>
pid[3] is on running !@#$^;
now public variable with lock protection is <254>
pid[3] is on running !@#$^;
now public variable with lock protection is <255>
pid[3] is on running !@#$^;
now public variable with lock protection is <256>
pid[3] is on running !@#$^;
now public variable with lock protection is <257>
pid[3] is on running !@#$^;
now public variable with lock protection is <258>
pid[3] is on running !@#$^;
now public variable with lock protection is <259>
pid[3] is on running !@#$^;
now public variable with lock protection is <260>
pid[3] is on running !@#$^;
now public variable with lock protection is <261>
pid[3] is on running !@#$^;
now public variable with lock protection is <262>
pid[3] is on running !@#$^;
now public variable with lock protection is <263>
pid[3] is on running !@#$^;
now public variable with lock protection is <264>
pid[3] is on running !@#$^;
now public variable with lock protection is <265>
pid[3] is on running !@#$^;
now public varpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
rotection is <222>
pid[1] is on running 12345;
now public variable with lock protection is <267>
pid[1] is on running 12345;
now public variable with lock protection is <268>
pid[1] is on running 12345;
now public variable with lock protection is <269>
pid[1] is on running 12345;
now public variable with lock protection is <270>
pid[1] is on running 12345;
now public variable with lock protection is <271>
pid[1] is on running 12345;
now public variable with lock protection is <272>
pid[1] is on running 12345;
now public variable with lock protection is <273>
pid[1] is on running 12345;
now public variable with lock protection is <274>
pid[1] is on running 12345;
now public variable with lock protection is <275>
pid[1] is on running 12345;
now public variable with lock protection is <276>
pid[1] is on running 12345;
now public variable with lock protection is <277>
pid[1] is on running 12345;
now public variable with lock protection is <278>
pid[1] is on running 12345;
now public variable with lock protection is <279>
pid[1] is on running 12345;
now public variable with lock protection is <280>
pid[1] is on running 12345;
now public variable with lock protection is <281>
pid[1] is on running 12345;
now public variable with lock protection is <282>
pid[1] is on running 12345;
now public variable with lock protection is <283>
pid[1] is on running 12345;
now public variable with lock protection is <284>
pid[1] is on running 12345;
now public variable with lock protection is <285>
pid[1] is on running 12345;
now public variable with lock protection is <286>
pid[1] is on running 12345;
now public variable with lock protection is <287>
pid[1] is on running 12345;
now public variabpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <244>
pid[2] is on running abcde;
now public variable with lock protection is <289>
pid[2] is on running abcde;
now public variable with lock protection is <290>
pid[2] is on running abcde;
now public variable with lock protection is <291>
pid[2] is on running abcde;
now public variable with lock protection is <292>
pid[2] is on running abcde;
now public variable with lock protection is <293>
pid[2] is on running abcde;
now public variable with lock protection is <294>
pid[2] is on running abcde;
now public variable with lock protection is <295>
pid[2] is on running abcde;
now public variable with lock protection is <296>
pid[2] is on running abcde;
now public variable with lock protection is <297>
pid[2] is on running abcde;
now public variable with lock protection is <298>
pid[2] is on running abcde;
now public variable with lock protection is <299>
pid[2] is on running abcde;
now public variable with lock protection is <300>
pid[2] is on running abcde;
now public variable with lock protection is <301>
pid[2] is on running abcde;
now public variable with lock protection is <302>
pid[2] is on running abcde;
now public variable with lock protection is <303>
pid[2] is on running abcde;
now public variable with lock protection is <304>
pid[2] is on running abcde;
now public variable with lock protection is <305>
pid[2] is on running abcde;
now public variable with lock protection is <306>
pid[2] is on running abcde;
now public variable with lock protection is <307>
pid[2] is on running abcde;
now public variable with lock protection is <308>
pid[2] is on running abcde;
now public variable with lock protection is <309>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
iable with lock protection is <266>
pid[3] is on running !@#$^;
now public variable with lock protection is <311>
pid[3] is on running !@#$^;
now public variable with lock protection is <312>
pid[3] is on running !@#$^;
now public variable with lock protection is <313>
pid[3] is on running !@#$^;
now public variable with lock protection is <314>
pid[3] is on running !@#$^;
now public variable with lock protection is <315>
pid[3] is on running !@#$^;
now public variable with lock protection is <316>
pid[3] is on running !@#$^;
now public variable with lock protection is <317>
pid[3] is on running !@#$^;
now public variable with lock protection is <318>
pid[3] is on running !@#$^;
now public variable with lock protection is <319>
pid[3] is on running !@#$^;
now public variable with lock protection is <320>
pid[3] is on running !@#$^;
now public variable with lock protection is <321>
pid[3] is on running !@#$^;
now public variable with lock protection is <322>
pid[3] is on running !@#$^;
now public variable with lock protection is <323>
pid[3] is on running !@#$^;
now public variable with lock protection is <324>
pid[3] is on running !@#$^;
now public variable with lock protection is <325>
pid[3] is on running !@#$^;
now public variable with lock protection is <326>
pid[3] is on running !@#$^;
now public variable with lock protection is <327>
pid[3] is on running !@#$^;
now public variable with lock protection is <328>
pid[3] is on running !@#$^;
now public variable with lock protection is <329>
pid[3] is on running !@#$^;
now public variable with lock protection is <330>
pid[3] is on running !@#$^;
now public variable with lock protection is <331>
pid[3] is on running !@#$^;
nowpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
le with lock protection is <288>
pid[1] is on running 12345;
now public variable with lock protection is <333>
pid[1] is on running 12345;
now public variable with lock protection is <334>
pid[1] is on running 12345;
now public variable with lock protection is <335>
pid[1] is on running 12345;
now public variable with lock protection is <336>
pid[1] is on running 12345;
now public variable with lock protection is <337>
pid[1] is on running 12345;
now public variable with lock protection is <338>
pid[1] is on running 12345;
now public variable with lock protection is <339>
pid[1] is on running 12345;
now public variable with lock protection is <340>
pid[1] is on running 12345;
now public variable with lock protection is <341>
pid[1] is on running 12345;
now public variable with lock protection is <342>
pid[1] is on runpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <310>
pid[2] is on running abcde;
now public variable with lock protection is <343>
pid[2] is on running abcde;
now public variable with lock protection is <344>
pid[2] is on running abcde;
now public variable with lock protection is <345>
pid[2] is on running abcde;
now public variable with lock protection is <346>
pid[2] is on running abcde;
now public variable with lock protection is <347>
pid[2] is on running abcde;
now public variable with lock protection is <348>
pid[2] is on running abcde;
now public variable with lock protection is <349>
pid[2] is on running abcde;
now public variable with lock protection is <350>
pid[2] is on running abcde;
now public variable with lock protection is <351>
pid[2] is on running abcde;
now public variable wipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 public variable with lock protection is <332>
pid[3] is on running !@#$^;
now public variable with lock protection is <353>
pid[3] is on running !@#$^;
now public variable with lock protection is <354>
pid[3] is on running !@#$^;
now public variable with lock protection is <355>
pid[3] is on running !@#$^;
now public variable with lock protection is <356>
pid[3] is on running !@#$^;
now public variable with lock protection is <357>
pid[3] is on running !@#$^;
now public variable with lock protection is <358>
pid[3] is on running !@#$^;
now public variable with lock protection is <359>
pid[3] is on running !@#$^;
now public variable with lock protection is <360>
pid[3] is on running !@#$^;
now public variable with lock protection is <361>
pid[3] is on running !@#$^;
now public variable with lock protepid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ning 12345;
now public variable with lock protection is <363>
pid[1] is on running 12345;
now public variable with lock protection is <364>
pid[1] is on running 12345;
now public variable with lock protection is <365>
pid[1] is on running 12345;
now public variable with lock protection is <366>
pid[1] is on running 12345;
now public variable with lock protection is <367>
pid[1] is on running 12345;
now public variable with lock protection is <368>
pid[1] is on running 12345;
now public variable with lock protection is <369>
pid[1] is on running 12345;
now public variable with lock protection is <370>
pid[1] is on running 12345;
now public variable with lock protection is <371>
pid[1] is on running 12345;
now public variable with lock protection is <372>
pid[1] is on running 12345;
now public variable wpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
th lock protection is <352>
pid[2] is on running abcde;
now public variable with lock protection is <374>
pid[2] is on running abcde;
now public variable with lock protection is <375>
pid[2] is on running abcde;
now public variable with lock protection is <376>
pid[2] is on running abcde;
now public variable with lock protection is <377>
pid[2] is on running abcde;
now public variable with lock protection is <378>
pid[2] is on running abcde;
now public variable with lock protection is <379>
pid[2] is on running abcde;
now public variable with lock protection is <380>
pid[2] is on running abcde;
now public variable with lock protection is <381>
pid[2] is on running abcde;
now public variable with lock protection is <382>
pid[2] is on running apid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ction is <362>
pid[3] is on running !@#$^;
now public variable with lock protection is <383>
pid[3] is on running !@#$^;
now public variable with lock protection is <384>
pid[3] is on running !@#$^;
now public variable with lock protection is <385>
pid[3] is on running !@#$^;
now public variable with lock protection is <386>
pid[3] is on running !@#$^;
now public variable with lock protection is <387>
pid[3] is on running !@#$^;
now public variable with lock protection is <388>
pid[3] is on running !@#$^;
now public variable with lock protection is <389>
pid[3] is on running !@#$^;
now public variable with lock protection is <390>
pid[3] is on running !@#$^;
now public variable with lock protection is <391>
pid[3] is on running !@#$^;
now public variable with lock protection is <392>
pid[3] is on running !@#$^;
npid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ith lock protection is <373>
pid[1] is on running 12345;
now public variable with lock protection is <394>
pid[1] is on running 12345;
now public variable with lock protection is <395>
pid[1] is on running 12345;
now public variable with lock protection is <396>
pid[1] is on running 12345;
now public variable with lock protection is <397>
pid[1] is on running 12345;
now public variable with lock protection is <398>
pid[1] is on running 12345;
now public variable with lock protection is <399>
pid[1] is on running 12345;
now public variable with lock protection is <400>
pid[1] is on running 12345;
now public variable with lock protection is <401>
pid[1] is on running 12345;
now public variable with lock protection is <402>
pid[1] is on running 12345;
now public variablpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
bcde;
now public variable with lock protection is <404>
pid[2] is on running abcde;
now public variable with lock protection is <405>
pid[2] is on running abcde;
now public variable with lock protection is <406>
pid[2] is on running abcde;
now public variable with lock protection is <407>
pid[2] is on running abcde;
now public variable with lock protection is <408>
pid[2] is on running abcde;
now public variable with lock protection is <409>
pid[2] is on running abcde;
now public variable with lock protection is <410>
pid[2] is on running abcde;
now public variable with lock protection is <411>
pid[2] is on running abcde;
now public variable with lock protection is <412>
pid[2] is on running abcde;
now public variable with lock protection is <413>
pid[2] is on running abcde;
now public variabpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ow public variable with lock protection is <393>
pid[3] is on running !@#$^;
now public variable with lock protection is <415>
pid[3] is on running !@#$^;
now public variable with lock protection is <416>
pid[3] is on running !@#$^;
now public variable with lock protection is <417>
pid[3] is on running !@#$^;
now public variable with lock protection is <418>
pid[3] is on running !@#$^;
now public variable with lock protection is <419>
pid[3] is on running !@#$^;
now public variable with lock protection is <420>
pid[3] is on running !@#$^;
now public variable with lock protection is <421>
pid[3] is on running !@#$^;
now public variable with lock protection is <422>
pid[3] is on running !@#$^;
now public variable with lock protection is <423>
pid[3] is on running !@#$^;
now public variable with lock protection is <424>
pid[3] is on running !@#$^;
now public variable with lock protection is <425>
pid[3] is on running !@#$^;
now public variable with lock protection is <426>
pid[3] is on running !@#$^;
now public variable with lock protection is <427>
pid[3] is on running !@#$^;
now public variable with lock protection is <428>
pid[3] is on running !@#$^;
now public variable with lock protection is <429>
pid[3] is on running !@#$pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
e with lock protection is <403>
pid[1] is on running 12345;
now public variable with lock protection is <430>
pid[1] is on running 12345;
now public variable with lock protection is <431>
pid[1] is on running 12345;
now public variable with lock protection is <432>
pid[1] is on running 12345;
now public variable with lock protection is <433>
pid[1] is on running 12345;
now public variable with lock protection is <434>
pid[1] is on running 12345;
now public variable with lock protection is <435>
pid[1] is on running 12345;
now public variable with lock protection is <436>
pid[1] is on running 12345;
now public variable with lock protection is <437>
pid[1] is on running 12345;
now public variable with lock protection is <438>
pid[1] is on running 12345;
now public variable with lock protection is <439>
pid[1] is on running 12345;
now public variable with lock protection is <440>
pid[1] is on running 12345;
now public variable with lock protection is <441>
pid[1] is on running 12345;
now public variable with lock protection is <442>
pid[1] is on running 12345;
now public variable with lock protection is <443>
pid[1] is on running 12345;
now public variable with lock protection is <444>
pid[1] is on running 12345;
now public variable with lock protection is <445>
pid[1] is on running 12345;
now public variable with lock protection is <446>
pid[1] is on running 12345;
now public variable with lock protection is <447>
pid[1] is on running 12345;
now public variable with lock protection is <448>
pid[1] is on running 12345;
now public variable with lock protection is <449>
pid[1] is on running 12345;
now public variable with lock protection is <450>
pid[1] is on running 12345;
now pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
le with lock protection is <414>
pid[2] is on running abcde;
now public variable with lock protection is <452>
pid[2] is on running abcde;
now public variable with lock protection is <453>
pid[2] is on running abcde;
now public variable with lock protection is <454>
pid[2] is on running abcde;
now public variable with lock protection is <455>
pid[2] is on running abcde;
now public variable with lock protection is <456>
pid[2] is on running abcde;
now public variable with lock protection is <457>
pid[2] is on running abcde;
now public variable with lock protection is <458>
pid[2] is on running abcde;
now public variable with lock protection is <459>
pid[2] is on running abcde;
now public variable with lock protection is <460>
pid[2] is on running abcde;
now public variable with lock protection is <461>
pid[2] is on running abcde;
now public variable with lock protection is <462>
pid[2] is on running abcde;
now public variable with lock protection is <463>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
^;
now public variable with lock protection is <464>
pid[3] is on running !@#$^;
now public variable with lock protection is <465>
pid[3] is on running !@#$^;
now public variable with lock protection is <466>
pid[3] is on running !@#$^;
now public variable with lock protection is <467>
pid[3] is on running !@#$^;
now public variable with lock protection is <468>
pid[3] is on running !@#$^;
now public variable with lock protection is <469>
pid[3] is on running !@#$^;
now public variable with lock protection is <470>
pid[3] is on running !@#$^;
now public variable with lock protection is <471>
pid[3] is on running !@#$^;
now public variable with lock protection is <472>
pid[3] is on running !@#$^;
now public variable with lock protection is <473>
pid[3] is on runningpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
public variable with lock protection is <451>
pid[1] is on running 12345;
now public variable with lock protection is <474>
pid[1] is on running 12345;
now public variable with lock protection is <475>
pid[1] is on running 12345;
now public variable with lock protection is <476>
pid[1] is on running 12345;
now public variable with lock protection is <477>
pid[1] is on running 12345;
now public variable with lock protection is <478>
pid[1] is on running 12345;
now public variable with lock protection is <479>
pid[1] is on running 12345;
now public variable with lock protection is <480>
pid[1] is on running 12345;
now public variable with lock protection is <481>
pid[1] is on running 12345;
now public variable with lock protection is <482>
pid[1] is on running 12345;
now public variable with lock protection is <483pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <484>
pid[2] is on running abcde;
now public variable with lock protection is <485>
pid[2] is on running abcde;
now public variable with lock protection is <486>
pid[2] is on running abcde;
now public variable with lock protection is <487>
pid[2] is on running abcde;
now public variable with lock protection is <488>
pid[2] is on running abcde;
now public variable with lock protection is <489>
pid[2] is on running abcde;
now public variable with lock protection is <490>
pid[2] is on running abcde;
now public variable with lock protection is <491>
pid[2] is on running abcde;
now public variable with lock protection is <492>
pid[2] is on running abcde;
now public variable with lock protection is <493>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 !@#$^;
now public variable with lock protection is <495>
pid[3] is on running !@#$^;
now public variable with lock protection is <496>
pid[3] is on running !@#$^;
now public variable with lock protection is <497>
pid[3] is on running !@#$^;
now public variable with lock protection is <498>
pid[3] is on running !@#$^;
now public variable with lock protection is <499>
pid[3] is on running !@#$^;
now public variable with lock protection is <500>
pid[3] is on running !@#$^;
now public variable with lock protection is <501>
pid[3] is on running !@#$^;
now public variable with lock protection is <502>
pid[3] is on running !@#$^;
now public variable with lock protection is <503>
pid[3] is on running !@#$^;
now public pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
>
pid[1] is on running 12345;
now public variable with lock protection is <505>
pid[1] is on running 12345;
now public variable with lock protection is <506>
pid[1] is on running 12345;
now public variable with lock protection is <507>
pid[1] is on running 12345;
now public variable with lock protection is <508>
pid[1] is on running 12345;
now public variable with lock protection is <509>
pid[1] is on running 12345;
now public variable with lock protection is <510>
pid[1] is on running 12345;
now public variable with lock protection is <511>
pid[1] is on running 12345;
now public variable with lock protection is <512>
pid[1] is on running 12345;
now public variable with lock protection is <513>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <514>
pid[2] is on running abcde;
now public variable with lock protection is <515>
pid[2] is on running abcde;
now public variable with lock protection is <516>
pid[2] is on running abcde;
now public variable with lock protection is <517>
pid[2] is on running abcde;
now public variable with lock protection is <518>
pid[2] is on running abcde;
now public variable with lock protection is <519>
pid[2] is on running abcde;
now public variable with lock protection is <520>
pid[2] is on running abcde;
now public variable with lock protection is <521>
pid[2] is on running abcde;
now public variable with lock protection is <522>
pid[2] is on running abcde;
now public variable with lock protection is <523>
pid[2] is on running abcde;
now pubpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
variable with lock protection is <504>
pid[3] is on running !@#$^;
now public variable with lock protection is <525>
pid[3] is on running !@#$^;
now public variable with lock protection is <526>
pid[3] is on running !@#$^;
now public variable with lock protection is <527>
pid[3] is on running !@#$^;
now public variable with lock protection is <528>
pid[3] is on running !@#$^;
now public variable with lock protection is <529>
pid[3] is on running !@#$^;
now public variable with lock protection is <530>
pid[3] is on running !@#$^;
now public variable with lock protection is <531>
pid[3] is on running !@#$^;
now public variable with lock protection is <532>
pid[3] is on running !@#$^;
now public variable with lock protection is <533>
pid[3] is on running !@#$^;
now public variable pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
ppid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <534>
pid[1] is on running 12345;
now public variable with lock protection is <535>
pid[1] is on running 12345;
now public variable with lock protection is <536>
pid[1] is on running 12345;
now public variable with lock protection is <537>
pid[1] is on running 12345;
now public variable with lock protection is <538>
pid[1] is on running 12345;
now public variable with lock protection is <539>
pid[1] is on running 12345;
now public variable with lock protection is <540>
pid[1] is on running 12345;
now public variable with lock protection is <541>
pid[1] is on running 12345;
now public variable with lock protection is <542>
pid[1] is on running 12345;
now public variable wipid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
lic variable with lock protection is <524>
pid[2] is on running abcde;
now public variable with lock protection is <544>
pid[2] is on running abcde;
now public variable with lock protection is <545>
pid[2] is on running abcde;
now public variable with lock protection is <546>
pid[2] is on running abcde;
now public variable with lock protection is <547>
pid[2] is on running abcde;
now public variable with lock protection is <548>
pid[2] is on running abcde;
now public variable with lock protection is <549>
pid[2] is on running abcde;
now public variable with lock protection is <550>
pid[2] is on running abcde;
now public variable with lock protection is <551>
pid[2] is on running abcde;
now public variable with lock protection is <552>
pid[2] is on running abcde;
now public varipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
with lock protection is <534>
pid[3] is on running !@#$^;
now public variable with lock protection is <554>
pid[3] is on running !@#$^;
now public variable with lock protection is <555>
pid[3] is on running !@#$^;
now public variable with lock protection is <556>
pid[3] is on running !@#$^;
now public variable with lock protection is <557>
pid[3] is on running !@#$^;
now public variable with lock protection is <558>
pid[3] is on running !@#$^;
now public variable with lock protection is <559>
pid[3] is on running !@#$^;
now public variable with lock protection is <560>
pid[3] is on running !@#$^;
now public variable with lock protection is <561>
pid[3] is on running !@#$^;
now public variable with lock protection is <562>
pid[3] is on running !@#$^;
now public varpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
id[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kerpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
th lock protection is <543>
pid[1] is on running 12345;
now public variable with lock protection is <564>
pid[1] is on running 12345;
now public variable with lock protection is <565>
pid[1] is on running 12345;
now public variable with lock protection is <566>
pid[1] is on running 12345;
now public variable with lock protection is <567>
pid[1] is on running 12345;
now public variable with lock protection is <568>
pid[1] is on running 12345;
now public variable with lock protection is <569>
pid[1] is on running 12345;
now public variable with lock protection is <570>
pid[1] is on running 12345;
now public variable with lock protection is <571>
pid[1] is on running 12345;
now public variable with lock protection is <572>
pid[1] is on running 12345pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
able with lock protection is <553>
pid[2] is on running abcde;
now public variable with lock protection is <573>
pid[2] is on running abcde;
now public variable with lock protection is <574>
pid[2] is on running abcde;
now public variable with lock protection is <575>
pid[2] is on running abcde;
now public variable with lock protection is <576>
pid[2] is on running abcde;
now public variable with lock protection is <577>
pid[2] is on running abcde;
now public variable with lock protection is <578>
pid[2] is on running abcde;
now public variable with lock protection is <579>
pid[2] is on running abcde;
now public variable with lock protection is <580>
pid[2] is on running abcde;
now public variable with lpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
iable with lock protection is <563>
pid[3] is on running !@#$^;
now public variable with lock protection is <582>
pid[3] is on running !@#$^;
now public variable with lock protection is <583>
pid[3] is on running !@#$^;
now public variable with lock protection is <584>
pid[3] is on running !@#$^;
now public variable with lock protection is <585>
pid[3] is on running !@#$^;
now public variable with lock protection is <586>
pid[3] is on running !@#$^;
now public variable with lock protection is <587>
pid[3] is on running !@#$^;
now public variable with lock protection is <588>
pid[3] is on running !@#$^;
now public variable with lock protection is <589>
pid[3] is on running !@#$^;
now public variable with lock protecpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
nel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
;
now public variable with lock protection is <591>
pid[1] is on running 12345;
now public variable with lock protection is <592>
pid[1] is on running 12345;
now public variable with lock protection is <593>
pid[1] is on running 12345;
now public variable with lock protection is <594>
pid[1] is on running 12345;
now public variable with lock protection is <595>
pid[1] is on running 12345;
now public variable with lock protection is <596>
pid[1] is on running 12345;
now public variable with lock protection is <597>
pid[1] is on running 12345;
now public variable with lock protection is <598>
pid[1] is on running 12345;
now public variable with lock protection is <599>
pid[1] is on running 12345;
now public variable with lock protection is <600>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ock protection is <581>
pid[2] is on running abcde;
now public variable with lock protection is <601>
pid[2] is on running abcde;
now public variable with lock protection is <602>
pid[2] is on running abcde;
now public variable with lock protection is <603>
pid[2] is on running abcde;
now public variable with lock protection is <604>
pid[2] is on running abcde;
now public variable with lock protection is <605>
pid[2] is on running abcde;
now public variable with lock protection is <606>
pid[2] is on running abcde;
now public variable with lock protection is <607>
pid[2] is on running abcde;
now public variable with lock protection is <608>
pid[2] is on running abcde;
now public variable with lock protection is <609>
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
tion is <590>
pid[3] is on running !@#$^;
now public variable with lock protection is <610>
pid[3] is on running !@#$^;
now public variable with lock protection is <611>
pid[3] is on running !@#$^;
now public variable with lock protection is <612>
pid[3] is on running !@#$^;
now public variable with lock protection is <613>
pid[3] is on running !@#$^;
now public variable with lock protection is <614>
pid[3] is on running !@#$^;
now public variable with lock protection is <615>
pid[3] is on running !@#$^;
now public variable with lock protection is <616>
pid[3] is on running !@#$^;
now public variable with lock protection is <617>
pid[3] is on running !@#$^;
now public variable with lock protection is <618>
pid[3] is on running !@#$^;
now public variable with lock protection is <619>
pid[3] is on runpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thrpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <620>
pid[1] is on running 12345;
now public variable with lock protection is <621>
pid[1] is on running 12345;
now public variable with lock protection is <622>
pid[1] is on running 12345;
now public variable with lock protection is <623>
pid[1] is on running 12345;
now public variable with lock protection is <624>
pid[1] is on running 12345;
now public variable with lock protection is <625>
pid[1] is on running 12345;
now public variable with lock protection is <626>
pid[1] is on running 12345;
now public variable with lock protection is <627>
pid[1] is on running 12345;
now public variable with lock protection is <628>
pid[1] is on running 12345;
now public variable with lock protection is <629>
pid[1] is on running 12345;
now public variablepid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
pid[2] is on running abcde;
now public variable with lock protection is <631>
pid[2] is on running abcde;
now public variable with lock protection is <632>
pid[2] is on running abcde;
now public variable with lock protection is <633>
pid[2] is on running abcde;
now public variable with lock protection is <634>
pid[2] is on running abcde;
now public variable with lock protection is <635>
pid[2] is on running abcde;
now public variable with lock protection is <636>
pid[2] is on running abcde;
now public variable with lock protection is <637>
pid[2] is on running abcde;
now public variable with lock protection is <638>
pid[2] is on running abcde;
now public variable with lock protection is <639>
pid[2] is on running abcde;
now public variable with lock protection is <640>
pid[2] is on runningpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ning !@#$^;
now public variable with lock protection is <641>
pid[3] is on running !@#$^;
now public variable with lock protection is <642>
pid[3] is on running !@#$^;
now public variable with lock protection is <643>
pid[3] is on running !@#$^;
now public variable with lock protection is <644>
pid[3] is on running !@#$^;
now public variable with lock protection is <645>
pid[3] is on running !@#$^;
now public variable with lock protection is <646>
pid[3] is on running !@#$^;
now public variable with lock protection is <647>
pid[3] is on running !@#$^;
now public variable with lock protection is <648>
pid[3] is on running !@#$^;
now public variable with lock protection is <649>
pid[3] is on running !@#$^;
now pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ead now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
 with lock protection is <630>
pid[1] is on running 12345;
now public variable with lock protection is <651>
pid[1] is on running 12345;
now public variable with lock protection is <652>
pid[1] is on running 12345;
now public variable with lock protection is <653>
pid[1] is on running 12345;
now public variable with lock protection is <654>
pid[1] is on running 12345;
now public variable with lock protection is <655>
pid[1] is on running 12345;
now public variable with lock protection is <656>
pid[1] is on running 12345;
now public variable with lock protection is <657>
pid[1] is on running 12345;
now public variable with lock protection is <658>
pid[1] is on running 12345;
now public variable with lock protection is <659>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
 abcde;
now public variable with lock protection is <661>
pid[2] is on running abcde;
now public variable with lock protection is <662>
pid[2] is on running abcde;
now public variable with lock protection is <663>
pid[2] is on running abcde;
now public variable with lock protection is <664>
pid[2] is on running abcde;
now public variable with lock protection is <665>
pid[2] is on running abcde;
now public variable with lock protection is <666>
pid[2] is on running abcde;
now public variable with lock protection is <667>
pid[2] is on running abcde;
now public variable with lock protection is <668>
pid[2] is on running abcde;
now public variable with lock protection is <669>
pid[2] is on running abcde;
nopid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
public variable with lock protection is <650>
pid[3] is on running !@#$^;
now public variable with lock protection is <671>
pid[3] is on running !@#$^;
now public variable with lock protection is <672>
pid[3] is on running !@#$^;
now public variable with lock protection is <673>
pid[3] is on running !@#$^;
now public variable with lock protection is <674>
pid[3] is on running !@#$^;
now public variable with lock protection is <675>
pid[3] is on running !@#$^;
now public variable with lock protection is <676>
pid[3] is on running !@#$^;
now public variable with lock protection is <677>
pid[3] is on running !@#$^;
now public variable with lock protection is <678>
pid[3] is on running !@#$^;
now public variable with lock protection is <679>
pid[3] is on running !@#$^;
now public variable with lock protection is <680>
pid[3] is on running !@#$^;
now public variable wipid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread npid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <660>
pid[1] is on running 12345;
now public variable with lock protection is <682>
pid[1] is on running 12345;
now public variable with lock protection is <683>
pid[1] is on running 12345;
now public variable with lock protection is <684>
pid[1] is on running 12345;
now public variable with lock protection is <685>
pid[1] is on running 12345;
now public variable with lock protection is <686>
pid[1] is on running 12345;
now public variable with lock protection is <687>
pid[1] is on running 12345;
now public variable with lock protection is <688>
pid[1] is on running 12345;
now public variable with lock protection is <689>
pid[1] is on running 12345;
now public variable with locpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
w public variable with lock protection is <670>
pid[2] is on running abcde;
now public variable with lock protection is <691>
pid[2] is on running abcde;
now public variable with lock protection is <692>
pid[2] is on running abcde;
now public variable with lock protection is <693>
pid[2] is on running abcde;
now public variable with lock protection is <694>
pid[2] is on running abcde;
now public variable with lock protection is <695>
pid[2] is on running abcde;
now public variable with lock protection is <696>
pid[2] is on running abcde;
now public variable with lock protection is <697>
pid[2] is on running abcde;
now public variable with lock protection is <698>
pid[2] is on running abcde;
now public variable with lock protection is <699>
pid[2] is on running abcde;
now public variable with lock protection is <700>
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
th lock protection is <681>
pid[3] is on running !@#$^;
now public variable with lock protection is <701>
pid[3] is on running !@#$^;
now public variable with lock protection is <702>
pid[3] is on running !@#$^;
now public variable with lock protection is <703>
pid[3] is on running !@#$^;
now public variable with lock protection is <704>
pid[3] is on running !@#$^;
now public variable with lock protection is <705>
pid[3] is on running !@#$^;
now public variable with lock protection is <706>
pid[3] is on running !@#$^;
now public variable with lock protection is <707>
pid[3] is on running !@#$^;
now public variable with lock protection is <708>
pid[3] is on running !@#$^;
now public variable with lock protection is <709>
pid[3] is on running !@#$^;
now public vapid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ow
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pipid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
k protection is <690>
pid[1] is on running 12345;
now public variable with lock protection is <711>
pid[1] is on running 12345;
now public variable with lock protection is <712>
pid[1] is on running 12345;
now public variable with lock protection is <713>
pid[1] is on running 12345;
now public variable with lock protection is <714>
pid[1] is on running 12345;
now public variable with lock protection is <715>
pid[1] is on running 12345;
now public variable with lock protection is <716>
pid[1] is on running 12345;
now public variable with lock protection is <717>
pid[1] is on running 12345;
now public variable with lock protection is <718>
pid[1] is on running 12345;
now public variable with lock protection is <719>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
pid[2] is on running abcde;
now public variable with lock protection is <721>
pid[2] is on running abcde;
now public variable with lock protection is <722>
pid[2] is on running abcde;
now public variable with lock protection is <723>
pid[2] is on running abcde;
now public variable with lock protection is <724>
pid[2] is on running abcde;
now public variable with lock protection is <725>
pid[2] is on running abcde;
now public variable with lock protection is <726>
pid[2] is on running abcde;
now public variable with lock protection is <727>
pid[2] is on running abcde;
now public variable with lock protection is <728>
pid[2] is on running abcde;
now public variable with lock protection is <729>
pid[2] is on running abcde;
now public variable with lock protection is <730>
pid[2] is on running abcde;
now public variable with lock protection is <731>
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
riable with lock protection is <710>
pid[3] is on running !@#$^;
now public variable with lock protection is <732>
pid[3] is on running !@#$^;
now public variable with lock protection is <733>
pid[3] is on running !@#$^;
now public variable with lock protection is <734>
pid[3] is on running !@#$^;
now public variable with lock protection is <735>
pid[3] is on running !@#$^;
now public variable with lock protection is <736>
pid[3] is on running !@#$^;
now public variable with lock protection is <737>
pid[3] is on running !@#$^;
now public variable with lock protection is <738>
pid[3] is on running !@#$^;
now public variable with lock protection is <739>
pid[3] is on running !@#$^;
now public variable with lock protection is <740>
pid[3] is on runninpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
d[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kerpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <740>
pid[1] is on running 12345;
now public variable with lock protection is <741>
pid[1] is on running 12345;
now public variable with lock protection is <742>
pid[1] is on running 12345;
now public variable with lock protection is <743>
pid[1] is on running 12345;
now public variable with lock protection is <744>
pid[1] is on running 12345;
now public variable with lock protection is <745>
pid[1] is on running 12345;
now public variable with lock protection is <746>
pid[1] is on running 12345;
now public variable with lock protection is <747>
pid[1] is on running 12345;
now public variable with lock protection is <748>
pid[1] is on running 12345;
now public variable with lock protection is <749>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
pid[2] is on running abcde;
now public variable with lock protection is <751>
pid[2] is on running abcde;
now public variable with lock protection is <752>
pid[2] is on running abcde;
now public variable with lock protection is <753>
pid[2] is on running abcde;
now public variable with lock protection is <754>
pid[2] is on running abcde;
now public variable with lock protection is <755>
pid[2] is on running abcde;
now public variable with lock protection is <756>
pid[2] is on running abcde;
now public variable with lock protection is <757>
pid[2] is on running abcde;
now public variable with lock protection is <758>
pid[2] is on running abcde;
now public variable with lock protection is <759>
pid[2] is on running abcde;
now public vpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
g !@#$^;
now public variable with lock protection is <761>
pid[3] is on running !@#$^;
now public variable with lock protection is <762>
pid[3] is on running !@#$^;
now public variable with lock protection is <763>
pid[3] is on running !@#$^;
now public variable with lock protection is <764>
pid[3] is on running !@#$^;
now public variable with lock protection is <765>
pid[3] is on running !@#$^;
now public variable with lock protection is <766>
pid[3] is on running !@#$^;
now public variable with lock protection is <767>
pid[3] is on running !@#$^;
now public variable with lock protection is <768>
pid[3] is on running !@#$^;
now public variable with lock protection is <769>
pid[3] is on running !@#$^;
now public variable with pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
nel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel mapid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <770>
pid[1] is on running 12345;
now public variable with lock protection is <771>
pid[1] is on running 12345;
now public variable with lock protection is <772>
pid[1] is on running 12345;
now public variable with lock protection is <773>
pid[1] is on running 12345;
now public variable with lock protection is <774>
pid[1] is on running 12345;
now public variable with lock protection is <775>
pid[1] is on running 12345;
now public variable with lock protection is <776>
pid[1] is on running 12345;
now public variable with lock protection is <777>
pid[1] is on running 12345;
now public variable with lock protection is <778>
pid[1] is on running 12345;
now public variable with lock protection is <779>
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ariable with lock protection is <760>
pid[2] is on running abcde;
now public variable with lock protection is <780>
pid[2] is on running abcde;
now public variable with lock protection is <781>
pid[2] is on running abcde;
now public variable with lock protection is <782>
pid[2] is on running abcde;
now public variable with lock protection is <783>
pid[2] is on running abcde;
now public variable with lock protection is <784>
pid[2] is on running abcde;
now public variable with lock protection is <785>
pid[2] is on running abcde;
now public variable with lock protection is <786>
pid[2] is on running abcde;
now public variable with lock protection is <787>
pid[2] is on running abcde;
now public variable with lock protection is <788>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
lock protection is <770>
pid[3] is on running !@#$^;
now public variable with lock protection is <790>
pid[3] is on running !@#$^;
now public variable with lock protection is <791>
pid[3] is on running !@#$^;
now public variable with lock protection is <792>
pid[3] is on running !@#$^;
now public variable with lock protection is <793>
pid[3] is on running !@#$^;
now public variable with lock protection is <794>
pid[3] is on running !@#$^;
now public variable with lock protection is <795>
pid[3] is on running !@#$^;
now public variable with lock protection is <796>
pid[3] is on running !@#$^;
now public variable with lock protection is <797>
pid[3] is on running !@#$^;
now public variable with lock protection is <798>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
in thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread nowpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
pid[1] is on running 12345;
now public variable with lock protection is <800>
pid[1] is on running 12345;
now public variable with lock protection is <801>
pid[1] is on running 12345;
now public variable with lock protection is <802>
pid[1] is on running 12345;
now public variable with lock protection is <803>
pid[1] is on running 12345;
now public variable with lock protection is <804>
pid[1] is on running 12345;
now public variable with lock protection is <805>
pid[1] is on running 12345;
now public variable with lock protection is <806>
pid[1] is on running 12345;
now public variable with lock protection is <807>
pid[1] is on running 12345;
now public variable with lock protection is <808>
pid[1] is on running 12345;
now public variable with lock protection is <809>
pid[1] is on running 12345;
now public variable with lock protection is <810>
pid[1] is on running 12345;
now public variable with lock protection is <811>
pid[1] is on running 12345;
now public variable with lock protection is <812>
pid[1] is on running 12345;
now public variable with lock protection is <813>
pid[1] is on running 12345;
now public variable with lock protection is <814>
pid[1] is on running 12345;
now public variable with lock protection is <815>
pid[1] is on running 12345;
now public variable with lock protection is <816>
pid[1] is on running 12345;
now public variable with lock protection is <817>
pid[1] is on running 12345;
now public variable with lock protection is <818>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <819>
pid[2] is on running abcde;
now public variable with lock protection is <820>
pid[2] is on running abcde;
now public variable with lock protection is <821>
pid[2] is on running abcde;
now public variable with lock protection is <822>
pid[2] is on running abcde;
now public variable with lock protection is <823>
pid[2] is on running abcde;
now public variable with lock protection is <824>
pid[2] is on running abcde;
now public variable with lock protection is <825>
pid[2] is on running abcde;
now public variable with lock protection is <826>
pid[2] is on running abcde;
now public variable with lock protection is <827>
pid[2] is on running abcde;
now public variable with lock protection is <828>
pid[2] is on running abcde;
now public variable with lock protection is <829>
pid[2] is on running abcde;
now public variable with lock protection is <830>
pid[2] is on running abcde;
now public variable with lock protection is <831>
pid[2] is on running abcde;
now public variable with lock protection is <832>
pid[2] is on running abcde;
now public variable with lock protection is <833>
pid[2] is on running abcde;
now public variable with lock protection is <834>
pid[2] is on running abcde;
now public variable with lock protection is <835>
pid[2] is on running abcde;
now public variable with lock protection is <836>
pid[2] is on running abcde;
now public variable with lock protection is <837>
pid[2] is on running abcde;
now public variable with lock protection is <838>
pid[2] is on running abcde;
now public variable with lock protection is <839>
pid[2] is on running abcde;
now public variable with lock protection is <840>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <799>
pid[3] is on running !@#$^;
now public variable with lock protection is <842>
pid[3] is on running !@#$^;
now public variable with lock protection is <843>
pid[3] is on running !@#$^;
now public variable with lock protection is <844>
pid[3] is on running !@#$^;
now public variable with lock protection is <845>
pid[3] is on running !@#$^;
now public variable with lock protection is <846>
pid[3] is on running !@#$^;
now public variable with lock protection is <847>
pid[3] is on running !@#$^;
now public variable with lock protection is <848>
pid[3] is on running !@#$^;
now public variable with lock protection is <849>
pid[3] is on running !@#$^;
now public variable with lock protection is <850>
pid[3] is on running !@#$^;
now public variable with lock protection is <851>
pid[3] is on running !@#$^;
now public variable with lock protection is <852>
pid[3] is on running !@#$^;
now public variable with lock protection is <853>
pid[3] is on running !@#$^;
now public variable with lock protection is <854>
pid[3] is on running !@#$^;
now public variable with lock protection is <855>
pid[3] is on running !@#$^;
now public variable with lock protection is <856>
pid[3] is on running !@#$^;
now public variable with lock protection is <857>
pid[3] is on running !@#$^;
now public variable with lock protection is <858>
pid[3] is on running !@#$^;
now public variable with lock protection is <859>
pid[3] is on running !@#$^;
now public variable with lock protection is <860>
pid[3] is on running !@#$^;
now public variable with lock protection is <861>
pid[3] is on running !@#$^;
now public variable with lock protection is <862>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!

pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <863>
pid[1] is on running 12345;
now public variable with lock protection is <864>
pid[1] is on running 12345;
now public variable with lock protection is <865>
pid[1] is on running 12345;
now public variable with lock protection is <866>
pid[1] is on running 12345;
now public variable with lock protection is <867>
pid[1] is on running 12345;
now public variable with lock protection is <868>
pid[1] is on running 12345;
now public variable with lock protection is <869>
pid[1] is on running 12345;
now public variable with lock protection is <870>
pid[1] is on running 12345;
now public variable with lock protection is <871>
pid[1] is on running 12345;
now public variable with lock protection is <872>
pid[1] is on running 12345;
now public variable with lock protection is <873>
pid[1] is on running 12345;
now public variable with lock protection is <874>
pid[1] is on running 12345;
now public variable with lock protection is <875>
pid[1] is on running 12345;
now public variable with lock protection is <876>
pid[1] is on running 12345;
now public variable with lock protection is <877>
pid[1] is on running 12345;
now public variable with lock protection is <878>
pid[1] is on running 12345;
now public variable with lock protection is <879>
pid[1] is on running 12345;
now public variable with lock protection is <880>
pid[1] is on running 12345;
now public variable with lock protection is <881>
pid[1] is on running 12345;
now public variable with lock protection is <882>
pid[1] is on running 12345;
now public variable with lock protection is <883>
pid[1] is on running 12345;
now public variable with lock protection is <884>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <885>
pid[2] is on running abcde;
now public variable with lock protection is <886>
pid[2] is on running abcde;
now public variable with lock protection is <887>
pid[2] is on running abcde;
now public variable with lock protection is <888>
pid[2] is on running abcde;
now public variable with lock protection is <889>
pid[2] is on running abcde;
now public variable with lock protection is <890>
pid[2] is on running abcde;
now public variable with lock protection is <891>
pid[2] is on running abcde;
now public variable with lock protection is <892>
pid[2] is on running abcde;
now public variable with lock protection is <893>
pid[2] is on running abcde;
now public variable with lock protection is <894>
pid[2] is on running abcde;
now public variable with lock protection is <895>
pid[2] is on running abcde;
now public variable with lock protection is <896>
pid[2] is on running abcde;
now public variable with lock protection is <897>
pid[2] is on running abcde;
now public variable with lock protection is <898>
pid[2] is on running abcde;
now public variable with lock protection is <899>
pid[2] is on running abcde;
now public variable with lock protection is <900>
pid[2] is on running abcde;
now public variable with lock protection is <901>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <863>
pid[3] is on running !@#$^;
now public variable with lock protection is <903>
pid[3] is on running !@#$^;
now public variable with lock protection is <904>
pid[3] is on running !@#$^;
now public variable with lock protection is <905>
pid[3] is on running !@#$^;
now public variable with lock protection is <906>
pid[3] is on running !@#$^;
now public variable with lock protection is <907>
pid[3] is on running !@#$^;
now public variable with lock protection is <908>
pid[3] is on running !@#$^;
now public variable with lock protection is <909>
pid[3] is on running !@#$^;
now public variable with lock protection is <910>
pid[3] is on running !@#$^;
now public variable with lock protectiopid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <911>
pid[1] is on running 12345;
now public variable with lock protection is <912>
pid[1] is on running 12345;
now public variable with lock protection is <913>
pid[1] is on running 12345;
now public variable with lock protection is <914>
pid[1] is on running 12345;
now public variable with lock protection is <915>
pid[1] is on running 12345;
now public variable with lock protection is <916>
pid[1] is on running 12345;
now public variable with lock protection is <917>
pid[1] is on running 12345;
now public variable with lock protection is <918>
pid[1] is on running 12345;
now public variable with lock protection is <919>
pid[1] is on running 12345;
now publipid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <902>
pid[2] is on running abcde;
now public variable with lock protection is <921>
pid[2] is on running abcde;
now public variable with lock protection is <922>
pid[2] is on running abcde;
now public variable with lock protection is <923>
pid[2] is on running abcde;
now public variable with lock protection is <924>
pid[2] is on running abcde;
now public variable with lock protection is <925>
pid[2] is on running abcde;
now public variable with lock protection is <926>
pid[2] is on running abcde;
now public variable with lock protection is <927>
pid[2] is on running abcde;
now public variable with lock protection is <928>
pid[2] is on running abcde;
now public variable with lock protection is <929>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
n is <911>
pid[3] is on running !@#$^;
now public variable with lock protection is <931>
pid[3] is on running !@#$^;
now public variable with lock protection is <932>
pid[3] is on running !@#$^;
now public variable with lock protection is <933>
pid[3] is on running !@#$^;
now public variable with lock protection is <934>
pid[3] is on running !@#$^;
now public variable with lock protection is <935>
pid[3] is on running !@#$^;
now public variable with lock protection is <936>
pid[3] is on running !@#$^;
now public variable with lock protection is <937>
pid[3] is on running !@#$^;
now public variable with lock protection is <938>
pid[3] is on running !@#$^;
now public variable with lock protection is <939>
pid[3] is on running !@#$^;
now public variable with lock protection is <940>
pid[3] ipid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
c variable with lock protection is <920>
pid[1] is on running 12345;
now public variable with lock protection is <941>
pid[1] is on running 12345;
now public variable with lock protection is <942>
pid[1] is on running 12345;
now public variable with lock protection is <943>
pid[1] is on running 12345;
now public variable with lock protection is <944>
pid[1] is on running 12345;
now public variable with lock protection is <945>
pid[1] is on running 12345;
now public variable with lock protection is <946>
pid[1] is on running 12345;
now public variable with lock protection is <947>
pid[1] is on running 12345;
now public variable with lock protection is <948>
pid[1] is on running 12345;
now public variable with lock protection is <949>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <930>
pid[2] is on running abcde;
now public variable with lock protection is <951>
pid[2] is on running abcde;
now public variable with lock protection is <952>
pid[2] is on running abcde;
now public variable with lock protection is <953>
pid[2] is on running abcde;
now public variable with lock protection is <954>
pid[2] is on running abcde;
now public variable with lock protection is <955>
pid[2] is on running abcde;
now public variable with lock protection is <956>
pid[2] is on running abcde;
now public variable with lock protection is <957>
pid[2] is on running abcde;
now public variable with lock protection is <958>
pid[2] is on running abcde;
now public variable with lock protection is <959>
pid[2] is on runningpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
s on running !@#$^;
now public variable with lock protection is <960>
pid[3] is on running !@#$^;
now public variable with lock protection is <961>
pid[3] is on running !@#$^;
now public variable with lock protection is <962>
pid[3] is on running !@#$^;
now public variable with lock protection is <963>
pid[3] is on running !@#$^;
now public variable with lock protection is <964>
pid[3] is on running !@#$^;
now public variable with lock protection is <965>
pid[3] is on running !@#$^;
now public variable with lock protection is <966>
pid[3] is on running !@#$^;
now public variable with lock protection is <967>
pid[3] is on running !@#$^;
now public variable with lock protection is <968>
pid[3] is on running !@#$^;
now public variable with lock protection is <969>
pid[3] is on running !@#$^;
now public variable with lock protection is <970>
pidpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <950>
pid[1] is on running 12345;
now public variable with lock protection is <971>
pid[1] is on running 12345;
now public variable with lock protection is <972>
pid[1] is on running 12345;
now public variable with lock protection is <973>
pid[1] is on running 12345;
now public variable with lock protection is <974>
pid[1] is on running 12345;
now public variable with lock protection is <975>
pid[1] is on running 12345;
now public variable with lock protection is <976>
pid[1] is on running 12345;
now public variable with lock protection is <977>
pid[1] is on running 12345;
now public variable with lock protection is <978>
pid[1] is on running 12345;
now public variable with lock protection is <979>
pid[1] is on running 12345;
now pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
 abcde;
now public variable with lock protection is <981>
pid[2] is on running abcde;
now public variable with lock protection is <982>
pid[2] is on running abcde;
now public variable with lock protection is <983>
pid[2] is on running abcde;
now public variable with lock protection is <984>
pid[2] is on running abcde;
now public variable with lock protection is <985>
pid[2] is on running abcde;
now public variable with lock protection is <986>
pid[2] is on running abcde;
now public variable with lock protection is <987>
pid[2] is on running abcde;
now public variable with lock protection is <988>
pid[2] is on running abcde;
now public variable with lock protection is <989>
pid[2] is on running abcde;
now public variable with lock ppid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
[3] is on running !@#$^;
now public variable with lock protection is <991>
pid[3] is on running !@#$^;
now public variable with lock protection is <992>
pid[3] is on running !@#$^;
now public variable with lock protection is <993>
pid[3] is on running !@#$^;
now public variable with lock protection is <994>
pid[3] is on running !@#$^;
now public variable with lock protection is <995>
pid[3] is on running !@#$^;
now public variable with lock protection is <996>
pid[3] is on running !@#$^;
now public variable with lock protection is <997>
pid[3] is on running !@#$^;
now public variable with lock protection is <998>
pid[3] is on running !@#$^;
now public variable with lock protection is <999>
pid[3] is on running !@#$^;
now public variable with lock protection is <1000>
pid[3] is on running !@#pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main threadpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
public variable with lock protection is <980>
pid[1] is on running 12345;
now public variable with lock protection is <1001>
pid[1] is on running 12345;
now public variable with lock protection is <1002>
pid[1] is on running 12345;
now public variable with lock protection is <1003>
pid[1] is on running 12345;
now public variable with lock protection is <1004>
pid[1] is on running 12345;
now public variable with lock protection is <1005>
pid[1] is on running 12345;
now public variable with lock protection is <1006>
pid[1] is on running 12345;
now public variable with lock protection is <1007>
pid[1] is on running 12345;
now public variable with lock protection is <1008>
pid[1] is on running 12345;
now public variable with lock protection is <1009>
pid[1] is on running 12345;
now public variable with lock propid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
rotection is <990>
pid[2] is on running abcde;
now public variable with lock protection is <1011>
pid[2] is on running abcde;
now public variable with lock protection is <1012>
pid[2] is on running abcde;
now public variable with lock protection is <1013>
pid[2] is on running abcde;
now public variable with lock protection is <1014>
pid[2] is on running abcde;
now public variable with lock protection is <1015>
pid[2] is on running abcde;
now public variable with lock protection is <1016>
pid[2] is on running abcde;
now public variable with lock protection is <1017>
pid[2] is on running abcde;
now public variable with lock protection is <1018>
pid[2] is on running abcde;
now public variable with lock protection is <1019>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
$^;
now public variable with lock protection is <1021>
pid[3] is on running !@#$^;
now public variable with lock protection is <1022>
pid[3] is on running !@#$^;
now public variable with lock protection is <1023>
pid[3] is on running !@#$^;
now public variable with lock protection is <1024>
pid[3] is on running !@#$^;
now public variable with lock protection is <1025>
pid[3] is on running !@#$^;
now public variable with lock protection is <1026>
pid[3] is on running !@#$^;
now public variable with lock protection is <1027>
pid[3] is on running !@#$^;
now public variable with lock protection is <1028>
pid[3] is on running !@#$^;
now public variable with lock protection is <1029>
pid[3] is on running !@#$^;
now public variable with lock protection is <1030>
pid[3] is on running !@#$^;
now public variable with lock protectionpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
 now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],Inpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
tection is <1010>
pid[1] is on running 12345;
now public variable with lock protection is <1032>
pid[1] is on running 12345;
now public variable with lock protection is <1033>
pid[1] is on running 12345;
now public variable with lock protection is <1034>
pid[1] is on running 12345;
now public variable with lock protection is <1035>
pid[1] is on running 12345;
now public variable with lock protection is <1036>
pid[1] is on running 12345;
now public variable with lock protection is <1037>
pid[1] is on running 12345;
now public variable with lock protection is <1038>
pid[1] is on running 12345;
now public variable with lock protection is <1039>
pid[1] is on running 12345;
now public variable with lock protection is <1040>
pid[1] is on running 12345;pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1040>
pid[2] is on running abcde;
now public variable with lock protection is <1041>
pid[2] is on running abcde;
now public variable with lock protection is <1042>
pid[2] is on running abcde;
now public variable with lock protection is <1043>
pid[2] is on running abcde;
now public variable with lock protection is <1044>
pid[2] is on running abcde;
now public variable with lock protection is <1045>
pid[2] is on running abcde;
now public variable with lock protection is <1046>
pid[2] is on running abcde;
now public variable with lock protection is <1047>
pid[2] is on running abcde;
now public variable with lock protection is <1048>
pid[2] is on running abcde;
now public variable with lock protection is <1049>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 is <1031>
pid[3] is on running !@#$^;
now public variable with lock protection is <1051>
pid[3] is on running !@#$^;
now public variable with lock protection is <1052>
pid[3] is on running !@#$^;
now public variable with lock protection is <1053>
pid[3] is on running !@#$^;
now public variable with lock protection is <1054>
pid[3] is on running !@#$^;
now public variable with lock protection is <1055>
pid[3] is on running !@#$^;
now public variable with lock protection is <1056>
pid[3] is on running !@#$^;
now public variable with lock protection is <1057>
pid[3] is on running !@#$^;
now public variable with lock protection is <1058>
pid[3] is on running !@#$^;
now public variable with lock protection is <1059>
pid[3] is on running !@#$^;
now public variable with lock protection is <1060>
pid[3] is on running !@#$^;
now public variable with lock protection is <1061>
pid[3] is on running !@#$^;
now public variable with lock protection is <1062>
pid[3] is on runningpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
 kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel maipid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!

now public variable with lock protection is <1063>
pid[1] is on running 12345;
now public variable with lock protection is <1064>
pid[1] is on running 12345;
now public variable with lock protection is <1065>
pid[1] is on running 12345;
now public variable with lock protection is <1066>
pid[1] is on running 12345;
now public variable with lock protection is <1067>
pid[1] is on running 12345;
now public variable with lock protection is <1068>
pid[1] is on running 12345;
now public variable with lock protection is <1069>
pid[1] is on running 12345;
now public variable with lock protection is <1070>
pid[1] is on running 12345;
now public variable with lock protection is <1071>
pid[1] is on running 12345;
now public variable with lock protection is <1072>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1073>
pid[2] is on running abcde;
now public variable with lock protection is <1074>
pid[2] is on running abcde;
now public variable with lock protection is <1075>
pid[2] is on running abcde;
now public variable with lock protection is <1076>
pid[2] is on running abcde;
now public variable with lock protection is <1077>
pid[2] is on running abcde;
now public variable with lock protection is <1078>
pid[2] is on running abcde;
now public variable with lock protection is <1079>
pid[2] is on running abcde;
now public variable with lock protection is <1080>
pid[2] is on running abcde;
now public variable with lock protection is <1081>
pid[2] is on running abcde;
now public variable with lock protection is <1082>
pid[2] is on running abcde;
now publpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 !@#$^;
now public variable with lock protection is <1084>
pid[3] is on running !@#$^;
now public variable with lock protection is <1085>
pid[3] is on running !@#$^;
now public variable with lock protection is <1086>
pid[3] is on running !@#$^;
now public variable with lock protection is <1087>
pid[3] is on running !@#$^;
now public variable with lock protection is <1088>
pid[3] is on running !@#$^;
now public variable with lock protection is <1089>
pid[3] is on running !@#$^;
now public variable with lock protection is <1090>
pid[3] is on running !@#$^;
now public variable with lock protection is <1091>
pid[3] is on running !@#$^;
now public variable with lock protection is <1092>
pid[3] is on running !@#$^;
now public variable with lock protection is <1093>
pid[3] is on running !@#$^;
now publpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
n thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel mainpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1094>
pid[1] is on running 12345;
now public variable with lock protection is <1095>
pid[1] is on running 12345;
now public variable with lock protection is <1096>
pid[1] is on running 12345;
now public variable with lock protection is <1097>
pid[1] is on running 12345;
now public variable with lock protection is <1098>
pid[1] is on running 12345;
now public variable with lock protection is <1099>
pid[1] is on running 12345;
now public variable with lock protection is <1100>
pid[1] is on running 12345;
now public variable with lock protection is <1101>
pid[1] is on running 12345;
now public variable with lock protection is <1102>
pid[1] is on running 12345;
now public variable with lock protection is <1103>
pid[1] is on running 12345;
now public variable with lock protection is <1104>
pid[1] is on pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ic variable with lock protection is <1083>
pid[2] is on running abcde;
now public variable with lock protection is <1105>
pid[2] is on running abcde;
now public variable with lock protection is <1106>
pid[2] is on running abcde;
now public variable with lock protection is <1107>
pid[2] is on running abcde;
now public variable with lock protection is <1108>
pid[2] is on running abcde;
now public variable with lock protection is <1109>
pid[2] is on running abcde;
now public variable with lock protection is <1110>
pid[2] is on running abcde;
now public variable with lock protection is <1111>
pid[2] is on running abcde;
now public variable with lock protection is <1112>
pid[2] is on running abcde;
now public variable with lock protection is <1113>
pid[2] is on running abcde;
now pubpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ic variable with lock protection is <1094>
pid[3] is on running !@#$^;
now public variable with lock protection is <1115>
pid[3] is on running !@#$^;
now public variable with lock protection is <1116>
pid[3] is on running !@#$^;
now public variable with lock protection is <1117>
pid[3] is on running !@#$^;
now public variable with lock protection is <1118>
pid[3] is on running !@#$^;
now public variable with lock protection is <1119>
pid[3] is on running !@#$^;
now public variable with lock protection is <1120>
pid[3] is on running !@#$^;
now public variable with lock protection is <1121>
pid[3] is on running !@#$^;
now public variable with lock protection is <1122>
pid[3] is on running !@#$^;
now public variable with pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
 thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
running 12345;
now public variable with lock protection is <1124>
pid[1] is on running 12345;
now public variable with lock protection is <1125>
pid[1] is on running 12345;
now public variable with lock protection is <1126>
pid[1] is on running 12345;
now public variable with lock protection is <1127>
pid[1] is on running 12345;
now public variable with lock protection is <1128>
pid[1] is on running 12345;
now public variable with lock protection is <1129>
pid[1] is on running 12345;
now public variable with lock protection is <1130>
pid[1] is on running 12345;
now public variable with lock protection is <1131>
pid[1] is on running 12345;
now public variable with lock protection is <1132>
pid[1] is on running 12345;
now public variable with lock protection is <1133>
pid[1] is on running 12345;
now public variable with lock protection is <1134>
pid[1] is on running 12345;
now public variable with lock protection is <1135>
pid[1] is on running 12345;
now public variable with lock protection is <1136>
pid[1] is on running 12345;
now public variable with lock protection is <1137>
pid[1] is on running 12345;
now public variable with lock protection is <1138>
pid[1] is on running 12345;
now public variable with lock protection is <1139>
pid[1] is on running 12345;
now public variable with lock protection is <1140>
pid[1] is on running 12345;
now public variable with lock protection is <1141>
pid[1] is on running 12345;
now public variable with lock protection is <1142>
pid[1] is on running 12345;
now public variable with lock protection is <1143>
pid[1] is on running 12345;
now public variable with lock protectionpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
lic variable with lock protection is <1114>
pid[2] is on running abcde;
now public variable with lock protection is <1145>
pid[2] is on running abcde;
now public variable with lock protection is <1146>
pid[2] is on running abcde;
now public variable with lock protection is <1147>
pid[2] is on running abcde;
now public variable with lock protection is <1148>
pid[2] is on running abcde;
now public variable with lock protection is <1149>
pid[2] is on running abcde;
now public variable with lock protection is <1150>
pid[2] is on running abcde;
now public variable with lock protection is <1151>
pid[2] is on running abcde;
now public variable with lock protection is <1152>
pid[2] is on running abcde;
now public variable with lock protection is <1153>
pid[2] is on running abcde;
now public variable with lock protection is <1154>
pid[2] is on running abcde;
now public variable with lock protection is <1155>
pid[2] is on running abcde;
now public variable with lock protection is <1156>
pid[2] is on running abcde;
now public variable with lock protection is <1157>
pid[2] is on running abcde;
now public variable with lock protection is <1158>
pid[2] is on running abcde;
now public variable with lock protection is <1159>
pid[2] is on running abcde;
now public variable with lock protection is <1160>
pid[2] is on running abcde;
now public variable with lock protection is <1161>
pid[2] is on running abcde;
now public variable with lock protection is <1162>
pid[2] is on running abcde;
now public variable with lock protection is <1163>
pid[2] is on running abcde;
now public variable with lock protection is <1164>
pid[2] is on running abcde;
now public variable with lock protection is <1165>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
lock protection is <1123>
pid[3] is on running !@#$^;
now public variable with lock protection is <1167>
pid[3] is on running !@#$^;
now public variable with lock protection is <1168>
pid[3] is on running !@#$^;
now public variable with lock protection is <1169>
pid[3] is on running !@#$^;
now public variable with lock protection is <1170>
pid[3] is on running !@#$^;
now public variable with lock protection is <1171>
pid[3] is on running !@#$^;
now public variable with lock protection is <1172>
pid[3] is on running !@#$^;
now public variable with lock protection is <1173>
pid[3] is on running !@#$^;
now public variable with lock protection is <1174>
pid[3] is on running !@#$^;
now public variable with lock protection is <1175>
pid[3] is on running !@#$^;
now public variable with lock protection is <1176>
pid[3] is on running !@#$^;
now public variable with lock protection is <1177>
pid[3] is on running !@#$^;
now public variable with lock protection is <1178>
pid[3] is on running !@#$^;
now public variable with lock protection is <1179>
pid[3] is on running !@#$^;
now public variable with lock protection is <1180>
pid[3] is on running !@#$^;
now public variable with lock protection is <1181>
pid[3] is on running !@#$^;
now public variable with lock protection is <1182>
pid[3] is on running !@#$^;
now public variable with lock protection is <1183>
pid[3] is on running !@#$^;
now public variable with lock protection is <1184>
pid[3] is on running !@#$^;
now public variable with lock protection is <1185>
pid[3] is on running !@#$^;
now public variable with lock protection is <1186>
pid[3] is on running !@#$^;
now public variable with lock protection is <1187>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
 is <1144>
pid[1] is on running 12345;
now public variable with lock protection is <1189>
pid[1] is on running 12345;
now public variable with lock protection is <1190>
pid[1] is on running 12345;
now public variable with lock protection is <1191>
pid[1] is on running 12345;
now public variable with lock protection is <1192>
pid[1] is on running 12345;
now public variable with lock protection is <1193>
pid[1] is on running 12345;
now public variable with lock protection is <1194>
pid[1] is on running 12345;
now public variable with lock protection is <1195>
pid[1] is on running 12345;
now public variable with lock protection is <1196>
pid[1] is on running 12345;
now public variable with lock protection is <1197>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1198>
pid[2] is on running abcde;
now public variable with lock protection is <1199>
pid[2] is on running abcde;
now public variable with lock protection is <1200>
pid[2] is on running abcde;
now public variable with lock protection is <1201>
pid[2] is on running abcde;
now public variable with lock protection is <1202>
pid[2] is on running abcde;
now public variable with lock protection is <1203>
pid[2] is on running abcde;
now public variable with lock protection is <1204>
pid[2] is on running abcde;
now public variable with lock protection is <1205>
pid[2] is on running abcde;
now public variable with lock protection is <1206>
pid[2] is on running abcde;
now public variable with lock protection is <1207>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <1208>
pid[3] is on running !@#$^;
now public variable with lock protection is <1209>
pid[3] is on running !@#$^;
now public variable with lock protection is <1210>
pid[3] is on running !@#$^;
now public variable with lock protection is <1211>
pid[3] is on running !@#$^;
now public variable with lock protection is <1212>
pid[3] is on running !@#$^;
now public variable with lock protection is <1213>
pid[3] is on running !@#$^;
now public variable with lock protection is <1214>
pid[3] is on running !@#$^;
now public variable with lock protection is <1215>
pid[3] is on running !@#$^;
now public variable with lock protection is <1216>
pid[3] is on running !@#$^;
now public variable with lock protectpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1217>
pid[1] is on running 12345;
now public variable with lock protection is <1218>
pid[1] is on running 12345;
now public variable with lock protection is <1219>
pid[1] is on running 12345;
now public variable with lock protection is <1220>
pid[1] is on running 12345;
now public variable with lock protection is <1221>
pid[1] is on running 12345;
now public variable with lock protection is <1222>
pid[1] is on running 12345;
now public variable with lock protection is <1223>
pid[1] is on running 12345;
now public variable with lock protection is <1224>
pid[1] is on running 12345;
now public variable with lock protection is <1225>
pid[1] is on running 12345;
now public variable with lock protection is <1226>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1227>
pid[2] is on running abcde;
now public variable with lock protection is <1228>
pid[2] is on running abcde;
now public variable with lock protection is <1229>
pid[2] is on running abcde;
now public variable with lock protection is <1230>
pid[2] is on running abcde;
now public variable with lock protection is <1231>
pid[2] is on running abcde;
now public variable with lock protection is <1232>
pid[2] is on running abcde;
now public variable with lock protection is <1233>
pid[2] is on running abcde;
now public variable with lock protection is <1234>
pid[2] is on running abcde;
now public variable with lock protection is <1235>
pid[2] is on running abcde;
now public variable with lock protection is <1236>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ion is <1217>
pid[3] is on running !@#$^;
now public variable with lock protection is <1238>
pid[3] is on running !@#$^;
now public variable with lock protection is <1239>
pid[3] is on running !@#$^;
now public variable with lock protection is <1240>
pid[3] is on running !@#$^;
now public variable with lock protection is <1241>
pid[3] is on running !@#$^;
now public variable with lock protection is <1242>
pid[3] is on running !@#$^;
now public variable with lock protection is <1243>
pid[3] is on running !@#$^;
now public variable with lock protection is <1244>
pid[3] is on running !@#$^;
now public variable with lock protection is <1245>
pid[3] is on running !@#$^;
now public variable with lock protection is <1246>
pid[3] is on running !@#$^;
now ppid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1247>
pid[1] is on running 12345;
now public variable with lock protection is <1248>
pid[1] is on running 12345;
now public variable with lock protection is <1249>
pid[1] is on running 12345;
now public variable with lock protection is <1250>
pid[1] is on running 12345;
now public variable with lock protection is <1251>
pid[1] is on running 12345;
now public variable with lock protection is <1252>
pid[1] is on running 12345;
now public variable with lock protection is <1253>
pid[1] is on running 12345;
now public variable with lock protection is <1254>
pid[1] is on running 12345;
now public variable with lock protection is <1255>
pid[1] is on running 12345;
now public variable with lock protection is <1256>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1257>
pid[2] is on running abcde;
now public variable with lock protection is <1258>
pid[2] is on running abcde;
now public variable with lock protection is <1259>
pid[2] is on running abcde;
now public variable with lock protection is <1260>
pid[2] is on running abcde;
now public variable with lock protection is <1261>
pid[2] is on running abcde;
now public variable with lock protection is <1262>
pid[2] is on running abcde;
now public variable with lock protection is <1263>
pid[2] is on running abcde;
now public variable with lock protection is <1264>
pid[2] is on running abcde;
now public variable with lock protection is <1265>
pid[2] is on running abcde;
now public variable with lock protection is <1266>
pid[2] is on running abcdpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ublic variable with lock protection is <1247>
pid[3] is on running !@#$^;
now public variable with lock protection is <1267>
pid[3] is on running !@#$^;
now public variable with lock protection is <1268>
pid[3] is on running !@#$^;
now public variable with lock protection is <1269>
pid[3] is on running !@#$^;
now public variable with lock protection is <1270>
pid[3] is on running !@#$^;
now public variable with lock protection is <1271>
pid[3] is on running !@#$^;
now public variable with lock protection is <1272>
pid[3] is on running !@#$^;
now public variable with lock protection is <1273>
pid[3] is on running !@#$^;
now public variable with lock protection is <1274>
pid[3] is on running !@#$^;
now public variable with lock protection is <1275>
pid[3] is on running !@#$^;
now public variable with lock protpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1276>
pid[1] is on running 12345;
now public variable with lock protection is <1277>
pid[1] is on running 12345;
now public variable with lock protection is <1278>
pid[1] is on running 12345;
now public variable with lock protection is <1279>
pid[1] is on running 12345;
now public variable with lock protection is <1280>
pid[1] is on running 12345;
now public variable with lock protection is <1281>
pid[1] is on running 12345;
now public variable with lock protection is <1282>
pid[1] is on running 12345;
now public variable with lock protection is <1283>
pid[1] is on running 12345;
now public variable with lock protection is <1284>
pid[1] is on running 12345;
now public variable with lock protection is <1285>
pid[1] is on running 12345;
now public variable with lock protection is <1286>
pid[1] is on running 12345;
now public variable with lock protection is <1287>
pid[1] is on running 12345;
now public variable with lock protection is <1288>
pid[1] is on running 12345;
now public variable with lock protection is <1289>
pid[1] is on running 12345;
now public variable with lock protection is <1290>
pid[1] is on running 12345;
now public variable with lock protection is <1pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
e;
now public variable with lock protection is <1292>
pid[2] is on running abcde;
now public variable with lock protection is <1293>
pid[2] is on running abcde;
now public variable with lock protection is <1294>
pid[2] is on running abcde;
now public variable with lock protection is <1295>
pid[2] is on running abcde;
now public variable with lock protection is <1296>
pid[2] is on running abcde;
now public variable with lock protection is <1297>
pid[2] is on running abcde;
now public variable with lock protection is <1298>
pid[2] is on running abcde;
now public variable with lock protection is <1299>
pid[2] is on running abcde;
now public variable with lock protection is <1300>
pid[2] is on running abcde;
now public variable with lock protection is <1301>
pid[2] is on running abcde;
now public variable with lock protection is <1302>
pid[2] is on running abcde;
now public variable with lock protection is <1303>
pid[2] is on running abcde;
now public variable with lock protection is <1304>
pid[2] is on running abcde;
now public variable with lock protection is <1305>
pid[2] is on running abcde;
now public variable with lock protection is <1306>
pid[2] is on running abcde;
now public variable with lock protection is <1307>
pid[2] is on running abcde;
now public variable with lock protection is <1308>
pid[2] is on running abcde;
now public variable with lock protection is <1309>
pid[2] is on running abcde;
now public variable with lock protection is <1310>
pid[2] is on running abcde;
now public variable with lock protection is <1311>
pid[2] is on running abcde;
now public variable with lock protection is <1312>
pid[2] is on running abcde;
now public variable with lock protection is <1313>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ection is <1276>
pid[3] is on running !@#$^;
now public variable with lock protection is <1315>
pid[3] is on running !@#$^;
now public variable with lock protection is <1316>
pid[3] is on running !@#$^;
now public variable with lock protection is <1317>
pid[3] is on running !@#$^;
now public variable with lock protection is <1318>
pid[3] is on running !@#$^;
now public variable with lock protection is <1319>
pid[3] is on running !@#$^;
now public variable with lock protection is <1320>
pid[3] is on running !@#$^;
now public variable with lock protection is <1321>
pid[3] is on running !@#$^;
now public variable with lock protection is <1322>
pid[3] is on running !@#$^;
now public variable with lock protection is <1323>
pid[3] is on running !@#$^;
now public variable with lock protection is <1324>
pid[3] is on running !@#$^;
now public variable with lock protection is <1325>
pid[3] is on running !@#$^;
now public variable with lock protection is <1326>
pid[3] is on running !@#$^;
now public variable with lock protection is <1327>
pid[3] is on running !@#$^;
now public variable with lock protection is <1328>
pid[3] is on running !@#$^;
now public variable with lock protection is <1329>
pid[3] is on running !@#$^;
now public variable with lock protection is <1330>
pid[3] is on running !@#$^;
now public variable with lock protection is <1331>
pid[3] is on running !@#$^;
now public variable with lock protection is <1332>
pid[3] is on running !@#$^;
now public variable with lock protection is <1333>
pid[3] is on running !@#$^;
now public variable with lock protection is <1334>
pid[3] is on running !@#$^;
now public variable with lock protection is <1335>
pid[3] is on running !@#$^;
now public vpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
291>
pid[1] is on running 12345;
now public variable with lock protection is <1337>
pid[1] is on running 12345;
now public variable with lock protection is <1338>
pid[1] is on running 12345;
now public variable with lock protection is <1339>
pid[1] is on running 12345;
now public variable with lock protection is <1340>
pid[1] is on running 12345;
now public variable with lock protection is <1341>
pid[1] is on running 12345;
now public variable with lock protection is <1342>
pid[1] is on running 12345;
now public variable with lock protection is <1343>
pid[1] is on running 12345;
now public variable with lock protection is <1344>
pid[1] is on running 12345;
now public variable with lock protection is <1345>
pid[1] is on running 12345;
now public variable with lock protection is <1346>
pid[1] is on running 12345;
now public variable with lock protection is <1347>
pid[1] is on running 12345;
now public variable with lock protection is <1348>
pid[1] is on running 12345;
now public variable with lock protection is <1349>
pid[1] is on running 12345;
now public variable with lock protection is <1350>
pid[1] is on running 12345;
now public variable with lock protection is <1351>
pid[1] is on running 12345;
now public variable with lock protection is <1352>
pid[1] is on running 12345;
now public variable with lock protection is <1353>
pid[1] is on running 12345;
now public variable with lock protection is <1354>
pid[1] is on running 12345;
now public variable with lock protection is <1355>
pid[1] is on running 12345;
now public variable with lock protection is <1356>
pid[1] is on running 12345;
now public variable with lock protection is <1357>
pid[1] is on running 12345;
now pubpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1358>
pid[2] is on running abcde;
now public variable with lock protection is <1359>
pid[2] is on running abcde;
now public variable with lock protection is <1360>
pid[2] is on running abcde;
now public variable with lock protection is <1361>
pid[2] is on running abcde;
now public variable with lock protection is <1362>
pid[2] is on running abcde;
now public variable with lock protection is <1363>
pid[2] is on running abcde;
now public variable with lock protection is <1364>
pid[2] is on running abcde;
now public variable with lock protection is <1365>
pid[2] is on running abcde;
now public variable with lock protection is <1366>
pid[2] is on running abcde;
now public variable with lock protection is <1367>
pid[2] is on running abcde;
now public variable with lock protection is <1368>
pid[2] is on running abcde;
now public variable with lock protection is <1369>
pid[2] is on running abcde;
now public variable with lock protection is <1370>
pid[2] is on running abcde;
now public variable with lock protection is <1371>
pid[2] is on running abcde;
now public variable with lock protection is <1372>
pid[2] is on running abcde;
now public variable with lock protection is <1373>
pid[2] is on running abcde;
now public variable with lock protection is <1374>
pid[2] is on running abcde;
now public variable with lock protection is <1375>
pid[2] is on running abcde;
now public variable with lock protection is <1376>
pid[2] is on running abcde;
now public variable with lock protection is <1377>
pid[2] is on running abcde;
now public variable with lock protection is <1378>
pid[2] is on running abcde;
now public variable with lock protection is <1379>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ariable with lock protection is <1336>
pid[3] is on running !@#$^;
now public variable with lock protection is <1381>
pid[3] is on running !@#$^;
now public variable with lock protection is <1382>
pid[3] is on running !@#$^;
now public variable with lock protection is <1383>
pid[3] is on running !@#$^;
now public variable with lock protection is <1384>
pid[3] is on running !@#$^;
now public variable with lock protection is <1385>
pid[3] is on running !@#$^;
now public variable with lock protection is <1386>
pid[3] is on running !@#$^;
now public variable with lock protection is <1387>
pid[3] is on running !@#$^;
now public variable with lock protection is <1388>
pid[3] is on running !@#$^;
now public variable with lock protection is <1389>
pid[3] is on running !@#$^;
now public variable with lock protection is <1390>
pid[3] is on running !@#$^;
now public variable with lock protection is <1391>
pid[3] is on running !@#$^;
now public variable with lock protection is <1392>
pid[3] is on running !@#$^;
now public variable with lock protection is <1393>
pid[3] is on running !@#$^;
now public variable with lock protection is <1394>
pid[3] is on running !@#$^;
now public variable with lock protection is <1395>
pid[3] is on running !@#$^;
now public variable with lock protection is <1396>
pid[3] is on running !@#$^;
now public variable with lock protection is <1397>
pid[3] is on running !@#$^;
now public variable with lock protection is <1398>
pid[3] is on running !@#$^;
now public variable with lock protection is <1399>
pid[3] is on running !@#$^;
now public variable with lock protection is <1400>
pid[3] is on running !@#$^;
now public variable with lock protection is <1401>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
lic variable with lock protection is <1358>
pid[1] is on running 12345;
now public variable with lock protection is <1403>
pid[1] is on running 12345;
now public variable with lock protection is <1404>
pid[1] is on running 12345;
now public variable with lock protection is <1405>
pid[1] is on running 12345;
now public variable with lock protection is <1406>
pid[1] is on running 12345;
now public variable with lock protection is <1407>
pid[1] is on running 12345;
now public variable with lock protection is <1408>
pid[1] is on running 12345;
now public variable with lock protection is <1409>
pid[1] is on running 12345;
now public variable with lock protection is <1410>
pid[1] is on running 12345;
now public variable with lock protection is <1411>
pid[1] is on running 12345;
now public variable with lock protection is <1412>
pid[1] is on running 12345;
now public variable with lock protection is <1413>
pid[1] is on running 12345;
now public variable with lock protection is <1414>
pid[1] is on running 12345;
now public variable with lock protection is <1415>
pid[1] is on running 12345;
now public variable with lock protection is <1416>
pid[1] is on running 12345;
now public variable with lock protection is <1417>
pid[1] is on running 12345;
now public variable with lock protection is <1418>
pid[1] is on running 12345;
now public variable with lock protection is <1419>
pid[1] is on running 12345;
now public variable with lock protection is <1420>
pid[1] is on running 12345;
now public variable with lock protection is <1421>
pid[1] is on running 12345;
now public variable with lock protection is <1422>
pid[1] is on running 12345;
now public variable with lock protection is <1423>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1424>
pid[2] is on running abcde;
now public variable with lock protection is <1425>
pid[2] is on running abcde;
now public variable with lock protection is <1426>
pid[2] is on running abcde;
now public variable with lock protection is <1427>
pid[2] is on running abcde;
now public variable with lock protection is <1428>
pid[2] is on running abcde;
now public variable with lock protection is <1429>
pid[2] is on running abcde;
now public variable with lock protection is <1430>
pid[2] is on running abcde;
now public variable with lock protection is <1431>
pid[2] is on running abcde;
now public variable with lock protection is <1432>
pid[2] is on running abcde;
now public variable with lock protection is <1433>
pid[2] is on running abcde;
now public variable with lock protection is <1434>
pid[2] is on running abcde;
now public variable with lock protection is <1435>
pid[2] is on running abcde;
now public variable with lock protection is <1436>
pid[2] is on running abcde;
now public variable with lock protection is <1437>
pid[2] is on running abcde;
now public variable with lock protection is <1438>
pid[2] is on running abcde;
now public variable with lock protection is <1439>
pid[2] is on running abcde;
now public variable with lock protection is <1440>
pid[2] is on running abcde;
now public variable with lock protection is <1441>
pid[2] is on running abcde;
now public variable with lock protection is <1442>
pid[2] is on running abcde;
now public variable with lock protection is <1443>
pid[2] is on running abcde;
now public variable with lock protection is <1444>
pid[2] is on running abcde;
now public variable with lock protection is <1445>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <1446>
pid[3] is on running !@#$^;
now public variable with lock protection is <1447>
pid[3] is on running !@#$^;
now public variable with lock protection is <1448>
pid[3] is on running !@#$^;
now public variable with lock protection is <1449>
pid[3] is on running !@#$^;
now public variable with lock protection is <1450>
pid[3] is on running !@#$^;
now public variable with lock protection is <1451>
pid[3] is on running !@#$^;
now public variable with lock protection is <1452>
pid[3] is on running !@#$^;
now public variable with lock protection is <1453>
pid[3] is on running !@#$^;
now public variable with lock protection is <1454>
pid[3] is on running !@#$^;
now public variable with lock protection is <1455>
pid[3] is on running !@#$^;
now public variable with lock protection is <1456>
pid[3] is on running !@#$^;
now public variable with lock protection is <1457>
pid[3] is on running !@#$^;
now public variable with lock protection is <1458>
pid[3] is on running !@#$^;
now public variable with lock protection is <1459>
pid[3] is on running !@#$^;
now public variable with lock protection is <1460>
pid[3] is on running !@#$^;
now public variable with lock protection is <1461>
pid[3] is on running !@#$^;
now public variable with lock protection is <1462>
pid[3] is on running !@#$^;
now public variable with lock protection is <1463>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1463>
pid[1] is on running 12345;
now public variable with lock protection is <1464>
pid[1] is on running 12345;
now public variable with lock protection is <1465>
pid[1] is on running 12345;
now public variable with lock protection is <1466>
pid[1] is on running 12345;
now public variable with lock protection is <1467>
pid[1] is on running 12345;
now public variable with lock protection is <1468>
pid[1] is on running 12345;
now public variable with lock protection is <1469>
pid[1] is on running 12345;
now public variable with lock protection is <1470>
pid[1] is on running 12345;
now public variable with lock protection is <1471>
pid[1] is on running 12345;
now public variable with lock protection is <1472>
pid[1] is on running 12345;
now public variable with lock protpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1473>
pid[2] is on running abcde;
now public variable with lock protection is <1474>
pid[2] is on running abcde;
now public variable with lock protection is <1475>
pid[2] is on running abcde;
now public variable with lock protection is <1476>
pid[2] is on running abcde;
now public variable with lock protection is <1477>
pid[2] is on running abcde;
now public variable with lock protection is <1478>
pid[2] is on running abcde;
now public variable with lock protection is <1479>
pid[2] is on running abcde;
now public variable with lock protection is <1480>
pid[2] is on running abcde;
now public variable with lock protection is <1481>
pid[2] is on running abcde;
now public variable with lock protection is <1482>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <1483>
pid[3] is on running !@#$^;
now public variable with lock protection is <1484>
pid[3] is on running !@#$^;
now public variable with lock protection is <1485>
pid[3] is on running !@#$^;
now public variable with lock protection is <1486>
pid[3] is on running !@#$^;
now public variable with lock protection is <1487>
pid[3] is on running !@#$^;
now public variable with lock protection is <1488>
pid[3] is on running !@#$^;
now public variable with lock protection is <1489>
pid[3] is on running !@#$^;
now public variable with lock protection is <1490>
pid[3] is on running !@#$^;
now public variable with lock protection is <1491>
pid[3] is on running !@#$^;
now public variabpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thrpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ection is <1473>
pid[1] is on running 12345;
now public variable with lock protection is <1493>
pid[1] is on running 12345;
now public variable with lock protection is <1494>
pid[1] is on running 12345;
now public variable with lock protection is <1495>
pid[1] is on running 12345;
now public variable with lock protection is <1496>
pid[1] is on running 12345;
now public variable with lock protection is <1497>
pid[1] is on running 12345;
now public variable with lock protection is <1498>
pid[1] is on running 12345;
now public variable with lock protection is <1499>
pid[1] is on running 12345;
now public variable with lock protection is <1500>
pid[1] is on running 12345;
now public variable with lock protection is <1501>
pid[1] is on running 12345;
now public variable with lock protection is <1502>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1504>
pid[2] is on running abcde;
now public variable with lock protection is <1505>
pid[2] is on running abcde;
now public variable with lock protection is <1506>
pid[2] is on running abcde;
now public variable with lock protection is <1507>
pid[2] is on running abcde;
now public variable with lock protection is <1508>
pid[2] is on running abcde;
now public variable with lock protection is <1509>
pid[2] is on running abcde;
now public variable with lock protection is <1510>
pid[2] is on running abcde;
now public variable with lock protection is <1511>
pid[2] is on running abcde;
now public variable with lock protection is <1512>
pid[2] is on running abcde;
now public variablpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
le with lock protection is <1492>
pid[3] is on running !@#$^;
now public variable with lock protection is <1514>
pid[3] is on running !@#$^;
now public variable with lock protection is <1515>
pid[3] is on running !@#$^;
now public variable with lock protection is <1516>
pid[3] is on running !@#$^;
now public variable with lock protection is <1517>
pid[3] is on running !@#$^;
now public variable with lock protection is <1518>
pid[3] is on running !@#$^;
now public variable with lock protection is <1519>
pid[3] is on running !@#$^;
now public variable with lock protection is <1520>
pid[3] is on running !@#$^;
now public variable with lock protection is <1521>
pid[3] is on running !@#$^;
now public variable with lock protection is <1522>
pid[3] is on running !@#$^;
now public variablpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ead now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1523>
pid[1] is on running 12345;
now public variable with lock protection is <1524>
pid[1] is on running 12345;
now public variable with lock protection is <1525>
pid[1] is on running 12345;
now public variable with lock protection is <1526>
pid[1] is on running 12345;
now public variable with lock protection is <1527>
pid[1] is on running 12345;
now public variable with lock protection is <1528>
pid[1] is on running 12345;
now public variable with lock protection is <1529>
pid[1] is on running 12345;
now public variable with lock protection is <1530>
pid[1] is on running 12345;
now public variable with lock protection is <1531>
pid[1] is on running 12345;
now public variable with lock protection is <1532>
pid[1] is on running 12345;
now public variable with lock protection is <1533>
pid[1] is on running 1pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
e with lock protection is <1513>
pid[2] is on running abcde;
now public variable with lock protection is <1534>
pid[2] is on running abcde;
now public variable with lock protection is <1535>
pid[2] is on running abcde;
now public variable with lock protection is <1536>
pid[2] is on running abcde;
now public variable with lock protection is <1537>
pid[2] is on running abcde;
now public variable with lock protection is <1538>
pid[2] is on running abcde;
now public variable with lock protection is <1539>
pid[2] is on running abcde;
now public variable with lock protection is <1540>
pid[2] is on running abcde;
now public variable with lock protection is <1541>
pid[2] is on running abcde;
now public variable with lock protecpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
e with lock protection is <1523>
pid[3] is on running !@#$^;
now public variable with lock protection is <1543>
pid[3] is on running !@#$^;
now public variable with lock protection is <1544>
pid[3] is on running !@#$^;
now public variable with lock protection is <1545>
pid[3] is on running !@#$^;
now public variable with lock protection is <1546>
pid[3] is on running !@#$^;
now public variable with lock protection is <1547>
pid[3] is on running !@#$^;
now public variable with lock protection is <1548>
pid[3] is on running !@#$^;
now public variable with lock protection is <1549>
pid[3] is on running !@#$^;
now public variable with lock protection is <1550>
pid[3] is on running !@#$^;
now public variable with lock protection is <1551>
pid[3] is on running !@#$^;
now public variablepid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
2345;
now public variable with lock protection is <1553>
pid[1] is on running 12345;
now public variable with lock protection is <1554>
pid[1] is on running 12345;
now public variable with lock protection is <1555>
pid[1] is on running 12345;
now public variable with lock protection is <1556>
pid[1] is on running 12345;
now public variable with lock protection is <1557>
pid[1] is on running 12345;
now public variable with lock protection is <1558>
pid[1] is on running 12345;
now public variable with lock protection is <1559>
pid[1] is on running 12345;
now public variable with lock protection is <1560>
pid[1] is on running 12345;
now public variable with lock protection is <1561>
pid[1] is on running 12345;
now public variable with lock protection is <1562>
pid[1] is pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
tion is <1542>
pid[2] is on running abcde;
now public variable with lock protection is <1563>
pid[2] is on running abcde;
now public variable with lock protection is <1564>
pid[2] is on running abcde;
now public variable with lock protection is <1565>
pid[2] is on running abcde;
now public variable with lock protection is <1566>
pid[2] is on running abcde;
now public variable with lock protection is <1567>
pid[2] is on running abcde;
now public variable with lock protection is <1568>
pid[2] is on running abcde;
now public variable with lock protection is <1569>
pid[2] is on running abcde;
now public variable with lock protection is <1570>
pid[2] is on running abcde;
now public variable with lock protection is <1571>
pid[2] is on runningpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 with lock protection is <1552>
pid[3] is on running !@#$^;
now public variable with lock protection is <1572>
pid[3] is on running !@#$^;
now public variable with lock protection is <1573>
pid[3] is on running !@#$^;
now public variable with lock protection is <1574>
pid[3] is on running !@#$^;
now public variable with lock protection is <1575>
pid[3] is on running !@#$^;
now public variable with lock protection is <1576>
pid[3] is on running !@#$^;
now public variable with lock protection is <1577>
pid[3] is on running !@#$^;
now public variable with lock protection is <1578>
pid[3] is on running !@#$^;
now public variable with lock protection is <1579>
pid[3] is on running !@#$^;
now public variable with lock protection is <1580>
pid[3] is on running !@#$^;
now public variable with lock protection is <1581>pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
on running 12345;
now public variable with lock protection is <1582>
pid[1] is on running 12345;
now public variable with lock protection is <1583>
pid[1] is on running 12345;
now public variable with lock protection is <1584>
pid[1] is on running 12345;
now public variable with lock protection is <1585>
pid[1] is on running 12345;
now public variable with lock protection is <1586>
pid[1] is on running 12345;
now public variable with lock protection is <1587>
pid[1] is on running 12345;
now public variable with lock protection is <1588>
pid[1] is on running 12345;
now public variable with lock protection is <1589>
pid[1] is on running 12345;
now public variable with lock protection is <1590>
pid[1] is on running 12345;
now ppid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
 abcde;
now public variable with lock protection is <1592>
pid[2] is on running abcde;
now public variable with lock protection is <1593>
pid[2] is on running abcde;
now public variable with lock protection is <1594>
pid[2] is on running abcde;
now public variable with lock protection is <1595>
pid[2] is on running abcde;
now public variable with lock protection is <1596>
pid[2] is on running abcde;
now public variable with lock protection is <1597>
pid[2] is on running abcde;
now public variable with lock protection is <1598>
pid[2] is on running abcde;
now public variable with lock protection is <1599>
pid[2] is on running abcde;
now public variable with lock protection is <1600>
pid[2] is on running abcde;
now public variable with lock protection is <1601>
pid[2] is on running abcde;
now publipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!

pid[3] is on running !@#$^;
now public variable with lock protection is <1603>
pid[3] is on running !@#$^;
now public variable with lock protection is <1604>
pid[3] is on running !@#$^;
now public variable with lock protection is <1605>
pid[3] is on running !@#$^;
now public variable with lock protection is <1606>
pid[3] is on running !@#$^;
now public variable with lock protection is <1607>
pid[3] is on running !@#$^;
now public variable with lock protection is <1608>
pid[3] is on running !@#$^;
now public variable with lock protection is <1609>
pid[3] is on running !@#$^;
now public variable with lock protection is <1610>
pid[3] is on running !@#$^;
now public variable with lock protection is <1611>
pid[3] is on running !@#$^;
now public variable with lockpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],Ipid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ublic variable with lock protection is <1591>
pid[1] is on running 12345;
now public variable with lock protection is <1613>
pid[1] is on running 12345;
now public variable with lock protection is <1614>
pid[1] is on running 12345;
now public variable with lock protection is <1615>
pid[1] is on running 12345;
now public variable with lock protection is <1616>
pid[1] is on running 12345;
now public variable with lock protection is <1617>
pid[1] is on running 12345;
now public variable with lock protection is <1618>
pid[1] is on running 12345;
now public variable with lock protection is <1619>
pid[1] is on running 12345;
now public variable with lock protection is <1620>
pid[1] is on running 12345;
now public variable with lock protection is <1621>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
c variable with lock protection is <1602>
pid[2] is on running abcde;
now public variable with lock protection is <1623>
pid[2] is on running abcde;
now public variable with lock protection is <1624>
pid[2] is on running abcde;
now public variable with lock protection is <1625>
pid[2] is on running abcde;
now public variable with lock protection is <1626>
pid[2] is on running abcde;
now public variable with lock protection is <1627>
pid[2] is on running abcde;
now public variable with lock protection is <1628>
pid[2] is on running abcde;
now public variable with lock protection is <1629>
pid[2] is on running abcde;
now public variable with lock protection is <1630>
pid[2] is on running abcde;
now public variable with lock protection is <1631>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 protection is <1612>
pid[3] is on running !@#$^;
now public variable with lock protection is <1632>
pid[3] is on running !@#$^;
now public variable with lock protection is <1633>
pid[3] is on running !@#$^;
now public variable with lock protection is <1634>
pid[3] is on running !@#$^;
now public variable with lock protection is <1635>
pid[3] is on running !@#$^;
now public variable with lock protection is <1636>
pid[3] is on running !@#$^;
now public variable with lock protection is <1637>
pid[3] is on running !@#$^;
now public variable with lock protection is <1638>
pid[3] is on running !@#$^;
now public variable with lock protection is <1639>
pid[3] is on running !@#$^;
now public variable with lock protection is <1640>
pid[3] is on rupid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
n kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pipid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <1640>
pid[1] is on running 12345;
now public variable with lock protection is <1641>
pid[1] is on running 12345;
now public variable with lock protection is <1642>
pid[1] is on running 12345;
now public variable with lock protection is <1643>
pid[1] is on running 12345;
now public variable with lock protection is <1644>
pid[1] is on running 12345;
now public variable with lock protection is <1645>
pid[1] is on running 12345;
now public variable with lock protection is <1646>
pid[1] is on running 12345;
now public variable with lock protection is <1647>
pid[1] is on running 12345;
now public variable with lock protection is <1648>
pid[1] is on running 12345;
now public variable with lock protection is <1649>
pid[1] is on running pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1650>
pid[2] is on running abcde;
now public variable with lock protection is <1651>
pid[2] is on running abcde;
now public variable with lock protection is <1652>
pid[2] is on running abcde;
now public variable with lock protection is <1653>
pid[2] is on running abcde;
now public variable with lock protection is <1654>
pid[2] is on running abcde;
now public variable with lock protection is <1655>
pid[2] is on running abcde;
now public variable with lock protection is <1656>
pid[2] is on running abcde;
now public variable with lock protection is <1657>
pid[2] is on running abcde;
now public variable with lock protection is <1658>
pid[2] is on running abcde;
now public variable with lock protection is <1659>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
nning !@#$^;
now public variable with lock protection is <1660>
pid[3] is on running !@#$^;
now public variable with lock protection is <1661>
pid[3] is on running !@#$^;
now public variable with lock protection is <1662>
pid[3] is on running !@#$^;
now public variable with lock protection is <1663>
pid[3] is on running !@#$^;
now public variable with lock protection is <1664>
pid[3] is on running !@#$^;
now public variable with lock protection is <1665>
pid[3] is on running !@#$^;
now public variable with lock protection is <1666>
pid[3] is on running !@#$^;
now public variable with lock protection is <1667>
pid[3] is on running !@#$^;
now public variable with lock protection is <1668>
pid[3] is on running !@#$^;
now public variable with lock protection is <pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
d[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
12345;
now public variable with lock protection is <1670>
pid[1] is on running 12345;
now public variable with lock protection is <1671>
pid[1] is on running 12345;
now public variable with lock protection is <1672>
pid[1] is on running 12345;
now public variable with lock protection is <1673>
pid[1] is on running 12345;
now public variable with lock protection is <1674>
pid[1] is on running 12345;
now public variable with lock protection is <1675>
pid[1] is on running 12345;
now public variable with lock protection is <1676>
pid[1] is on running 12345;
now public variable with lock protection is <1677>
pid[1] is on running 12345;
now public variable with lock protection is <1678>
pid[1] is on running 12345;
now public variable with lock protection is <1679>
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1680>
pid[2] is on running abcde;
now public variable with lock protection is <1681>
pid[2] is on running abcde;
now public variable with lock protection is <1682>
pid[2] is on running abcde;
now public variable with lock protection is <1683>
pid[2] is on running abcde;
now public variable with lock protection is <1684>
pid[2] is on running abcde;
now public variable with lock protection is <1685>
pid[2] is on running abcde;
now public variable with lock protection is <1686>
pid[2] is on running abcde;
now public variable with lock protection is <1687>
pid[2] is on running abcde;
now public variable with lock protection is <1688>
pid[2] is on running abcde;
now public variable with lock protection is <1689>
pid[2] is on running abcde;
now publpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
1669>
pid[3] is on running !@#$^;
now public variable with lock protection is <1691>
pid[3] is on running !@#$^;
now public variable with lock protection is <1692>
pid[3] is on running !@#$^;
now public variable with lock protection is <1693>
pid[3] is on running !@#$^;
now public variable with lock protection is <1694>
pid[3] is on running !@#$^;
now public variable with lock protection is <1695>
pid[3] is on running !@#$^;
now public variable with lock protection is <1696>
pid[3] is on running !@#$^;
now public variable with lock protection is <1697>
pid[3] is on running !@#$^;
now public variable with lock protection is <1698>
pid[3] is on running !@#$^;
now public variable with lock protection is <1699>
pid[3] is on running !@#$^;
now public variablpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel mpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
pid[1] is on running 12345;
now public variable with lock protection is <1701>
pid[1] is on running 12345;
now public variable with lock protection is <1702>
pid[1] is on running 12345;
now public variable with lock protection is <1703>
pid[1] is on running 12345;
now public variable with lock protection is <1704>
pid[1] is on running 12345;
now public variable with lock protection is <1705>
pid[1] is on running 12345;
now public variable with lock protection is <1706>
pid[1] is on running 12345;
now public variable with lock protection is <1707>
pid[1] is on running 12345;
now public variable with lock protection is <1708>
pid[1] is on running 12345;
now public variable with lock protection is <1709>
pid[1] is on running 1234pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ic variable with lock protection is <1690>
pid[2] is on running abcde;
now public variable with lock protection is <1710>
pid[2] is on running abcde;
now public variable with lock protection is <1711>
pid[2] is on running abcde;
now public variable with lock protection is <1712>
pid[2] is on running abcde;
now public variable with lock protection is <1713>
pid[2] is on running abcde;
now public variable with lock protection is <1714>
pid[2] is on running abcde;
now public variable with lock protection is <1715>
pid[2] is on running abcde;
now public variable with lock protection is <1716>
pid[2] is on running abcde;
now public variable with lock protection is <1717>
pid[2] is on running abcde;
now public variable with lock protection is <1718>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
e with lock protection is <1700>
pid[3] is on running !@#$^;
now public variable with lock protection is <1719>
pid[3] is on running !@#$^;
now public variable with lock protection is <1720>
pid[3] is on running !@#$^;
now public variable with lock protection is <1721>
pid[3] is on running !@#$^;
now public variable with lock protection is <1722>
pid[3] is on running !@#$^;
now public variable with lock protection is <1723>
pid[3] is on running !@#$^;
now public variable with lock protection is <1724>
pid[3] is on running !@#$^;
now public variable with lock protection is <1725>
pid[3] is on running !@#$^;
now public variable with lock protection is <1726>
pid[3] is on running !@#$^;
now public variable with lock protection is <1727>
pid[3] is on running !@#$^;
now public variable with lock protection is <1728>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
ain thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0]pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
5;
now public variable with lock protection is <1730>
pid[1] is on running 12345;
now public variable with lock protection is <1731>
pid[1] is on running 12345;
now public variable with lock protection is <1732>
pid[1] is on running 12345;
now public variable with lock protection is <1733>
pid[1] is on running 12345;
now public variable with lock protection is <1734>
pid[1] is on running 12345;
now public variable with lock protection is <1735>
pid[1] is on running 12345;
now public variable with lock protection is <1736>
pid[1] is on running 12345;
now public variable with lock protection is <1737>
pid[1] is on running 12345;
now public variable with lock protection is <1738>
pid[1] is on running 12345;
now public variable with locpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1740>
pid[2] is on running abcde;
now public variable with lock protection is <1741>
pid[2] is on running abcde;
now public variable with lock protection is <1742>
pid[2] is on running abcde;
now public variable with lock protection is <1743>
pid[2] is on running abcde;
now public variable with lock protection is <1744>
pid[2] is on running abcde;
now public variable with lock protection is <1745>
pid[2] is on running abcde;
now public variable with lock protection is <1746>
pid[2] is on running abcde;
now public variable with lock protection is <1747>
pid[2] is on running abcde;
now public variable with lock protection is <1748>
pid[2] is on running abcde;
now public variable with lock protection is <1749>
pid[2] is on running abcde;
now public variable wipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <1750>
pid[3] is on running !@#$^;
now public variable with lock protection is <1751>
pid[3] is on running !@#$^;
now public variable with lock protection is <1752>
pid[3] is on running !@#$^;
now public variable with lock protection is <1753>
pid[3] is on running !@#$^;
now public variable with lock protection is <1754>
pid[3] is on running !@#$^;
now public variable with lock protection is <1755>
pid[3] is on running !@#$^;
now public variable with lock protection is <1756>
pid[3] is on running !@#$^;
now public variable with lock protection is <1757>
pid[3] is on running !@#$^;
now public variable with lock protection is <1758>
pid[3] is on running !@#$^;
now public variable with lock protection is <1759>
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
,In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
k protection is <1739>
pid[1] is on running 12345;
now public variable with lock protection is <1760>
pid[1] is on running 12345;
now public variable with lock protection is <1761>
pid[1] is on running 12345;
now public variable with lock protection is <1762>
pid[1] is on running 12345;
now public variable with lock protection is <1763>
pid[1] is on running 12345;
now public variable with lock protection is <1764>
pid[1] is on running 12345;
now public variable with lock protection is <1765>
pid[1] is on running 12345;
now public variable with lock protection is <1766>
pid[1] is on running 12345;
now public variable with lock protection is <1767>
pid[1] is on running 12345;
now public variable with lock protection is <1768>
pid[1] is on running 12345;
now public variable withpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
th lock protection is <1750>
pid[2] is on running abcde;
now public variable with lock protection is <1770>
pid[2] is on running abcde;
now public variable with lock protection is <1771>
pid[2] is on running abcde;
now public variable with lock protection is <1772>
pid[2] is on running abcde;
now public variable with lock protection is <1773>
pid[2] is on running abcde;
now public variable with lock protection is <1774>
pid[2] is on running abcde;
now public variable with lock protection is <1775>
pid[2] is on running abcde;
now public variable with lock protection is <1776>
pid[2] is on running abcde;
now public variable with lock protection is <1777>
pid[2] is on running abcde;
now public variable with lock protection is <1778>
pid[2] is on running abcde;
now public variable with lock protection is <1779>
pid[2] is on running abcde;
now public variabpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
pid[3] is on running !@#$^;
now public variable with lock protection is <1781>
pid[3] is on running !@#$^;
now public variable with lock protection is <1782>
pid[3] is on running !@#$^;
now public variable with lock protection is <1783>
pid[3] is on running !@#$^;
now public variable with lock protection is <1784>
pid[3] is on running !@#$^;
now public variable with lock protection is <1785>
pid[3] is on running !@#$^;
now public variable with lock protection is <1786>
pid[3] is on running !@#$^;
now public variable with lock protection is <1787>
pid[3] is on running !@#$^;
now public variable with lock protection is <1788>
pid[3] is on running !@#$^;
now public variable with lock protection is <1789>
pid[3] is on running !pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernepid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
 lock protection is <1769>
pid[1] is on running 12345;
now public variable with lock protection is <1790>
pid[1] is on running 12345;
now public variable with lock protection is <1791>
pid[1] is on running 12345;
now public variable with lock protection is <1792>
pid[1] is on running 12345;
now public variable with lock protection is <1793>
pid[1] is on running 12345;
now public variable with lock protection is <1794>
pid[1] is on running 12345;
now public variable with lock protection is <1795>
pid[1] is on running 12345;
now public variable with lock protection is <1796>
pid[1] is on running 12345;
now public variable with lock protection is <1797>
pid[1] is on running 12345;
now public variable with lock protection is <1798>
pid[1] is on running 12345;
now public variable with lock protection is <1799>
pid[1] is on runninpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
le with lock protection is <1780>
pid[2] is on running abcde;
now public variable with lock protection is <1800>
pid[2] is on running abcde;
now public variable with lock protection is <1801>
pid[2] is on running abcde;
now public variable with lock protection is <1802>
pid[2] is on running abcde;
now public variable with lock protection is <1803>
pid[2] is on running abcde;
now public variable with lock protection is <1804>
pid[2] is on running abcde;
now public variable with lock protection is <1805>
pid[2] is on running abcde;
now public variable with lock protection is <1806>
pid[2] is on running abcde;
now public variable with lock protection is <1807>
pid[2] is on running abcde;
now public variable with lock protection is <1808>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
@#$^;
now public variable with lock protection is <1810>
pid[3] is on running !@#$^;
now public variable with lock protection is <1811>
pid[3] is on running !@#$^;
now public variable with lock protection is <1812>
pid[3] is on running !@#$^;
now public variable with lock protection is <1813>
pid[3] is on running !@#$^;
now public variable with lock protection is <1814>
pid[3] is on running !@#$^;
now public variable with lock protection is <1815>
pid[3] is on running !@#$^;
now public variable with lock protection is <1816>
pid[3] is on running !@#$^;
now public variable with lock protection is <1817>
pid[3] is on running !@#$^;
now public variable with lock protection is <1818>
pid[3] is on running !@#$^;
now public variable with lock protection is <1819>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
l main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],Inpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
g 12345;
now public variable with lock protection is <1821>
pid[1] is on running 12345;
now public variable with lock protection is <1822>
pid[1] is on running 12345;
now public variable with lock protection is <1823>
pid[1] is on running 12345;
now public variable with lock protection is <1824>
pid[1] is on running 12345;
now public variable with lock protection is <1825>
pid[1] is on running 12345;
now public variable with lock protection is <1826>
pid[1] is on running 12345;
now public variable with lock protection is <1827>
pid[1] is on running 12345;
now public variable with lock protection is <1828>
pid[1] is on running 12345;
now public variable with lock protection is <1829>
pid[1] is on running 12345;
now public variable with pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1830>
pid[2] is on running abcde;
now public variable with lock protection is <1831>
pid[2] is on running abcde;
now public variable with lock protection is <1832>
pid[2] is on running abcde;
now public variable with lock protection is <1833>
pid[2] is on running abcde;
now public variable with lock protection is <1834>
pid[2] is on running abcde;
now public variable with lock protection is <1835>
pid[2] is on running abcde;
now public variable with lock protection is <1836>
pid[2] is on running abcde;
now public variable with lock protection is <1837>
pid[2] is on running abcde;
now public variable with lock protection is <1838>
pid[2] is on running abcde;
now public variable with lock protection is <1839>
pid[2] is on running abcde;
now public variable with pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <1840>
pid[3] is on running !@#$^;
now public variable with lock protection is <1841>
pid[3] is on running !@#$^;
now public variable with lock protection is <1842>
pid[3] is on running !@#$^;
now public variable with lock protection is <1843>
pid[3] is on running !@#$^;
now public variable with lock protection is <1844>
pid[3] is on running !@#$^;
now public variable with lock protection is <1845>
pid[3] is on running !@#$^;
now public variable with lock protection is <1846>
pid[3] is on running !@#$^;
now public variable with lock protection is <1847>
pid[3] is on running !@#$^;
now public variable with lock protection is <1848>
pid[3] is on running !@#$^;
now public variable witpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
 kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernepid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
lock protection is <1830>
pid[1] is on running 12345;
now public variable with lock protection is <1850>
pid[1] is on running 12345;
now public variable with lock protection is <1851>
pid[1] is on running 12345;
now public variable with lock protection is <1852>
pid[1] is on running 12345;
now public variable with lock protection is <1853>
pid[1] is on running 12345;
now public variable with lock protection is <1854>
pid[1] is on running 12345;
now public variable with lock protection is <1855>
pid[1] is on running 12345;
now public variable with lock protection is <1856>
pid[1] is on running 12345;
now public variable with lock protection is <1857>
pid[1] is on running 12345;
now public variable with lock protection is <1858>
pid[1] is on running 1234pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
lock protection is <1840>
pid[2] is on running abcde;
now public variable with lock protection is <1859>
pid[2] is on running abcde;
now public variable with lock protection is <1860>
pid[2] is on running abcde;
now public variable with lock protection is <1861>
pid[2] is on running abcde;
now public variable with lock protection is <1862>
pid[2] is on running abcde;
now public variable with lock protection is <1863>
pid[2] is on running abcde;
now public variable with lock protection is <1864>
pid[2] is on running abcde;
now public variable with lock protection is <1865>
pid[2] is on running abcde;
now public variable with lock protection is <1866>
pid[2] is on running abcde;
now public variable with lock protection is <1867>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
h lock protection is <1849>
pid[3] is on running !@#$^;
now public variable with lock protection is <1869>
pid[3] is on running !@#$^;
now public variable with lock protection is <1870>
pid[3] is on running !@#$^;
now public variable with lock protection is <1871>
pid[3] is on running !@#$^;
now public variable with lock protection is <1872>
pid[3] is on running !@#$^;
now public variable with lock protection is <1873>
pid[3] is on running !@#$^;
now public variable with lock protection is <1874>
pid[3] is on running !@#$^;
now public variable with lock protection is <1875>
pid[3] is on running !@#$^;
now public variable with lock protection is <1876>
pid[3] is on running !@#$^;
now public variable with lock protection is <1877>
pid[3] is on running !@#$^;
now public variablepid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
l main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
5;
now public variable with lock protection is <1879>
pid[1] is on running 12345;
now public variable with lock protection is <1880>
pid[1] is on running 12345;
now public variable with lock protection is <1881>
pid[1] is on running 12345;
now public variable with lock protection is <1882>
pid[1] is on running 12345;
now public variable with lock protection is <1883>
pid[1] is on running 12345;
now public variable with lock protection is <1884>
pid[1] is on running 12345;
now public variable with lock protection is <1885>
pid[1] is on running 12345;
now public variable with lock protection is <1886>
pid[1] is on running 12345;
now public variable with lock protection is <1887>
pid[1] is on running 12345;
now public variablepid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <1888>
pid[2] is on running abcde;
now public variable with lock protection is <1889>
pid[2] is on running abcde;
now public variable with lock protection is <1890>
pid[2] is on running abcde;
now public variable with lock protection is <1891>
pid[2] is on running abcde;
now public variable with lock protection is <1892>
pid[2] is on running abcde;
now public variable with lock protection is <1893>
pid[2] is on running abcde;
now public variable with lock protection is <1894>
pid[2] is on running abcde;
now public variable with lock protection is <1895>
pid[2] is on running abcde;
now public variable with lock protection is <1896>
pid[2] is on running abcde;
now public variable with lock protection is <1897>
pid[2] is on running abcde;
now publipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 with lock protection is <1878>
pid[3] is on running !@#$^;
now public variable with lock protection is <1899>
pid[3] is on running !@#$^;
now public variable with lock protection is <1900>
pid[3] is on running !@#$^;
now public variable with lock protection is <1901>
pid[3] is on running !@#$^;
now public variable with lock protection is <1902>
pid[3] is on running !@#$^;
now public variable with lock protection is <1903>
pid[3] is on running !@#$^;
now public variable with lock protection is <1904>
pid[3] is on running !@#$^;
now public variable with lock protection is <1905>
pid[3] is on running !@#$^;
now public variable with lock protection is <1906>
pid[3] is on running !@#$^;
now public variable with lock protection is <1907>
pid[3] is on running !@#$^;
now public variable with lock protection is <1908>
pid[3] is on running !@#$^;
now public variable with lock protection is <1909>
pid[3] is on running !@#$^;
now public variable with lock protection is <1910>
pid[3] is on running !@#$^;
now public variable with lock protection is <1911>
pid[3] is on running !@#$^;
now public variable withpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
el main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kerpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
 with lock protection is <1888>
pid[1] is on running 12345;
now public variable with lock protection is <1913>
pid[1] is on running 12345;
now public variable with lock protection is <1914>
pid[1] is on running 12345;
now public variable with lock protection is <1915>
pid[1] is on running 12345;
now public variable with lock protection is <1916>
pid[1] is on running 12345;
now public variable with lock protection is <1917>
pid[1] is on running 12345;
now public variable with lock protection is <1918>
pid[1] is on running 12345;
now public variable with lock protection is <1919>
pid[1] is on running 12345;
now public variable with lock protection is <1920>
pid[1] is on running 12345;
now public variable with lock protection is <1921>
pid[1] is on running 12345;
now public variable with lock protection is <1922>
pid[pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
c variable with lock protection is <1898>
pid[2] is on running abcde;
now public variable with lock protection is <1923>
pid[2] is on running abcde;
now public variable with lock protection is <1924>
pid[2] is on running abcde;
now public variable with lock protection is <1925>
pid[2] is on running abcde;
now public variable with lock protection is <1926>
pid[2] is on running abcde;
now public variable with lock protection is <1927>
pid[2] is on running abcde;
now public variable with lock protection is <1928>
pid[2] is on running abcde;
now public variable with lock protection is <1929>
pid[2] is on running abcde;
now public variable with lock protection is <1930>
pid[2] is on running abcde;
now publipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 lock protection is <1912>
pid[3] is on running !@#$^;
now public variable with lock protection is <1932>
pid[3] is on running !@#$^;
now public variable with lock protection is <1933>
pid[3] is on running !@#$^;
now public variable with lock protection is <1934>
pid[3] is on running !@#$^;
now public variable with lock protection is <1935>
pid[3] is on running !@#$^;
now public variable with lock protection is <1936>
pid[3] is on running !@#$^;
now public variable with lock protection is <1937>
pid[3] is on running !@#$^;
now public variable with lock protection is <1938>
pid[3] is on running !@#$^;
now public variable with lock protection is <1939>
pid[3] is on running !@#$^;
now public variable with lock protection is <1940>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
nel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
1] is on running 12345;
now public variable with lock protection is <1941>
pid[1] is on running 12345;
now public variable with lock protection is <1942>
pid[1] is on running 12345;
now public variable with lock protection is <1943>
pid[1] is on running 12345;
now public variable with lock protection is <1944>
pid[1] is on running 12345;
now public variable with lock protection is <1945>
pid[1] is on running 12345;
now public variable with lock protection is <1946>
pid[1] is on running 12345;
now public variable with lock protection is <1947>
pid[1] is on running 12345;
now public variable with lock protection is <1948>
pid[1] is on running 12345;
now public variable with lock protection is <1949>
pid[1] is on running 12345;
now public variable with lock protection is <1950>
pid[1] is on running 12345;
now pubpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
c variable with lock protection is <1931>
pid[2] is on running abcde;
now public variable with lock protection is <1952>
pid[2] is on running abcde;
now public variable with lock protection is <1953>
pid[2] is on running abcde;
now public variable with lock protection is <1954>
pid[2] is on running abcde;
now public variable with lock protection is <1955>
pid[2] is on running abcde;
now public variable with lock protection is <1956>
pid[2] is on running abcde;
now public variable with lock protection is <1957>
pid[2] is on running abcde;
now public variable with lock protection is <1958>
pid[2] is on running abcde;
now public variable with lock protection is <1959>
pid[2] is on running abcde;
now public variabpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <1961>
pid[3] is on running !@#$^;
now public variable with lock protection is <1962>
pid[3] is on running !@#$^;
now public variable with lock protection is <1963>
pid[3] is on running !@#$^;
now public variable with lock protection is <1964>
pid[3] is on running !@#$^;
now public variable with lock protection is <1965>
pid[3] is on running !@#$^;
now public variable with lock protection is <1966>
pid[3] is on running !@#$^;
now public variable with lock protection is <1967>
pid[3] is on running !@#$^;
now public variable with lock protection is <1968>
pid[3] is on running !@#$^;
now public variable with lock protection is <1969>
pid[3] is on running !@#$^;
now public variable with lock protection is <1970>
pid[3] is on running !@#$^;
now public pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
lic variable with lock protection is <1951>
pid[1] is on running 12345;
now public variable with lock protection is <1972>
pid[1] is on running 12345;
now public variable with lock protection is <1973>
pid[1] is on running 12345;
now public variable with lock protection is <1974>
pid[1] is on running 12345;
now public variable with lock protection is <1975>
pid[1] is on running 12345;
now public variable with lock protection is <1976>
pid[1] is on running 12345;
now public variable with lock protection is <1977>
pid[1] is on running 12345;
now public variable with lock protection is <1978>
pid[1] is on running 12345;
now public variable with lock protection is <1979>
pid[1] is on running 12345;
now public variable with lock protection is <1980>
pid[1] is on running 12345;
now publpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
le with lock protection is <1960>
pid[2] is on running abcde;
now public variable with lock protection is <1982>
pid[2] is on running abcde;
now public variable with lock protection is <1983>
pid[2] is on running abcde;
now public variable with lock protection is <1984>
pid[2] is on running abcde;
now public variable with lock protection is <1985>
pid[2] is on running abcde;
now public variable with lock protection is <1986>
pid[2] is on running abcde;
now public variable with lock protection is <1987>
pid[2] is on running abcde;
now public variable with lock protection is <1988>
pid[2] is on running abcde;
now public variable with lock protection is <1989>
pid[2] is on running abcde;
now public variable with lock protection is <1990>
pid[2] is on runnipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
variable with lock protection is <1971>
pid[3] is on running !@#$^;
now public variable with lock protection is <1991>
pid[3] is on running !@#$^;
now public variable with lock protection is <1992>
pid[3] is on running !@#$^;
now public variable with lock protection is <1993>
pid[3] is on running !@#$^;
now public variable with lock protection is <1994>
pid[3] is on running !@#$^;
now public variable with lock protection is <1995>
pid[3] is on running !@#$^;
now public variable with lock protection is <1996>
pid[3] is on running !@#$^;
now public variable with lock protection is <1997>
pid[3] is on running !@#$^;
now public variable with lock protection is <1998>
pid[3] is on running !@#$^;
now public variable with lock protection is <1999>
pid[3] is on runninpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],Ipid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ic variable with lock protection is <1981>
pid[1] is on running 12345;
now public variable with lock protection is <2000>
pid[1] is on running 12345;
now public variable with lock protection is <2001>
pid[1] is on running 12345;
now public variable with lock protection is <2002>
pid[1] is on running 12345;
now public variable with lock protection is <2003>
pid[1] is on running 12345;
now public variable with lock protection is <2004>
pid[1] is on running 12345;
now public variable with lock protection is <2005>
pid[1] is on running 12345;
now public variable with lock protection is <2006>
pid[1] is on running 12345;
now public variable with lock protection is <2007>
pid[1] is on running 12345;
now public variable with lock protection is <2008>
pid[1] is on pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ng abcde;
now public variable with lock protection is <2009>
pid[2] is on running abcde;
now public variable with lock protection is <2010>
pid[2] is on running abcde;
now public variable with lock protection is <2011>
pid[2] is on running abcde;
now public variable with lock protection is <2012>
pid[2] is on running abcde;
now public variable with lock protection is <2013>
pid[2] is on running abcde;
now public variable with lock protection is <2014>
pid[2] is on running abcde;
now public variable with lock protection is <2015>
pid[2] is on running abcde;
now public variable with lock protection is <2016>
pid[2] is on running abcde;
now public variable with lock protection is <2017>
pid[2] is on running abcde;
now public variable with lock protection is <2018>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
g !@#$^;
now public variable with lock protection is <2019>
pid[3] is on running !@#$^;
now public variable with lock protection is <2020>
pid[3] is on running !@#$^;
now public variable with lock protection is <2021>
pid[3] is on running !@#$^;
now public variable with lock protection is <2022>
pid[3] is on running !@#$^;
now public variable with lock protection is <2023>
pid[3] is on running !@#$^;
now public variable with lock protection is <2024>
pid[3] is on running !@#$^;
now public variable with lock protection is <2025>
pid[3] is on running !@#$^;
now public variable with lock protection is <2026>
pid[3] is on running !@#$^;
now public variable with lock protection is <2027>
pid[3] is on running !@#$^;
now public variable with lock protection is <2028>
pid[3] is on running !@#$^;pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
n kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread nowpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
running 12345;
now public variable with lock protection is <2029>
pid[1] is on running 12345;
now public variable with lock protection is <2030>
pid[1] is on running 12345;
now public variable with lock protection is <2031>
pid[1] is on running 12345;
now public variable with lock protection is <2032>
pid[1] is on running 12345;
now public variable with lock protection is <2033>
pid[1] is on running 12345;
now public variable with lock protection is <2034>
pid[1] is on running 12345;
now public variable with lock protection is <2035>
pid[1] is on running 12345;
now public variable with lock protection is <2036>
pid[1] is on running 12345;
now public variable with lock protection is <2037>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <2039>
pid[2] is on running abcde;
now public variable with lock protection is <2040>
pid[2] is on running abcde;
now public variable with lock protection is <2041>
pid[2] is on running abcde;
now public variable with lock protection is <2042>
pid[2] is on running abcde;
now public variable with lock protection is <2043>
pid[2] is on running abcde;
now public variable with lock protection is <2044>
pid[2] is on running abcde;
now public variable with lock protection is <2045>
pid[2] is on running abcde;
now public variable with lock protection is <2046>
pid[2] is on running abcde;
now public variable with lock protection is <2047>
pid[2] is on running abcde;
now public variable with locpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!

now public variable with lock protection is <2049>
pid[3] is on running !@#$^;
now public variable with lock protection is <2050>
pid[3] is on running !@#$^;
now public variable with lock protection is <2051>
pid[3] is on running !@#$^;
now public variable with lock protection is <2052>
pid[3] is on running !@#$^;
now public variable with lock protection is <2053>
pid[3] is on running !@#$^;
now public variable with lock protection is <2054>
pid[3] is on running !@#$^;
now public variable with lock protection is <2055>
pid[3] is on running !@#$^;
now public variable with lock protection is <2056>
pid[3] is on running !@#$^;
now public variable with lock protection is <2057>
pid[3] is on running !@#$^;
now public variable with lock protection is <pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!

pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <2058>
pid[1] is on running 12345;
now public variable with lock protection is <2059>
pid[1] is on running 12345;
now public variable with lock protection is <2060>
pid[1] is on running 12345;
now public variable with lock protection is <2061>
pid[1] is on running 12345;
now public variable with lock protection is <2062>
pid[1] is on running 12345;
now public variable with lock protection is <2063>
pid[1] is on running 12345;
now public variable with lock protection is <2064>
pid[1] is on running 12345;
now public variable with lock protection is <2065>
pid[1] is on running 12345;
now public variable with lock protection is <2066>
pid[1] is on running 12345;
now public variable with lock protection is <2067>
pid[1] is on running 12345;
now public variable with lock prpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
k protection is <2048>
pid[2] is on running abcde;
now public variable with lock protection is <2069>
pid[2] is on running abcde;
now public variable with lock protection is <2070>
pid[2] is on running abcde;
now public variable with lock protection is <2071>
pid[2] is on running abcde;
now public variable with lock protection is <2072>
pid[2] is on running abcde;
now public variable with lock protection is <2073>
pid[2] is on running abcde;
now public variable with lock protection is <2074>
pid[2] is on running abcde;
now public variable with lock protection is <2075>
pid[2] is on running abcde;
now public variable with lock protection is <2076>
pid[2] is on running abcde;
now public variable with lock protection is <2077>
pid[2] is on running pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
2058>
pid[3] is on running !@#$^;
now public variable with lock protection is <2078>
pid[3] is on running !@#$^;
now public variable with lock protection is <2079>
pid[3] is on running !@#$^;
now public variable with lock protection is <2080>
pid[3] is on running !@#$^;
now public variable with lock protection is <2081>
pid[3] is on running !@#$^;
now public variable with lock protection is <2082>
pid[3] is on running !@#$^;
now public variable with lock protection is <2083>
pid[3] is on running !@#$^;
now public variable with lock protection is <2084>
pid[3] is on running !@#$^;
now public variable with lock protection is <2085>
pid[3] is on running !@#$^;
now public variable with lock protection is <2086>
pid[3] is on running !@#$^;
nowpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel mapid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
otection is <2068>
pid[1] is on running 12345;
now public variable with lock protection is <2088>
pid[1] is on running 12345;
now public variable with lock protection is <2089>
pid[1] is on running 12345;
now public variable with lock protection is <2090>
pid[1] is on running 12345;
now public variable with lock protection is <2091>
pid[1] is on running 12345;
now public variable with lock protection is <2092>
pid[1] is on running 12345;
now public variable with lock protection is <2093>
pid[1] is on running 12345;
now public variable with lock protection is <2094>
pid[1] is on running 12345;
now public variable with lock protection is <2095>
pid[1] is on running 12345;
now public variable with lock protection is <2096>
pid[1] is on running 12345;
now public variable with lock protection is <2097>
pid[1] is on running 12345;
now public variablepid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
abcde;
now public variable with lock protection is <2099>
pid[2] is on running abcde;
now public variable with lock protection is <2100>
pid[2] is on running abcde;
now public variable with lock protection is <2101>
pid[2] is on running abcde;
now public variable with lock protection is <2102>
pid[2] is on running abcde;
now public variable with lock protection is <2103>
pid[2] is on running abcde;
now public variable with lock protection is <2104>
pid[2] is on running abcde;
now public variable with lock protection is <2105>
pid[2] is on running abcde;
now public variable with lock protection is <2106>
pid[2] is on running abcde;
now public variable with lock protection is <2107>
pid[2] is on running abcde;
now public variable with lock protection is <2108>
pipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 public variable with lock protection is <2087>
pid[3] is on running !@#$^;
now public variable with lock protection is <2109>
pid[3] is on running !@#$^;
now public variable with lock protection is <2110>
pid[3] is on running !@#$^;
now public variable with lock protection is <2111>
pid[3] is on running !@#$^;
now public variable with lock protection is <2112>
pid[3] is on running !@#$^;
now public variable with lock protection is <2113>
pid[3] is on running !@#$^;
now public variable with lock protection is <2114>
pid[3] is on running !@#$^;
now public variable with lock protection is <2115>
pid[3] is on running !@#$^;
now public variable with lock protection is <2116>
pid[3] is on running !@#$^;
now public variable with lock protection is <2117>
pid[3] is on running !@#$^;
now public variapid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
in thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
 with lock protection is <2098>
pid[1] is on running 12345;
now public variable with lock protection is <2119>
pid[1] is on running 12345;
now public variable with lock protection is <2120>
pid[1] is on running 12345;
now public variable with lock protection is <2121>
pid[1] is on running 12345;
now public variable with lock protection is <2122>
pid[1] is on running 12345;
now public variable with lock protection is <2123>
pid[1] is on running 12345;
now public variable with lock protection is <2124>
pid[1] is on running 12345;
now public variable with lock protection is <2125>
pid[1] is on running 12345;
now public variable with lock protection is <2126>
pid[1] is on running 12345;
now public variable with lock protection is <2127>
pid[1] is on running 12345pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
d[2] is on running abcde;
now public variable with lock protection is <2128>
pid[2] is on running abcde;
now public variable with lock protection is <2129>
pid[2] is on running abcde;
now public variable with lock protection is <2130>
pid[2] is on running abcde;
now public variable with lock protection is <2131>
pid[2] is on running abcde;
now public variable with lock protection is <2132>
pid[2] is on running abcde;
now public variable with lock protection is <2133>
pid[2] is on running abcde;
now public variable with lock protection is <2134>
pid[2] is on running abcde;
now public variable with lock protection is <2135>
pid[2] is on running abcde;
now public variable with lock protection is <2136>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ble with lock protection is <2118>
pid[3] is on running !@#$^;
now public variable with lock protection is <2138>
pid[3] is on running !@#$^;
now public variable with lock protection is <2139>
pid[3] is on running !@#$^;
now public variable with lock protection is <2140>
pid[3] is on running !@#$^;
now public variable with lock protection is <2141>
pid[3] is on running !@#$^;
now public variable with lock protection is <2142>
pid[3] is on running !@#$^;
now public variable with lock protection is <2143>
pid[3] is on running !@#$^;
now public variable with lock protection is <2144>
pid[3] is on running !@#$^;
now public variable with lock protection is <2145>
pid[3] is on running !@#$^;
now public variable with lock protection is <2146>
pid[3] is on running !@#$^;
now public variable with lock protection is <2147>
pid[3] is on running !@#$^;
now publicpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernelpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
;
now public variable with lock protection is <2149>
pid[1] is on running 12345;
now public variable with lock protection is <2150>
pid[1] is on running 12345;
now public variable with lock protection is <2151>
pid[1] is on running 12345;
now public variable with lock protection is <2152>
pid[1] is on running 12345;
now public variable with lock protection is <2153>
pid[1] is on running 12345;
now public variable with lock protection is <2154>
pid[1] is on running 12345;
now public variable with lock protection is <2155>
pid[1] is on running 12345;
now public variable with lock protection is <2156>
pid[1] is on running 12345;
now public variable with lock protection is <2157>
pid[1] is on running 12345;
now public variable with lock protection is <2158>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <2158>
pid[2] is on running abcde;
now public variable with lock protection is <2159>
pid[2] is on running abcde;
now public variable with lock protection is <2160>
pid[2] is on running abcde;
now public variable with lock protection is <2161>
pid[2] is on running abcde;
now public variable with lock protection is <2162>
pid[2] is on running abcde;
now public variable with lock protection is <2163>
pid[2] is on running abcde;
now public variable with lock protection is <2164>
pid[2] is on running abcde;
now public variable with lock protection is <2165>
pid[2] is on running abcde;
now public variable with lock protection is <2166>
pid[2] is on running abcde;
now public variable with lock protection is <2167>
pid[2] is on running abcde;
now public variable with lock protection is <2168>
pipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
 variable with lock protection is <2148>
pid[3] is on running !@#$^;
now public variable with lock protection is <2169>
pid[3] is on running !@#$^;
now public variable with lock protection is <2170>
pid[3] is on running !@#$^;
now public variable with lock protection is <2171>
pid[3] is on running !@#$^;
now public variable with lock protection is <2172>
pid[3] is on running !@#$^;
now public variable with lock protection is <2173>
pid[3] is on running !@#$^;
now public variable with lock protection is <2174>
pid[3] is on running !@#$^;
now public variable with lock protection is <2175>
pid[3] is on running !@#$^;
now public variable with lock protection is <2176>
pid[3] is on running !@#$^;
now public variable with locpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
 main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <2178>
pid[1] is on running 12345;
now public variable with lock protection is <2179>
pid[1] is on running 12345;
now public variable with lock protection is <2180>
pid[1] is on running 12345;
now public variable with lock protection is <2181>
pid[1] is on running 12345;
now public variable with lock protection is <2182>
pid[1] is on running 12345;
now public variable with lock protection is <2183>
pid[1] is on running 12345;
now public variable with lock protection is <2184>
pid[1] is on running 12345;
now public variable with lock protection is <2185>
pid[1] is on running 12345;
now public variable with lock protection is <2186>
pid[1] is on running 12345;
now public variable with lock protpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
d[2] is on running abcde;
now public variable with lock protection is <2188>
pid[2] is on running abcde;
now public variable with lock protection is <2189>
pid[2] is on running abcde;
now public variable with lock protection is <2190>
pid[2] is on running abcde;
now public variable with lock protection is <2191>
pid[2] is on running abcde;
now public variable with lock protection is <2192>
pid[2] is on running abcde;
now public variable with lock protection is <2193>
pid[2] is on running abcde;
now public variable with lock protection is <2194>
pid[2] is on running abcde;
now public variable with lock protection is <2195>
pid[2] is on running abcde;
now public variable with lock protection is <2196>
pid[2] is on running abcde;
now public variable with lock pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
k protection is <2177>
pid[3] is on running !@#$^;
now public variable with lock protection is <2198>
pid[3] is on running !@#$^;
now public variable with lock protection is <2199>
pid[3] is on running !@#$^;
now public variable with lock protection is <2200>
pid[3] is on running !@#$^;
now public variable with lock protection is <2201>
pid[3] is on running !@#$^;
now public variable with lock protection is <2202>
pid[3] is on running !@#$^;
now public variable with lock protection is <2203>
pid[3] is on running !@#$^;
now public variable with lock protection is <2204>
pid[3] is on running !@#$^;
now public variable with lock protection is <2205>
pid[3] is on running !@#$^;
now public variable with lock protection is <2206>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ection is <2187>
pid[1] is on running 12345;
now public variable with lock protection is <2208>
pid[1] is on running 12345;
now public variable with lock protection is <2209>
pid[1] is on running 12345;
now public variable with lock protection is <2210>
pid[1] is on running 12345;
now public variable with lock protection is <2211>
pid[1] is on running 12345;
now public variable with lock protection is <2212>
pid[1] is on running 12345;
now public variable with lock protection is <2213>
pid[1] is on running 12345;
now public variable with lock protection is <2214>
pid[1] is on running 12345;
now public variable with lock protection is <2215>
pid[1] is on running 12345;
now public variable with lock protection is <2216>
pid[1] is on running 12345;pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
protection is <2197>
pid[2] is on running abcde;
now public variable with lock protection is <2217>
pid[2] is on running abcde;
now public variable with lock protection is <2218>
pid[2] is on running abcde;
now public variable with lock protection is <2219>
pid[2] is on running abcde;
now public variable with lock protection is <2220>
pid[2] is on running abcde;
now public variable with lock protection is <2221>
pid[2] is on running abcde;
now public variable with lock protection is <2222>
pid[2] is on running abcde;
now public variable with lock protection is <2223>
pid[2] is on running abcde;
now public variable with lock protection is <2224>
pid[2] is on running abcde;
now public variable with lock protection is <2225>
pid[2] is on running abcde;
now public variable with lock protection is <2pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2226>
pid[3] is on running !@#$^;
now public variable with lock protection is <2227>
pid[3] is on running !@#$^;
now public variable with lock protection is <2228>
pid[3] is on running !@#$^;
now public variable with lock protection is <2229>
pid[3] is on running !@#$^;
now public variable with lock protection is <2230>
pid[3] is on running !@#$^;
now public variable with lock protection is <2231>
pid[3] is on running !@#$^;
now public variable with lock protection is <2232>
pid[3] is on running !@#$^;
now public variable with lock protection is <2233>
pid[3] is on running !@#$^;
now public variable with lock protection is <2234>
pid[3] is on running !@#$^;
now public variable with lock protection is <2235>
pid[3] is on running !@#$^;
now public variable with lock protection is <2236>pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!

now public variable with lock protection is <2237>
pid[1] is on running 12345;
now public variable with lock protection is <2238>
pid[1] is on running 12345;
now public variable with lock protection is <2239>
pid[1] is on running 12345;
now public variable with lock protection is <2240>
pid[1] is on running 12345;
now public variable with lock protection is <2241>
pid[1] is on running 12345;
now public variable with lock protection is <2242>
pid[1] is on running 12345;
now public variable with lock protection is <2243>
pid[1] is on running 12345;
now public variable with lock protection is <2244>
pid[1] is on running 12345;
now public variable with lock protection is <2245>
pid[1] is on running 12345;
now pupid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
226>
pid[2] is on running abcde;
now public variable with lock protection is <2247>
pid[2] is on running abcde;
now public variable with lock protection is <2248>
pid[2] is on running abcde;
now public variable with lock protection is <2249>
pid[2] is on running abcde;
now public variable with lock protection is <2250>
pid[2] is on running abcde;
now public variable with lock protection is <2251>
pid[2] is on running abcde;
now public variable with lock protection is <2252>
pid[2] is on running abcde;
now public variable with lock protection is <2253>
pid[2] is on running abcde;
now public variable with lock protection is <2254>
pid[2] is on running abcde;
now public variable with lock protection is <2255>
pid[2] is on running abcde;
now public variable with lock protection is <2256>
pid[2] is on rpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!

pid[3] is on running !@#$^;
now public variable with lock protection is <2257>
pid[3] is on running !@#$^;
now public variable with lock protection is <2258>
pid[3] is on running !@#$^;
now public variable with lock protection is <2259>
pid[3] is on running !@#$^;
now public variable with lock protection is <2260>
pid[3] is on running !@#$^;
now public variable with lock protection is <2261>
pid[3] is on running !@#$^;
now public variable with lock protection is <2262>
pid[3] is on running !@#$^;
now public variable with lock protection is <2263>
pid[3] is on running !@#$^;
now public variable with lock protection is <2264>
pid[3] is on running !@#$^;
now public variable with lock protection is <2265>
pid[3] is on running !@#$^;
now public variable with lock protection is <2266>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
blic variable with lock protection is <2246>
pid[1] is on running 12345;
now public variable with lock protection is <2268>
pid[1] is on running 12345;
now public variable with lock protection is <2269>
pid[1] is on running 12345;
now public variable with lock protection is <2270>
pid[1] is on running 12345;
now public variable with lock protection is <2271>
pid[1] is on running 12345;
now public variable with lock protection is <2272>
pid[1] is on running 12345;
now public variable with lock protection is <2273>
pid[1] is on running 12345;
now public variable with lock protection is <2274>
pid[1] is on running 12345;
now public variable with lock protection is <2275>
pid[1] is on running 12345;
now public variable with lock protection is <2276>
pid[1] is on pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
unning abcde;
now public variable with lock protection is <2277>
pid[2] is on running abcde;
now public variable with lock protection is <2278>
pid[2] is on running abcde;
now public variable with lock protection is <2279>
pid[2] is on running abcde;
now public variable with lock protection is <2280>
pid[2] is on running abcde;
now public variable with lock protection is <2281>
pid[2] is on running abcde;
now public variable with lock protection is <2282>
pid[2] is on running abcde;
now public variable with lock protection is <2283>
pid[2] is on running abcde;
now public variable with lock protection is <2284>
pid[2] is on running abcde;
now public variable with lock protection is <2285>
pid[2] is on running abcde;
now public variablpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2267>
pid[3] is on running !@#$^;
now public variable with lock protection is <2287>
pid[3] is on running !@#$^;
now public variable with lock protection is <2288>
pid[3] is on running !@#$^;
now public variable with lock protection is <2289>
pid[3] is on running !@#$^;
now public variable with lock protection is <2290>
pid[3] is on running !@#$^;
now public variable with lock protection is <2291>
pid[3] is on running !@#$^;
now public variable with lock protection is <2292>
pid[3] is on running !@#$^;
now public variable with lock protection is <2293>
pid[3] is on running !@#$^;
now public variable with lock protection is <2294>
pid[3] is on running !@#$^;
now public variable with lock protection is <2295>
pid[3] is on running !@#$^;
now public variable with lock protection is <2296>
pid[3] is pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
running 12345;
now public variable with lock protection is <2297>
pid[1] is on running 12345;
now public variable with lock protection is <2298>
pid[1] is on running 12345;
now public variable with lock protection is <2299>
pid[1] is on running 12345;
now public variable with lock protection is <2300>
pid[1] is on running 12345;
now public variable with lock protection is <2301>
pid[1] is on running 12345;
now public variable with lock protection is <2302>
pid[1] is on running 12345;
now public variable with lock protection is <2303>
pid[1] is on running 12345;
now public variable with lock protection is <2304>
pid[1] is on running 12345;
now public variable with lock protection is <2305>
pid[1] is on running 12345;
now public variable with pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
e with lock protection is <2286>
pid[2] is on running abcde;
now public variable with lock protection is <2307>
pid[2] is on running abcde;
now public variable with lock protection is <2308>
pid[2] is on running abcde;
now public variable with lock protection is <2309>
pid[2] is on running abcde;
now public variable with lock protection is <2310>
pid[2] is on running abcde;
now public variable with lock protection is <2311>
pid[2] is on running abcde;
now public variable with lock protection is <2312>
pid[2] is on running abcde;
now public variable with lock protection is <2313>
pid[2] is on running abcde;
now public variable with lock protection is <2314>
pid[2] is on running abcde;
now public variable with lock protection is <2315>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
on running !@#$^;
now public variable with lock protection is <2317>
pid[3] is on running !@#$^;
now public variable with lock protection is <2318>
pid[3] is on running !@#$^;
now public variable with lock protection is <2319>
pid[3] is on running !@#$^;
now public variable with lock protection is <2320>
pid[3] is on running !@#$^;
now public variable with lock protection is <2321>
pid[3] is on running !@#$^;
now public variable with lock protection is <2322>
pid[3] is on running !@#$^;
now public variable with lock protection is <2323>
pid[3] is on running !@#$^;
now public variable with lock protection is <2324>
pid[3] is on running !@#$^;
now public variable with lock protection is <2325>
pid[3] is on running !@#$^;
now public variable with lock protection is <2326>
pid[3] is on running !@#$^;
now publipid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0]pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
lock protection is <2306>
pid[1] is on running 12345;
now public variable with lock protection is <2328>
pid[1] is on running 12345;
now public variable with lock protection is <2329>
pid[1] is on running 12345;
now public variable with lock protection is <2330>
pid[1] is on running 12345;
now public variable with lock protection is <2331>
pid[1] is on running 12345;
now public variable with lock protection is <2332>
pid[1] is on running 12345;
now public variable with lock protection is <2333>
pid[1] is on running 12345;
now public variable with lock protection is <2334>
pid[1] is on running 12345;
now public variable with lock protection is <2335>
pid[1] is on running 12345;
now public variable with lock protection is <2336>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <2337>
pid[2] is on running abcde;
now public variable with lock protection is <2338>
pid[2] is on running abcde;
now public variable with lock protection is <2339>
pid[2] is on running abcde;
now public variable with lock protection is <2340>
pid[2] is on running abcde;
now public variable with lock protection is <2341>
pid[2] is on running abcde;
now public variable with lock protection is <2342>
pid[2] is on running abcde;
now public variable with lock protection is <2343>
pid[2] is on running abcde;
now public variable with lock protection is <2344>
pid[2] is on running abcde;
now public variable with lock protection is <2345>
pid[2] is on running abcde;
now public variable withpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
c variable with lock protection is <2327>
pid[3] is on running !@#$^;
now public variable with lock protection is <2347>
pid[3] is on running !@#$^;
now public variable with lock protection is <2348>
pid[3] is on running !@#$^;
now public variable with lock protection is <2349>
pid[3] is on running !@#$^;
now public variable with lock protection is <2350>
pid[3] is on running !@#$^;
now public variable with lock protection is <2351>
pid[3] is on running !@#$^;
now public variable with lock protection is <2352>
pid[3] is on running !@#$^;
now public variable with lock protection is <2353>
pid[3] is on running !@#$^;
now public variable with lock protection is <2354>
pid[3] is on running !@#$^;
now public variable with lock protection is <2355>
pid[3] is on running !@#$^;
now public variable with pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
,In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <2356>
pid[1] is on running 12345;
now public variable with lock protection is <2357>
pid[1] is on running 12345;
now public variable with lock protection is <2358>
pid[1] is on running 12345;
now public variable with lock protection is <2359>
pid[1] is on running 12345;
now public variable with lock protection is <2360>
pid[1] is on running 12345;
now public variable with lock protection is <2361>
pid[1] is on running 12345;
now public variable with lock protection is <2362>
pid[1] is on running 12345;
now public variable with lock protection is <2363>
pid[1] is on running 12345;
now public variable with lock protection is <2364>
pid[1] is on running 12345;
now public variable with lock protpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
 lock protection is <2346>
pid[2] is on running abcde;
now public variable with lock protection is <2366>
pid[2] is on running abcde;
now public variable with lock protection is <2367>
pid[2] is on running abcde;
now public variable with lock protection is <2368>
pid[2] is on running abcde;
now public variable with lock protection is <2369>
pid[2] is on running abcde;
now public variable with lock protection is <2370>
pid[2] is on running abcde;
now public variable with lock protection is <2371>
pid[2] is on running abcde;
now public variable with lock protection is <2372>
pid[2] is on running abcde;
now public variable with lock protection is <2373>
pid[2] is on running abcde;
now public variable with lock protection is <2374>
pid[2] is on running abcde;
now public variable with lock protection is <2375pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
lock protection is <2356>
pid[3] is on running !@#$^;
now public variable with lock protection is <2376>
pid[3] is on running !@#$^;
now public variable with lock protection is <2377>
pid[3] is on running !@#$^;
now public variable with lock protection is <2378>
pid[3] is on running !@#$^;
now public variable with lock protection is <2379>
pid[3] is on running !@#$^;
now public variable with lock protection is <2380>
pid[3] is on running !@#$^;
now public variable with lock protection is <2381>
pid[3] is on running !@#$^;
now public variable with lock protection is <2382>
pid[3] is on running !@#$^;
now public variable with lock protection is <2383>
pid[3] is on running !@#$^;
now public variable with lock protection is <2384>
pid[3] is on running !@#$^;
now public variable with lock protection is <2385>
pid[3] is on running !@#$^;
now public variable with lock protection is <2386>
pid[3] is on running !@#$^;
now public variable with lock protection is <2387>
pid[3] is on running !@#$^;
now public variable with lock protection is <2388>
pid[3] is on running !@#$^;
now public variable with lock protection is <2389>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
ection is <2365>
pid[1] is on running 12345;
now public variable with lock protection is <2391>
pid[1] is on running 12345;
now public variable with lock protection is <2392>
pid[1] is on running 12345;
now public variable with lock protection is <2393>
pid[1] is on running 12345;
now public variable with lock protection is <2394>
pid[1] is on running 12345;
now public variable with lock protection is <2395>
pid[1] is on running 12345;
now public variable with lock protection is <2396>
pid[1] is on running 12345;
now public variable with lock protection is <2397>
pid[1] is on running 12345;
now public variable with lock protection is <2398>
pid[1] is on running 12345;
now public variable with lock protection is <2399>
pid[1] is on running 12345;
now public variable with lock protection is <2400>
pid[1] is on running 12345;
now public variable with lock protection is <2401>
pid[1] is on running 12345;
now public variable with lock protection is <2402>
pid[1] is on running 12345;
now public variable with lock protection is <2403>
pid[1] is on running 12345;
now public variable with lock protection is <2404>
pid[1] is on running 12345;
now public variable with lock protection is <2405>
pid[1] is on running 12345;
now public variable with lock protection is <2406>
pid[1] is on running 12345;
now public variable with lock protection is <2407>
pid[1] is on running 12345;
now public variable with lock protection is <2408>
pid[1] is on running 12345;
now public variable with lock protection is <2409>
pid[1] is on running 12345;
now public variable with lock protection is <2410>
pid[1] is on running 12345;
now public variable with lock protection is <2411>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
>
pid[2] is on running abcde;
now public variable with lock protection is <2413>
pid[2] is on running abcde;
now public variable with lock protection is <2414>
pid[2] is on running abcde;
now public variable with lock protection is <2415>
pid[2] is on running abcde;
now public variable with lock protection is <2416>
pid[2] is on running abcde;
now public variable with lock protection is <2417>
pid[2] is on running abcde;
now public variable with lock protection is <2418>
pid[2] is on running abcde;
now public variable with lock protection is <2419>
pid[2] is on running abcde;
now public variable with lock protection is <2420>
pid[2] is on running abcde;
now public variable with lock protection is <2421>
pid[2] is on running abcde;
now public variable with lock protection is <2422>
pid[2] is on running abcde;
now public variable with lock protection is <2423>
pid[2] is on running abcde;
now public variable with lock protection is <2424>
pid[2] is on running abcde;
now public variable with lock protection is <2425>
pid[2] is on running abcde;
now public variable with lock protection is <2426>
pid[2] is on running abcde;
now public variable with lock protection is <2427>
pid[2] is on running abcde;
now public variable with lock protection is <2428>
pid[2] is on running abcde;
now public variable with lock protection is <2429>
pid[2] is on running abcde;
now public variable with lock protection is <2430>
pid[2] is on running abcde;
now public variable with lock protection is <2431>
pid[2] is on running abcde;
now public variable with lock protection is <2432>
pid[2] is on running abcde;
now public variable with lock protection is <2433>
pid[2] is on running abcde;
now publicpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2434>
pid[3] is on running !@#$^;
now public variable with lock protection is <2435>
pid[3] is on running !@#$^;
now public variable with lock protection is <2436>
pid[3] is on running !@#$^;
now public variable with lock protection is <2437>
pid[3] is on running !@#$^;
now public variable with lock protection is <2438>
pid[3] is on running !@#$^;
now public variable with lock protection is <2439>
pid[3] is on running !@#$^;
now public variable with lock protection is <2440>
pid[3] is on running !@#$^;
now public variable with lock protection is <2441>
pid[3] is on running !@#$^;
now public variable with lock protection is <2442>
pid[3] is on running !@#$^;
now public variable with lock protection is <2443>
pid[3] is on running !@#$^;
now public variable with lock protection is <2444>
pid[3] is on running !@#$^;
now public variable with lock protection is <2445>
pid[3] is on running !@#$^;
now public variable with lock protection is <2446>
pid[3] is on running !@#$^;
now public variable with lock protection is <2447>
pid[3] is on running !@#$^;
now public variable with lock protection is <2448>
pid[3] is on running !@#$^;
now public variable with lock protection is <2449>
pid[3] is on running !@#$^;
now public variable with lock protection is <2450>
pid[3] is on running !@#$^;
now public variable with lock protection is <2451>
pid[3] is on running !@#$^;
now public variable with lock protection is <2452>
pid[3] is on running !@#$^;
now public variable with lock protection is <2453>
pid[3] is on running !@#$^;
now public variable with lock protection is <2454>
pid[3] is on running !@#$^;
now public variable with lock protection is <2455>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pidpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <2456>
pid[1] is on running 12345;
now public variable with lock protection is <2457>
pid[1] is on running 12345;
now public variable with lock protection is <2458>
pid[1] is on running 12345;
now public variable with lock protection is <2459>
pid[1] is on running 12345;
now public variable with lock protection is <2460>
pid[1] is on running 12345;
now public variable with lock protection is <2461>
pid[1] is on running 12345;
now public variable with lock protection is <2462>
pid[1] is on running 12345;
now public variable with lock protection is <2463>
pid[1] is on running 12345;
now public variable with lock protection is <2464>
pid[1] is on running 12345;
now public variable with lock protection is <2465>
pid[1] is on running pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
 variable with lock protection is <2434>
pid[2] is on running abcde;
now public variable with lock protection is <2466>
pid[2] is on running abcde;
now public variable with lock protection is <2467>
pid[2] is on running abcde;
now public variable with lock protection is <2468>
pid[2] is on running abcde;
now public variable with lock protection is <2469>
pid[2] is on running abcde;
now public variable with lock protection is <2470>
pid[2] is on running abcde;
now public variable with lock protection is <2471>
pid[2] is on running abcde;
now public variable with lock protection is <2472>
pid[2] is on running abcde;
now public variabpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2473>
pid[3] is on running !@#$^;
now public variable with lock protection is <2474>
pid[3] is on running !@#$^;
now public variable with lock protection is <2475>
pid[3] is on running !@#$^;
now public variable with lock protection is <2476>
pid[3] is on running !@#$^;
now public variable with lock protection is <2477>
pid[3] is on running !@#$^;
now public variable with lock protection is <2478>
pid[3] is on running !@#$^;
now public variable with lock protection is <2479>
pid[3] is on running !@#$^;
now public variable with lock protection is <2480>
pid[3] is on running !@#$^;
now public variable with lock protection is <2481>
pid[3] is on running !@#$^;
now public variable with lock protection is <2482>
pid[3] is on running !@#$^;
now public variable with lock protection is <2483>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
12345;
now public variable with lock protection is <2485>
pid[1] is on running 12345;
now public variable with lock protection is <2486>
pid[1] is on running 12345;
now public variable with lock protection is <2487>
pid[1] is on running 12345;
now public variable with lock protection is <2488>
pid[1] is on running 12345;
now public variable with lock protection is <2489>
pid[1] is on running 12345;
now public variable with lock protection is <2490>
pid[1] is on running 12345;
now public variable with lock protection is <2491>
pid[1] is on running 12345;
now public variable with lock protection is <2492>
pid[1] is on running 12345;
now public variable with lock protection is <2493>
pid[1] is on running 12345;
now public variable with lock protection is <2494>
pid[1] is opid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
le with lock protection is <2473>
pid[2] is on running abcde;
now public variable with lock protection is <2495>
pid[2] is on running abcde;
now public variable with lock protection is <2496>
pid[2] is on running abcde;
now public variable with lock protection is <2497>
pid[2] is on running abcde;
now public variable with lock protection is <2498>
pid[2] is on running abcde;
now public variable with lock protection is <2499>
pid[2] is on running abcde;
now public variable with lock protection is <2500>
pid[2] is on running abcde;
now public variable with lock protection is <2501>
pid[2] is on running abcde;
now public variable with lock protection is <2502>
pid[2] is on running abcde;
now public variable with lock protection ipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2503>
pid[3] is on running !@#$^;
now public variable with lock protection is <2504>
pid[3] is on running !@#$^;
now public variable with lock protection is <2505>
pid[3] is on running !@#$^;
now public variable with lock protection is <2506>
pid[3] is on running !@#$^;
now public variable with lock protection is <2507>
pid[3] is on running !@#$^;
now public variable with lock protection is <2508>
pid[3] is on running !@#$^;
now public variable with lock protection is <2509>
pid[3] is on running !@#$^;
now public variable with lock protection is <2510>
pid[3] is on running !@#$^;
now public variable with lock protection is <2511>
pid[3] is on running !@#$^;
now public variable with lock protepid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
n running 12345;
now public variable with lock protection is <2513>
pid[1] is on running 12345;
now public variable with lock protection is <2514>
pid[1] is on running 12345;
now public variable with lock protection is <2515>
pid[1] is on running 12345;
now public variable with lock protection is <2516>
pid[1] is on running 12345;
now public variable with lock protection is <2517>
pid[1] is on running 12345;
now public variable with lock protection is <2518>
pid[1] is on running 12345;
now public variable with lock protection is <2519>
pid[1] is on running 12345;
now public variable with lock protection is <2520>
pid[1] is on running 12345;
now public variable with lock protection is <2521>
pid[1] is on running 12345;
now public variable with lock protection is <2522>
pid[1] is on running 12345;
now public variable with lock protection is <2523>
pid[1] is on running 12345;
now public variable with lock protection is <2524>
pid[1] is on running 12345;
now public variable with lock protection is <2525>
pid[1] is on running 12345;
now public variable with lock protection is <2526>
pid[1] is on running 12345;
now public variable with lock protection is <2527>
pid[1] is on running 12345;
now public variable with lock protection is <2528>
pid[1] is on running 12345;
now public variable with lock protection is <2529>
pid[1] is on running 12345;
now public variable with lock protection is <2530>
pid[1] is on running 12345;
now public variable with lock protection is <2531>
pid[1] is on running 12345;
now public variable witpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
s <2503>
pid[2] is on running abcde;
now public variable with lock protection is <2533>
pid[2] is on running abcde;
now public variable with lock protection is <2534>
pid[2] is on running abcde;
now public variable with lock protection is <2535>
pid[2] is on running abcde;
now public variable with lock protection is <2536>
pid[2] is on running abcde;
now public variable with lock protection is <2537>
pid[2] is on running abcde;
now public variable with lock protection is <2538>
pid[2] is on running abcde;
now public variable with lock protection is <2539>
pid[2] is on running abcde;
now public variable with lock protection is <2540>
pid[2] is on running abcde;
now public variable with lock protection is <2541>
pid[2] is on running abcde;
now public variable with lock protection is <2542>
pid[2] is on running abcde;
now public variable with lock protection is <2543>
pid[2] is on running abcde;
now public variable with lock protection is <2544>
pid[2] is on running abcde;
now public variable with lock protection is <2545>
pid[2] is on running abcde;
now public variable with lock protection is <2546>
pid[2] is on running abcde;
now public variable with lock protection is <2547>
pid[2] is on running abcde;
now public variable with lock protection is <2548>
pid[2] is on running abcde;
now public variable with lock protection is <2549>
pid[2] is on running abcde;
now public variable with lock protection is <2550>
pid[2] is on running abcde;
now public variable with lock protection is <2551>
pid[2] is on running abcde;
now public variable with lock protection is <2552>
pid[2] is on running abcde;
now public variable with lock protection is <2553>
pid[2] is on running abcde;
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ction is <2512>
pid[3] is on running !@#$^;
now public variable with lock protection is <2555>
pid[3] is on running !@#$^;
now public variable with lock protection is <2556>
pid[3] is on running !@#$^;
now public variable with lock protection is <2557>
pid[3] is on running !@#$^;
now public variable with lock protection is <2558>
pid[3] is on running !@#$^;
now public variable with lock protection is <2559>
pid[3] is on running !@#$^;
now public variable with lock protection is <2560>
pid[3] is on running !@#$^;
now public variable with lock protection is <2561>
pid[3] is on running !@#$^;
now public variable with lock protection is <2562>
pid[3] is on running !@#$^;
now public variable with lock protection is <2563>
pid[3] is on running !@#$^;
now public variable with lock protection is <2564>
pid[3] is on running !@#$^;
now public variable with lock protection is <2565>
pid[3] is on running !@#$^;
now public variable with lock protection is <2566>
pid[3] is on running !@#$^;
now public variable with lock protection is <2567>
pid[3] is on running !@#$^;
now public variable with lock protection is <2568>
pid[3] is on running !@#$^;
now public variable with lock protection is <2569>
pid[3] is on running !@#$^;
now public variable with lock protection is <2570>
pid[3] is on running !@#$^;
now public variable with lock protection is <2571>
pid[3] is on running !@#$^;
now public variable with lock protection is <2572>
pid[3] is on running !@#$^;
now public variable with lock protection is <2573>
pid[3] is on running !@#$^;
now public variable with lock protection is <2574>
pid[3] is on running !@#$^;
now public variable with lock protection is <2575>
pid[3] is on running !@#$^;
npid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main tpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
h lock protection is <2532>
pid[1] is on running 12345;
now public variable with lock protection is <2577>
pid[1] is on running 12345;
now public variable with lock protection is <2578>
pid[1] is on running 12345;
now public variable with lock protection is <2579>
pid[1] is on running 12345;
now public variable with lock protection is <2580>
pid[1] is on running 12345;
now public variable with lock protection is <2581>
pid[1] is on running 12345;
now public variable with lock protection is <2582>
pid[1] is on running 12345;
now public variable with lock protection is <2583>
pid[1] is on running 12345;
now public variable with lock protection is <2584>
pid[1] is on running 12345;
now public variable with lock protection is <2585>
pid[1] is on running 12345;
now public variable with lock protection is <2586>
pid[1] is on running 12345;
now public variable with lock protection is <2587>
pid[1] is on running 12345;
now public variable with lock protection is <2588>
pid[1] is on running 12345;
now public variable with lock protection is <2589>
pid[1] is on running 12345;
now public variable with lock protection is <2590>
pid[1] is on running 12345;
now public variable with lock protection is <2591>
pid[1] is on running 12345;
now public variable with lock protection is <2592>
pid[1] is on running 12345;
now public variable with lock protection is <2593>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
now public variable with lock protection is <2594>
pid[2] is on running abcde;
now public variable with lock protection is <2595>
pid[2] is on running abcde;
now public variable with lock protection is <2596>
pid[2] is on running abcde;
now public variable with lock protection is <2597>
pid[2] is on running abcde;
now public variable with lock protection is <2598>
pid[2] is on running abcde;
now public variable with lock protection is <2599>
pid[2] is on running abcde;
now public variable with lock protection is <2600>
pid[2] is on running abcde;
now public variable with lock protection is <2601>
pid[2] is on running abcde;
now public variable with lock protection is <2602>
pid[2] is on running abcde;
now public variable with lock protection is <2603>
pid[2] is on running abcde;
now public variabpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ow public variable with lock protection is <2576>
pid[3] is on running !@#$^;
now public variable with lock protection is <2605>
pid[3] is on running !@#$^;
now public variable with lock protection is <2606>
pid[3] is on running !@#$^;
now public variable with lock protection is <2607>
pid[3] is on running !@#$^;
now public variable with lock protection is <2608>
pid[3] is on running !@#$^;
now public variable with lock protection is <2609>
pid[3] is on running !@#$^;
now public variable with lock protection is <2610>
pid[3] is on running !@#$^;
now public variable with lock protection is <2611>
pid[3] is on running !@#$^;
now public variable with lock protection is <2612>
pid[3] is on running !@#$^;
now public variapid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
hread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <2613>
pid[1] is on running 12345;
now public variable with lock protection is <2614>
pid[1] is on running 12345;
now public variable with lock protection is <2615>
pid[1] is on running 12345;
now public variable with lock protection is <2616>
pid[1] is on running 12345;
now public variable with lock protection is <2617>
pid[1] is on running 12345;
now public variable with lock protection is <2618>
pid[1] is on running 12345;
now public variable with lock protection is <2619>
pid[1] is on running 12345;
now public variable with lock protection is <2620>
pid[1] is on running 12345;
now public variable with lock protection is <2621>
pid[1] is on running 1234pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
le with lock protection is <2604>
pid[2] is on running abcde;
now public variable with lock protection is <2622>
pid[2] is on running abcde;
now public variable with lock protection is <2623>
pid[2] is on running abcde;
now public variable with lock protection is <2624>
pid[2] is on running abcde;
now public variable with lock protection is <2625>
pid[2] is on running abcde;
now public variable with lock protection is <2626>
pid[2] is on running abcde;
now public variable with lock protection is <2627>
pid[2] is on running abcde;
now public variable with lock protection is <2628>
pid[2] is on running abcde;
now public variable with lock protection is <2629>
pid[2] is on running abcde;
now public variable with lock protection is <2630>
pid[2] is on running abcde;
now public variable with lock protection is <2631>
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
ble with lock protection is <2613>
pid[3] is on running !@#$^;
now public variable with lock protection is <2632>
pid[3] is on running !@#$^;
now public variable with lock protection is <2633>
pid[3] is on running !@#$^;
now public variable with lock protection is <2634>
pid[3] is on running !@#$^;
now public variable with lock protection is <2635>
pid[3] is on running !@#$^;
now public variable with lock protection is <2636>
pid[3] is on running !@#$^;
now public variable with lock protection is <2637>
pid[3] is on running !@#$^;
now public variable with lock protection is <2638>
pid[3] is on running !@#$^;
now public variable with lock protection is <2639>
pid[3] is on running !@#$^;
now public variable with lock prpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
5;
now public variable with lock protection is <2641>
pid[1] is on running 12345;
now public variable with lock protection is <2642>
pid[1] is on running 12345;
now public variable with lock protection is <2643>
pid[1] is on running 12345;
now public variable with lock protection is <2644>
pid[1] is on running 12345;
now public variable with lock protection is <2645>
pid[1] is on running 12345;
now public variable with lock protection is <2646>
pid[1] is on running 12345;
now public variable with lock protection is <2647>
pid[1] is on running 12345;
now public variable with lock protection is <2648>
pid[1] is on running 12345;
now public variable with lock protection is <2649>
pid[1] is on running 12345;
now public variable with lock protection is <2650>
pid[1] is on running 123pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
pid[2] is on running abcde;
now public variable with lock protection is <2651>
pid[2] is on running abcde;
now public variable with lock protection is <2652>
pid[2] is on running abcde;
now public variable with lock protection is <2653>
pid[2] is on running abcde;
now public variable with lock protection is <2654>
pid[2] is on running abcde;
now public variable with lock protection is <2655>
pid[2] is on running abcde;
now public variable with lock protection is <2656>
pid[2] is on running abcde;
now public variable with lock protection is <2657>
pid[2] is on running abcde;
now public variable with lock protection is <2658>
pid[2] is on running abcde;
now public variable with lock protection is <2659>
pid[2] is on running abcde;
now public variable with lock protection is <2660>
pid[2] is on running abcde;
npid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
otection is <2640>
pid[3] is on running !@#$^;
now public variable with lock protection is <2662>
pid[3] is on running !@#$^;
now public variable with lock protection is <2663>
pid[3] is on running !@#$^;
now public variable with lock protection is <2664>
pid[3] is on running !@#$^;
now public variable with lock protection is <2665>
pid[3] is on running !@#$^;
now public variable with lock protection is <2666>
pid[3] is on running !@#$^;
now public variable with lock protection is <2667>
pid[3] is on running !@#$^;
now public variable with lock protection is <2668>
pid[3] is on running !@#$^;
now public variable with lock protection is <2669>
pid[3] is on running !@#$^;
now publipid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
45;
now public variable with lock protection is <2671>
pid[1] is on running 12345;
now public variable with lock protection is <2672>
pid[1] is on running 12345;
now public variable with lock protection is <2673>
pid[1] is on running 12345;
now public variable with lock protection is <2674>
pid[1] is on running 12345;
now public variable with lock protection is <2675>
pid[1] is on running 12345;
now public variable with lock protection is <2676>
pid[1] is on running 12345;
now public variable with lock protection is <2677>
pid[1] is on running 12345;
now public variable with lock protection is <2678>
pid[1] is on running 12345;
now public variable with lock protection is <2679>
pid[1] is on running 12345;
now public variable with lock protecpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ow public variable with lock protection is <2661>
pid[2] is on running abcde;
now public variable with lock protection is <2681>
pid[2] is on running abcde;
now public variable with lock protection is <2682>
pid[2] is on running abcde;
now public variable with lock protection is <2683>
pid[2] is on running abcde;
now public variable with lock protection is <2684>
pid[2] is on running abcde;
now public variable with lock protection is <2685>
pid[2] is on running abcde;
now public variable with lock protection is <2686>
pid[2] is on running abcde;
now public variable with lock protection is <2687>
pid[2] is on running abcde;
now public variable with lock protection is <2688>
pid[2] is on running abcde;
now public variable with lock protection is <2689>
pid[2] is on running abcde;
now public variable with lock protection is <2690>
pid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
c variable with lock protection is <2670>
pid[3] is on running !@#$^;
now public variable with lock protection is <2691>
pid[3] is on running !@#$^;
now public variable with lock protection is <2692>
pid[3] is on running !@#$^;
now public variable with lock protection is <2693>
pid[3] is on running !@#$^;
now public variable with lock protection is <2694>
pid[3] is on running !@#$^;
now public variable with lock protection is <2695>
pid[3] is on running !@#$^;
now public variable with lock protection is <2696>
pid[3] is on running !@#$^;
now public variable with lock protection is <2697>
pid[3] is on running !@#$^;
now public variable with lock protection is <2698>
pid[3] is on running !@#$^;
now public variable with lock protection is <2699>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
tion is <2680>
pid[1] is on running 12345;
now public variable with lock protection is <2701>
pid[1] is on running 12345;
now public variable with lock protection is <2702>
pid[1] is on running 12345;
now public variable with lock protection is <2703>
pid[1] is on running 12345;
now public variable with lock protection is <2704>
pid[1] is on running 12345;
now public variable with lock protection is <2705>
pid[1] is on running 12345;
now public variable with lock protection is <2706>
pid[1] is on running 12345;
now public variable with lock protection is <2707>
pid[1] is on running 12345;
now public variable with lock protection is <2708>
pid[1] is on running 12345;
now public variable with lock protection is <2709>
pid[1] is on running 12345;
now public variable with lock protection is <2710>
pid[1] is on running 12345;
pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
pid[2] is on running abcde;
now public variable with lock protection is <2712>
pid[2] is on running abcde;
now public variable with lock protection is <2713>
pid[2] is on running abcde;
now public variable with lock protection is <2714>
pid[2] is on running abcde;
now public variable with lock protection is <2715>
pid[2] is on running abcde;
now public variable with lock protection is <2716>
pid[2] is on running abcde;
now public variable with lock protection is <2717>
pid[2] is on running abcde;
now public variable with lock protection is <2718>
pid[2] is on running abcde;
now public variable with lock protection is <2719>
pid[2] is on running abcde;
now public variable with lock protection is <2720>
pid[2] is on running abcde;
now public varipid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2721>
pid[3] is on running !@#$^;
now public variable with lock protection is <2722>
pid[3] is on running !@#$^;
now public variable with lock protection is <2723>
pid[3] is on running !@#$^;
now public variable with lock protection is <2724>
pid[3] is on running !@#$^;
now public variable with lock protection is <2725>
pid[3] is on running !@#$^;
now public variable with lock protection is <2726>
pid[3] is on running !@#$^;
now public variable with lock protection is <2727>
pid[3] is on running !@#$^;
now public variable with lock protection is <2728>
pid[3] is on running !@#$^;
now public variable with lock protection is <2729>
pid[3] is on running !@#$^;
now public variable with lock protection is <2730>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
now public variable with lock protection is <2731>
pid[1] is on running 12345;
now public variable with lock protection is <2732>
pid[1] is on running 12345;
now public variable with lock protection is <2733>
pid[1] is on running 12345;
now public variable with lock protection is <2734>
pid[1] is on running 12345;
now public variable with lock protection is <2735>
pid[1] is on running 12345;
now public variable with lock protection is <2736>
pid[1] is on running 12345;
now public variable with lock protection is <2737>
pid[1] is on running 12345;
now public variable with lock protection is <2738>
pid[1] is on running 12345;
now public variable with lock protection is <2739>
pid[1] is on running 12345;
now public variabpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
able with lock protection is <2721>
pid[2] is on running abcde;
now public variable with lock protection is <2741>
pid[2] is on running abcde;
now public variable with lock protection is <2742>
pid[2] is on running abcde;
now public variable with lock protection is <2743>
pid[2] is on running abcde;
now public variable with lock protection is <2744>
pid[2] is on running abcde;
now public variable with lock protection is <2745>
pid[2] is on running abcde;
now public variable with lock protection is <2746>
pid[2] is on running abcde;
now public variable with lock protection is <2747>
pid[2] is on running abcde;
now public variable with lock protection is <2748>
pid[2] is on running abcde;
now public variable with lock protection is <2749>
pid[2] is on running abcde;
now public variable with lock protpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
now public variable with lock protection is <2750>
pid[3] is on running !@#$^;
now public variable with lock protection is <2751>
pid[3] is on running !@#$^;
now public variable with lock protection is <2752>
pid[3] is on running !@#$^;
now public variable with lock protection is <2753>
pid[3] is on running !@#$^;
now public variable with lock protection is <2754>
pid[3] is on running !@#$^;
now public variable with lock protection is <2755>
pid[3] is on running !@#$^;
now public variable with lock protection is <2756>
pid[3] is on running !@#$^;
now public variable with lock protection is <2757>
pid[3] is on running !@#$^;
now public variable with lock protection is <2758>
pid[3] is on running !@#$^;
now public variable with lock protection is <2759>
pid[3] is on running !@#$^;
now public variable with lock protection is <2760>
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
le with lock protection is <2740>
pid[1] is on running 12345;
now public variable with lock protection is <2761>
pid[1] is on running 12345;
now public variable with lock protection is <2762>
pid[1] is on running 12345;
now public variable with lock protection is <2763>
pid[1] is on running 12345;
now public variable with lock protection is <2764>
pid[1] is on running 12345;
now public variable with lock protection is <2765>
pid[1] is on running 12345;
now public variable with lock protection is <2766>
pid[1] is on running 12345;
now public variable with lock protection is <2767>
pid[1] is on running 12345;
now public variable with lock protection is <2768>
pid[1] is on running 12345;
now public variable with lock protection is <2769>
pid[1] is on running 12345;
now public variable with lock protection is <2770>
pid[1] is on running pid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
ection is <2750>
pid[2] is on running abcde;
now public variable with lock protection is <2771>
pid[2] is on running abcde;
now public variable with lock protection is <2772>
pid[2] is on running abcde;
now public variable with lock protection is <2773>
pid[2] is on running abcde;
now public variable with lock protection is <2774>
pid[2] is on running abcde;
now public variable with lock protection is <2775>
pid[2] is on running abcde;
now public variable with lock protection is <2776>
pid[2] is on running abcde;
now public variable with lock protection is <2777>
pid[2] is on running abcde;
now public variable with lock protection is <2778>
pid[2] is on running abcde;
now public variable with lock protection is <2779>
pid[2] is on runninpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
pid[3] is on running !@#$^;
now public variable with lock protection is <2780>
pid[3] is on running !@#$^;
now public variable with lock protection is <2781>
pid[3] is on running !@#$^;
now public variable with lock protection is <2782>
pid[3] is on running !@#$^;
now public variable with lock protection is <2783>
pid[3] is on running !@#$^;
now public variable with lock protection is <2784>
pid[3] is on running !@#$^;
now public variable with lock protection is <2785>
pid[3] is on running !@#$^;
now public variable with lock protection is <2786>
pid[3] is on running !@#$^;
now public variable with lock protection is <2787>
pid[3] is on running !@#$^;
now public variable with lock protection is <2788>
pid[3] is on running !@#$^;
now public variable with lock protection is <2789>
pidpid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernpid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
12345;
now public variable with lock protection is <2790>
pid[1] is on running 12345;
now public variable with lock protection is <2791>
pid[1] is on running 12345;
now public variable with lock protection is <2792>
pid[1] is on running 12345;
now public variable with lock protection is <2793>
pid[1] is on running 12345;
now public variable with lock protection is <2794>
pid[1] is on running 12345;
now public variable with lock protection is <2795>
pid[1] is on running 12345;
now public variable with lock protection is <2796>
pid[1] is on running 12345;
now public variable with lock protection is <2797>
pid[1] is on running 12345;
now public variable with lock protection is <2798>
pid[1] is on running 12345;
now public variabpid 1 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[2]
====================
 last=0x8048000!!!!!!!!!!!!
g abcde;
now public variable with lock protection is <2800>
pid[2] is on running abcde;
now public variable with lock protection is <2801>
pid[2] is on running abcde;
now public variable with lock protection is <2802>
pid[2] is on running abcde;
now public variable with lock protection is <2803>
pid[2] is on running abcde;
now public variable with lock protection is <2804>
pid[2] is on running abcde;
now public variable with lock protection is <2805>
pid[2] is on running abcde;
now public variable with lock protection is <2806>
pid[2] is on running abcde;
now public variable with lock protection is <2807>
pid[2] is on running abcde;
now public variable with lock protection is <2808>
pid[2] is on running abcde;
now public variable with lock protection is <2809>
pid[2] is on running abcde;
now public variable with lock protection is <2810>
pidpid 2 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[3]
====================
 last=0x804a000!!!!!!!!!!!!
[3] is on running !@#$^;
now public variable with lock protection is <2811>
pid[3] is on running !@#$^;
now public variable with lock protection is <2812>
pid[3] is on running !@#$^;
now public variable with lock protection is <2813>
pid[3] is on running !@#$^;
now public variable with lock protection is <2814>
pid[3] is on running !@#$^;
now public variable with lock protection is <2815>
pid[3] is on running !@#$^;
now public variable with lock protection is <2816>
pid[3] is on running !@#$^;
now public variable with lock protection is <2817>
pid[3] is on running !@#$^;
now public variable with lock protection is <2818>
pid[3] is on running !@#$^;
now public variable with lock protection is <2819>
pid[3] is on running !@#$^;
pid 3 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[0]
====================
 last=0x804c000!!!!!!!!!!!!
el main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid[0],In kernel main thread now
pid 0 need sched out!

-----schedule start------

====================
ok,ready list will select next thread...
pick next pid[1]
====================
 last=0x8020d000!!!!!!!!!!!!
le with lock protection is <2799>
pid[1] is on running 12345;
now public variable with lock protection is <2820>
pid[1] is on running 12345;
now public variable with lock protection is <2821>
pid[1] is on running 12345;
now public variable with lock protection is <2822>
pid[1] is on running 12345;
now public variable with lock protection is <2823>
pid[1] is on running 12345;
now public variable with lock protection is <2824>
pid[1] is on running 12345;
now public variable with lock protection is <2825>
pid[1] is on running 12345;
now public variable with lock protection is <2826>
pid[1] is on running 12345;
now public variable with lock protection is <2827>
pid[1] is on running 12345;
now public variable with lock protection is <2828>
pid[1] is on running 12345;
now public variable with lock protectionpid 1 need schedQEMU: Terminated
