<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="mm_8h" kind="file" language="C++">
    <compoundname>mm.h</compoundname>
    <includes refid="pgable_8h" local="yes">pgable.h</includes>
    <includes refid="ptregs_8h" local="yes">ptregs.h</includes>
    <includes refid="stdbitmap_8h" local="yes">stdbitmap.h</includes>
    <includedby refid="pgable_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/pgable.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>pg_types.h</label>
        <link refid="pg__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
      <node id="2">
        <label>pgable.h</label>
        <link refid="pgable_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdbitmap.h</label>
        <link refid="stdbitmap_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/mm.h</label>
        <link refid="mm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ptregs.h</label>
        <link refid="ptregs_8h_source"/>
      </node>
      <node id="6">
        <label>pg_attr.h</label>
        <link refid="pg__attr_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/pgable.h</label>
        <link refid="pgable_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/mm.h</label>
        <link refid="mm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct____pool__t" prot="public">__pool_t</innerclass>
    <innerclass refid="struct____virtual__addr__t" prot="public">__virtual_addr_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="mm_8h_1a850d80ca2291d26b40dc6b25c419f81a" prot="public" static="no">
        <name>PAGE_SHIFT</name>
        <initializer>12</initializer>
        <briefdescription>
<para>页内偏移在虚拟地址中有12位 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="23" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1a61113da663120ff8a3e513f3fa77b74b" prot="public" static="no">
        <name>TABLE_SHIFT</name>
        <initializer>9</initializer>
        <briefdescription>
<para>一个页表的偏移在虚拟地址中9位偏移 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="29" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" prot="public" static="no">
        <name>PAGE_SIZE</name>
        <initializer>(1 &lt;&lt; <ref refid="mm_8h_1a850d80ca2291d26b40dc6b25c419f81a" kindref="member">PAGE_SHIFT</ref>)</initializer>
        <briefdescription>
<para>一个页的大小（2^12bit） </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="35" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1ae4aa620ce57c7c3171b916de2c5f09f2" prot="public" static="no">
        <name>PAGE_MASK</name>
        <initializer>(~(<ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>-1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="36" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1a573f7d87a906903bec10256e19a8bb14" prot="public" static="no">
        <name>PAGE_ALIGN</name>
        <param><defname>addr</defname></param>
        <initializer>(((addr)+<ref refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>-1)&amp;PAGE_MASK)</initializer>
        <briefdescription>
<para>将一个地址使用PAGE_MASK来进行地址对齐 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="44" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1a632f076bc583efc1a8c6ec395b5a16c5" prot="public" static="no">
        <name>PAGE_ALIGN_UP</name>
        <param><defname>addr</defname></param>
        <initializer><ref refid="mm_8h_1a573f7d87a906903bec10256e19a8bb14" kindref="member">PAGE_ALIGN</ref>(addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="45" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1a9c6658a67e8fe0f75b10a65026dcc339" prot="public" static="no">
        <name>PAGE_ALIGN_DOWN</name>
        <param><defname>addr</defname></param>
        <initializer>(addr &amp; PAGE_MASK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="46" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1afa9f78fa0aef0c17bc6cd364396b9758" prot="public" static="no">
        <name>PFN_DOWN</name>
        <param><defname>x</defname></param>
        <initializer>((x) &gt;&gt; <ref refid="mm_8h_1a850d80ca2291d26b40dc6b25c419f81a" kindref="member">PAGE_SHIFT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="48" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mm_8h_1a267933de1f2afc9011d648dba57ff988" prot="public" static="no">
        <name>K_HEAP_START</name>
        <initializer>0xC0100000</initializer>
        <briefdescription>
<para>定义一个虚拟内存空间的起始地址 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="54" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/mm.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mm_8h_1ab4e8bc202de3328ef1923785bfff3065" prot="public" static="no">
        <type>struct <ref refid="struct____pool__t" kindref="compound">__pool_t</ref></type>
        <definition>typedef struct __pool_t pool_t</definition>
        <argsstring></argsstring>
        <name>pool_t</name>
        <briefdescription>
<para>定义内存池的数据结构 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>包含 <linebreak/>
 pool_bitmap; 本内存池的位图，用于管理物理内存 phy_addr_start; 本内存池所管理的物理内存的起始地址 pool_size; 本内存池的字节容量 mutex_t mutex; 用于实现互斥访问内存池暂时没有实现 <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="121" column="8"/>
      </memberdef>
      <memberdef kind="typedef" id="mm_8h_1ae6d40484ded75529eb862b9cc832b98f" prot="public" static="no">
        <type>struct <ref refid="struct____virtual__addr__t" kindref="compound">__virtual_addr_t</ref></type>
        <definition>typedef struct __virtual_addr_t virtual_addr_t</definition>
        <argsstring></argsstring>
        <name>virtual_addr_t</name>
        <briefdescription>
<para>定义虚拟地址池的数据结构 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>包含 <linebreak/>
 vaddr_bitmap; 虚拟内存的位图 vaddr_start; 虚拟内存的起始的物理地址 <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="133" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mm_8h_1a0652f9c27490845217db5f3400a0f12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void paging_init</definition>
        <argsstring>(void)</argsstring>
        <name>paging_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>开启分页制度的初始化函数 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>该函数会 1：建立一个PGD页，然后将其清空 2：根据mem_init()统计得到的内存的信息在内存空间先建立三级页表 3：建立分页机制之后使能mmu模块 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="69" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1a1c9a66240fe216250e52d6b6e80dd798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enable_mmu_relocate</definition>
        <argsstring>(void)</argsstring>
        <name>enable_mmu_relocate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>开启三级分页SV39的使能函数 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>实现在kernel/mmu_enable中使用汇编语言实现 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="76" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1af5beb0578c75971eb353cd8a67e9c042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long get_free_page</definition>
        <argsstring>(void)</argsstring>
        <name>get_free_page</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>分配一个物理页 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>该函数会 1：扫描kernel的bitmap然后返回一个空闲的物理地址 2： 将bitmap相应位置设置为1 3：暂未使用🔒保护，因为互斥机制还未实现 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="86" column="15" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="86" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1a409722b58dcb786ea7ed28c9e2445912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_page</definition>
        <argsstring>(unsigned long p)</argsstring>
        <name>free_page</name>
        <param>
          <type>unsigned long</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>释放一个物理页 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>该函数会 1：根据输入的物理地址释放一个位 2：设置位图相应位为0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="95" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1a35c4527cff3f92290891f1b1defefd0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_init</definition>
        <argsstring>(unsigned long start_mem, unsigned long end_mem)</argsstring>
        <name>mem_init</name>
        <param>
          <type>unsigned long</type>
          <declname>start_mem</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>end_mem</declname>
        </param>
        <briefdescription>
<para>内存初始化函数，在其中实现了各种内存池的管理，位图的初始化，内存空间的统计等任务 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>该函数会： 1：根据初始内存管理地址start_mem，内存管理终止地址end_mem来统计内存大小，页数... 2: 初始化各种内存池以及位图 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="105" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1ad885b41f536f9dea88afcb34406fbbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __create_pgd_mapping</definition>
        <argsstring>(pgd_t *pgdir, unsigned long phys, unsigned long virt, unsigned long size, pgprot_t prot, unsigned long(*alloc_pgtable)(void), unsigned long flags)</argsstring>
        <name>__create_pgd_mapping</name>
        <param>
          <type><ref refid="structpgd__t" kindref="compound">pgd_t</ref> *</type>
          <declname>pgdir</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>phys</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>virt</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structpgprot__t" kindref="compound">pgprot_t</ref></type>
          <declname>prot</declname>
        </param>
        <param>
          <type>unsigned long(*)(void)</type>
          <declname>alloc_pgtable</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>PGD内存映射函数 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>该函数会： 1：输入的虚拟地址和物理地址还有要映射的内存大小填充PGD表项 2: 将一段物理内存映射到一个指定的虚拟地址范围内。具体实现是通过对虚拟地址进行对齐和分割，逐个处理每个PGD表项，并将其指向相应的PMD表项来实现对整个虚拟地址范围的映射。在映射的过程中，函数还会调用alloc_init_pmd()函数，为每个PMD表项分配并初始化一个物理页面。该函数的参数包括PGD表基地址、需要映射的物理地址、虚拟地址、大小、保护标志、分配函数、标志等。 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="144" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1aecfb3f0bcce40e78a581b9ea34be214b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_stage2_page_mapping</definition>
        <argsstring>(unsigned long gpa, unsigned long hpa, unsigned long size, pgprot_t prot)</argsstring>
        <name>set_stage2_page_mapping</name>
        <param>
          <type>unsigned long</type>
          <declname>gpa</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>hpa</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structpgprot__t" kindref="compound">pgprot_t</ref></type>
          <declname>prot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="150" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1ad3e379de9f5a1584f07a916fc7fec756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_stage2_pg_reg</definition>
        <argsstring>(void)</argsstring>
        <name>write_stage2_pg_reg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="151" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mm_8h_1a3c40388c467d2f7e9fd4572d13487209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stage2_page_fault</definition>
        <argsstring>(struct pt_regs *regs)</argsstring>
        <name>stage2_page_fault</name>
        <param>
          <type>struct <ref refid="structpt__regs" kindref="compound">pt_regs</ref> *</type>
          <declname>regs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/mm.h" line="152" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/mm.h" declline="152" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="mm_8h" kindref="compound">mm.h</ref></computeroutput>提供了一些内存管理需要的宏和函数. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Zhuir Xiao (<ulink url="mailto:xzr3356142450@gmail.com">xzr3356142450@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-26</para>
</simplesect>
<xrefsect id="todo_1_todo000001"><xreftitle>待办事项</xreftitle><xrefdescription><para><orderedlist>
<listitem><para>需要进行测试, 以测试函数正确性(已经在test_memory.c中完成)</para>
</listitem></orderedlist>
</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="warning"><para></para>
</simplesect>
<simplesect kind="copyright"><para>Copyright Zhuiri Xiao (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="16"><highlight class="preprocessor">#ifndef<sp/>_MM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_MM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="mm_8h_1a850d80ca2291d26b40dc6b25c419f81a" refkind="member"><highlight class="preprocessor">#define<sp/>PAGE_SHIFT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="mm_8h_1a61113da663120ff8a3e513f3fa77b74b" refkind="member"><highlight class="preprocessor">#define<sp/>TABLE_SHIFT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="mm_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" refkind="member"><highlight class="preprocessor">#define<sp/>PAGE_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>PAGE_SHIFT)<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAGE_MASK<sp/>(~(PAGE_SIZE-1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="mm_8h_1a573f7d87a906903bec10256e19a8bb14" refkind="member"><highlight class="preprocessor">#define<sp/>PAGE_ALIGN(addr)<sp/>(((addr)+PAGE_SIZE-1)&amp;PAGE_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAGE_ALIGN_UP(addr)<sp/><sp/>PAGE_ALIGN(addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAGE_ALIGN_DOWN(addr)<sp/>(addr<sp/>&amp;<sp/>PAGE_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PFN_DOWN(x)<sp/>((x)<sp/>&gt;&gt;<sp/>PAGE_SHIFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="mm_8h_1a267933de1f2afc9011d648dba57ff988" refkind="member"><highlight class="preprocessor">#define<sp/>K_HEAP_START<sp/>0xC0100000<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ASSEMBLER__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pgable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ptregs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdbitmap_8h" kindref="compound">stdbitmap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mm_8h_1a0652f9c27490845217db5f3400a0f12c" kindref="member">paging_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mm_8h_1a1c9a66240fe216250e52d6b6e80dd798" kindref="member">enable_mmu_relocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="mm_8h_1af5beb0578c75971eb353cd8a67e9c042" kindref="member">get_free_page</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mm_8h_1a409722b58dcb786ea7ed28c9e2445912" kindref="member">free_page</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>p);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mm_8h_1a35c4527cff3f92290891f1b1defefd0c" kindref="member">mem_init</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start_mem,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>end_mem);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="struct____pool__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct____pool__t" kindref="compound">__pool_t</ref><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct____bitmap__t" kindref="compound">bitmap_t</ref>*<sp/>pool_bitmap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>本内存池的位图，用于管理物理内存</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>phy_addr_start;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>本内存池所管理的物理内存的起始地址</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>pool_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>本内存池的字节容量</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mutex_t<sp/>mutex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//暂时没有实现<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>内存池是共享变量，申请内存时候要保证互斥</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/><ref refid="mm_8h_1ab4e8bc202de3328ef1923785bfff3065" kindref="member">pool_t</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="struct____virtual__addr__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct____virtual__addr__t" kindref="compound">__virtual_addr_t</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct____bitmap__t" kindref="compound">bitmap_t</ref>*<sp/>vaddr_bitmap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>虚拟内存的位图</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>vaddr_start;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>虚拟内存的起始的物理地址</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><ref refid="mm_8h_1ae6d40484ded75529eb862b9cc832b98f" kindref="member">virtual_addr_t</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mm_8h_1ad885b41f536f9dea88afcb34406fbbe9" kindref="member">__create_pgd_mapping</ref>(<ref refid="structpgd__t" kindref="compound">pgd_t</ref><sp/>*pgdir,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>phys,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>virt,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpgprot__t" kindref="compound">pgprot_t</ref><sp/>prot,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>(*alloc_pgtable)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_stage2_page_mapping(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gpa,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hpa,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="structpgprot__t" kindref="compound">pgprot_t</ref><sp/>prot);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_stage2_pg_reg(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stage2_page_fault(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpt__regs" kindref="compound">pt_regs</ref><sp/>*regs);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*_MM_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/mm.h"/>
  </compounddef>
</doxygen>
