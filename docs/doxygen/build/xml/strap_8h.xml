<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="strap_8h" kind="file" language="C++">
    <compoundname>strap.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includes refid="constrains_8h" local="yes">constrains.h</includes>
    <includes refid="trapframe_8h" local="yes">trap/trapframe.h</includes>
    <includes refid="trap__entry_8h" local="yes">trap/trap_entry.h</includes>
    <includedby refid="secall_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/sbi/secall.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>trap/trapframe.h</label>
        <link refid="trapframe_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>trap/trap_entry.h</label>
        <link refid="trap__entry_8h"/>
      </node>
      <node id="2">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/strap.h</label>
        <link refid="strap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/secall.h</label>
        <link refid="secall_8h"/>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/strap.h</label>
        <link refid="strap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="strap_8h_1a9a19fa750573209f5634e474b11a3ee3" prot="public" static="no">
        <type><ref refid="types_8h_1a312c7e8848187d110315ab83a7b3d4d0" kindref="member">int64_t</ref>(*</type>
        <definition>typedef int64_t(* strap_handler_t) (strapframe_t *stf_ptr)</definition>
        <argsstring>)(strapframe_t *stf_ptr)</argsstring>
        <name>strap_handler_t</name>
        <briefdescription>
<para><computeroutput>strap_handler_t</computeroutput>是异常/中断处理函数的函数类型, 函数原型为: <computeroutput>int64_t funcname(struct strapframe_t*)</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stf_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向被打断的程序的陷入帧, 程序的陷入帧将在<computeroutput>strap_enter</computeroutput>中构建在<computeroutput>M模式</computeroutput>的栈中</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>如果被打断的程序想要传参给异常/中断处理函数, 那么必须要通过寄存器来实现, 而所有的通用寄存器在<computeroutput>strap_enter</computeroutput>函数中会被保存到陷入帧中. 所以异常/中断处理函数必然可以通过陷入栈来获得被打断的程序传入的参数</para>
</simplesect>
<simplesect kind="note"><para>RISC-V通过<computeroutput>a0~a7</computeroutput>寄存器传参, 因此在<computeroutput>strap_enter</computeroutput>中要把<computeroutput>strapframe</computeroutput>的地址保存到<computeroutput>a0</computeroutput>寄存器中 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" line="30" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="strap_8h_1a7cd9fe16e6c323ee6338df4ff08d35a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void strap_init</definition>
        <argsstring>(void)</argsstring>
        <name>strap_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><computeroutput>strap_init</computeroutput>是<computeroutput>SBI</computeroutput>的异常/中断初始化函数 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" line="36" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="strap_8h_1aac87713a691e1d0ff3762661d66f7b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delegate_traps</definition>
        <argsstring>(void)</argsstring>
        <name>delegate_traps</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><computeroutput>delegate_traps</computeroutput>用于将<computeroutput>M模式</computeroutput>下的一些中断和异常委托至<computeroutput>S模式</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>目前将以下中断/异常进行了委托:<orderedlist>
<listitem><para>软件中断, 时钟中断, 外部中断</para>
</listitem><listitem><para>指令未对齐异常, 读取指令页异常, 读取数据页异常, 存储数据页异常, 读取数据异常, 存储数据异常, 断点异常, U模式下的ecall异常</para>
</listitem></orderedlist>
</para>
</simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>委托中断和异常本质上就是读写<computeroutput>mideleg</computeroutput>和<computeroutput>medeleg</computeroutput>寄存器. 这两个寄存器每一位对应一种中断/异常</para>
</listitem><listitem><para>设置<computeroutput>mideleg</computeroutput>和<computeroutput>medeleg</computeroutput>寄存器对应的位后, 对应的中断/异常发生后就会进入到<computeroutput>ktrap_enter</computeroutput>中</para>
</listitem><listitem><para>这两个寄存器每一位具体操作的是什么中断/异常, 参考RISC-V手册: 3.1.8 Machine Trap Delegation Registers (medeleg and mideleg) </para>
</listitem></orderedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" line="51" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="strap_8h_1adf9cc8a8a5e27e4814bf087b6958610d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void strap_dispatcher</definition>
        <argsstring>(strapframe_t *stf_ptr)</argsstring>
        <name>strap_dispatcher</name>
        <param>
          <type><ref refid="trapframe_8h_1ace23faaa1579bcc09327b838e4f18145" kindref="member">strapframe_t</ref> *</type>
          <declname>stf_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>strap_dispatcher</computeroutput>是通用异常/中断处理函数, 将会根据<computeroutput>mcause</computeroutput>寄存器的值运行不同的中断处理函数 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stf_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>保存被中断的程序上下文信息(所有通用寄存器和部分CSR寄存器)的陷入栈, 在<computeroutput>strap_enter</computeroutput>中构建 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" line="59" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="strap_8h_1a5654c6980aafe460d534d0bcc5c48348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void regitser_strap_handler</definition>
        <argsstring>(uint64_t trap_code, Bool interrupt, const char *msg, strap_handler_t strap_func)</argsstring>
        <name>regitser_strap_handler</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>trap_code</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref></type>
          <declname>interrupt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="strap_8h_1a9a19fa750573209f5634e474b11a3ee3" kindref="member">strap_handler_t</ref></type>
          <declname>strap_func</declname>
        </param>
        <briefdescription>
<para><computeroutput>regitser_strap_handler</computeroutput>是<computeroutput>SBI</computeroutput>异常/中断注册函数, 用于将编号为<computeroutput>trap_code</computeroutput>的异常/中断的处理函数<computeroutput>strap_func</computeroutput>注册到<computeroutput>SBI</computeroutput>的异常/中断处理函数表中 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trap_code</parametername>
</parameternamelist>
<parameterdescription>
<para>注册的中断/异常的编号 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interrupt</parametername>
</parameternamelist>
<parameterdescription>
<para>若为True, 则将处理函数注册为中断处理函数, 否则注册为异常处理函数 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>中断的相关信息 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strap_func</parametername>
</parameternamelist>
<parameterdescription>
<para>中断/异常处理函数, 需要为类型<computeroutput>strap_handler_t</computeroutput>, 即函数原型需要为<computeroutput>int64_t funcname(ireg_t mcause)</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" line="70" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="strap_8h_1a55448a7c09442246934cc61d542749a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a9bc43e3ee0ae83643b65e07fe1fd0132" kindref="member">NO_RETURN</ref> <ref refid="types_8h_1a312c7e8848187d110315ab83a7b3d4d0" kindref="member">int64_t</ref></type>
        <definition>NO_RETURN int64_t general_strap_handler</definition>
        <argsstring>(strapframe_t *stf_ptr)</argsstring>
        <name>general_strap_handler</name>
        <param>
          <type><ref refid="trapframe_8h_1ace23faaa1579bcc09327b838e4f18145" kindref="member">strapframe_t</ref> *</type>
          <declname>stf_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>general_strap_handler</computeroutput>是所有中断/异常的缺省处理函数, 将会在屏幕上输出中断/异常信息, 打印陷入帧, 而后挂起内核 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stf_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>保存被中断的程序上下文信息(所有通用寄存器和部分CSR寄存器)的陷入栈, 在<computeroutput>strap_enter</computeroutput>中构建 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NO_RETURN 该函数将挂起内核, 不会返回至内核继续运行 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" line="79" column="19" declfile="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h" declline="79" declcolumn="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="strap_8h" kindref="compound">strap.h</ref></computeroutput>是<computeroutput>SBI</computeroutput>的异常/中断管理模块 </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Shihong Wang (<ulink url="mailto:jack4shihong@gmail.com">jack4shihong@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-15</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright Shihong Wang (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_SBI_STRAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_SBI_STRAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constrains_8h" kindref="compound">constrains.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trapframe_8h" kindref="compound">trap/trapframe.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trap__entry_8h" kindref="compound">trap/trap_entry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="strap_8h_1a9a19fa750573209f5634e474b11a3ee3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a312c7e8848187d110315ab83a7b3d4d0" kindref="member">int64_t</ref><sp/>(*<ref refid="strap_8h_1a9a19fa750573209f5634e474b11a3ee3" kindref="member">strap_handler_t</ref>)(<ref refid="struct____strapframe__t" kindref="compound">strapframe_t</ref>*<sp/>stf_ptr);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="strap_8h_1a7cd9fe16e6c323ee6338df4ff08d35a0" kindref="member">strap_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="strap_8h_1aac87713a691e1d0ff3762661d66f7b2c" kindref="member">delegate_traps</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="strap_8h_1adf9cc8a8a5e27e4814bf087b6958610d" kindref="member">strap_dispatcher</ref>(<ref refid="struct____strapframe__t" kindref="compound">strapframe_t</ref><sp/>*stf_ptr);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="strap_8h_1a5654c6980aafe460d534d0bcc5c48348" kindref="member">regitser_strap_handler</ref>(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>trap_code,<sp/><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref><sp/>interrupt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg,<sp/><ref refid="strap_8h_1a9a19fa750573209f5634e474b11a3ee3" kindref="member">strap_handler_t</ref><sp/>strap_func);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="types_8h_1a9bc43e3ee0ae83643b65e07fe1fd0132" kindref="member">NO_RETURN</ref><sp/><ref refid="types_8h_1a312c7e8848187d110315ab83a7b3d4d0" kindref="member">int64_t</ref><sp/><ref refid="strap_8h_1a55448a7c09442246934cc61d542749a4" kindref="member">general_strap_handler</ref>(<ref refid="struct____strapframe__t" kindref="compound">strapframe_t</ref><sp/>*stf_ptr);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/sbi/strap.h"/>
  </compounddef>
</doxygen>
