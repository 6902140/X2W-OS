<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="assert_8h" kind="file" language="C++">
    <compoundname>assert.h</compoundname>
    <includes refid="constrains_8h" local="yes">constrains.h</includes>
    <includes refid="stdarg_8h" local="yes">stdarg.h</includes>
    <includes refid="stdfmt_8h" local="yes">stdfmt.h</includes>
    <includes refid="kstdio_8h" local="yes">kernel/kstdio.h</includes>
    <includes refid="ustdio_8h" local="yes">user/ustdio.h</includes>
    <includedby refid="kdebug_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/kernel/kdebug.h</includedby>
    <includedby refid="udebug_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/user/udebug.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>user/ustdio.h</label>
        <link refid="ustdio_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdarg.h</label>
        <link refid="stdarg_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>uart.h</label>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>kernel/kstdio.h</label>
        <link refid="kstdio_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
      <node id="7">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdfmt.h</label>
        <link refid="stdfmt_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kdebug.h</label>
        <link refid="kdebug_8h"/>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/data/proj/oskernel2023-x2w/include/user/udebug.h</label>
        <link refid="udebug_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="assert_8h_1a809610898d508036b3f9384bf902f9c4" prot="public" static="no">
        <name>ASSERT</name>
        <param><defname>CONDITION</defname></param>
        <param><defname>MSG</defname></param>
        <initializer>if (CONDITION) {} else {PANIC(#CONDITION, #MSG)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/assert.h" line="23" column="13" bodyfile="/home/data/proj/oskernel2023-x2w/include/assert.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1a8f54a1e3c548236aa6a60f4596699819" prot="public" static="no">
        <name>PANIC</name>
        <param><defname>...</defname></param>
        <initializer>panic_spin(__FILE__, __LINE__, __func__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/assert.h" line="28" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/assert.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="assert_8h_1a7892ad9f5465bd31cb56b823faa5131c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void panic_spin</definition>
        <argsstring>(char *filename, int line, const char *func, const char *condition, const char *msg,...)</argsstring>
        <name>panic_spin</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para><computeroutput>panic_spin</computeroutput>用于在输出错误信息, 而后挂起<computeroutput>CPU</computeroutput>, 停止运行 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>错误所在的文件 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>错误所在的行数 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>错误所在的函数 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>导致错误发生的条件 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>要输出的错误信息, 支持使用<computeroutput>stdfmt</computeroutput>中的格式控制字符 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>可变参数列表, 需要和错误信息中的格式控制字符匹配</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><computeroutput>panic_spin</computeroutput>会根据内核和用户态的不同而行为不同, 具体由<computeroutput>KERNEL_LIB</computeroutput>和<computeroutput>USER_LIB</computeroutput>两个宏控制 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/assert.h" line="42" column="20" bodyfile="/home/data/proj/oskernel2023-x2w/include/assert.h" bodystart="42" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_ASSERT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_ASSERT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constrains_8h" kindref="compound">constrains.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdarg_8h" kindref="compound">stdarg.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdfmt_8h" kindref="compound">stdfmt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kstdio_8h" kindref="compound">kernel/kstdio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ustdio_8h" kindref="compound">user/ustdio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ASSERT(CONDITION,<sp/>MSG)<sp/>if<sp/>(CONDITION)<sp/>{}<sp/>else<sp/>{PANIC(#CONDITION,<sp/>#MSG)}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ASSERT(CONDITION)<sp/>((void)<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PANIC(...)<sp/>panic_spin(__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>panic_spin(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>condition,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*msg,<sp/>...){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a186ea1339bffb378854987065835afe3" kindref="member">size_t</ref><sp/>(*printf)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>...);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>KERNEL_LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>=<sp/><ref refid="kstdio_8h_1a8af7bea272c9683c94ae833624e0a962" kindref="member">kprintf</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>USER_LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>=<sp/><ref refid="ustdio_8h_1a29d1eea05ba6186ffe5bfd859e283020" kindref="member">uprintf</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>需要在这里关中断</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;=====================<sp/>Error<sp/>Message<sp/>=====================%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Filename:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;At<sp/>line:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;In<sp/>Function:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>func);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Not<sp/>Met<sp/>Condition:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>condition);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Messages:%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[<ref refid="constrains_8h_1a9378dd52d6cbf1e8a87b58570fda75a6" kindref="member">PRINTF_STRING_SIZE</ref>]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" kindref="member">va_list</ref><sp/>args;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdarg_8h_1aab2fdb7b45868b2622028377c750dad9" kindref="member">va_start</ref>(args,<sp/>msg);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdfmt_8h_1a5d6013cf5c9d1311c9044f649a7d91cf" kindref="member">vsprintf</ref>(buf,<sp/>msg,<sp/>args);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(buf);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/assert.h"/>
  </compounddef>
</doxygen>
