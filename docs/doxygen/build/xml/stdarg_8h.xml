<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stdarg_8h" kind="file" language="C++">
    <compoundname>stdarg.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includedby refid="assert_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/assert.h</includedby>
    <includedby refid="stdfmt_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/stdfmt.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/stdarg.h</label>
        <link refid="stdarg_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>/home/data/proj/oskernel2023-x2w/include/user/ustdio.h</label>
        <link refid="ustdio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/stdarg.h</label>
        <link refid="stdarg_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/sstdio.h</label>
        <link refid="sstdio_8h"/>
      </node>
      <node id="3">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kdebug.h</label>
        <link refid="kdebug_8h"/>
      </node>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/assert.h</label>
        <link refid="assert_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kstdio.h</label>
        <link refid="kstdio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/data/proj/oskernel2023-x2w/include/stdfmt.h</label>
        <link refid="stdfmt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/data/proj/oskernel2023-x2w/include/user/udebug.h</label>
        <link refid="udebug_8h"/>
      </node>
      <node id="9">
        <label>/home/data/proj/oskernel2023-x2w/include/test/test_stdfmt.h</label>
        <link refid="test__stdfmt_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stdarg_8h_1aab2fdb7b45868b2622028377c750dad9" prot="public" static="no">
        <name>va_start</name>
        <param><defname>ap</defname></param>
        <param><defname>v</defname></param>
        <initializer>__builtin_va_start(ap, v)</initializer>
        <briefdescription>
<para><computeroutput>va_start</computeroutput>用于将参数指针<computeroutput>ap</computeroutput>(argument pointer)指向第一个固定参数<computeroutput>v</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>使用<computeroutput>GCC</computeroutput>内建的<computeroutput>__builtin_va_start</computeroutput>作为将变参列表指向变参列表的的第一个参数 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="41" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stdarg_8h_1afeb46f660b756eb161fb4aa8969925c7" prot="public" static="no">
        <name>va_arg</name>
        <param><defname>ap</defname></param>
        <param><defname>t</defname></param>
        <initializer>__builtin_va_arg(ap, t)</initializer>
        <briefdescription>
<para><computeroutput>va_arg</computeroutput>用于将参数指针<computeroutput>ap</computeroutput>(argument pointer)指向栈中下一个类型为<computeroutput>t</computeroutput>的参数. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>关于类型t, 需要注意的是:<orderedlist>
<listitem><para>默认传入的最小单位是int, 因此char的调用方式为: <computeroutput>char varg_char = (unsigned char) <ref refid="stdarg_8h_1afeb46f660b756eb161fb4aa8969925c7" kindref="member">va_arg(ap, int)</ref></computeroutput></para>
</listitem></orderedlist>
</para>
</simplesect>
<simplesect kind="note"><para>使用<computeroutput>GCC</computeroutput>内建的<computeroutput>__builtin_va_arg</computeroutput>作为将变参列表指向下一个类型为<computeroutput>t</computeroutput>的参数 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="51" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stdarg_8h_1acd9b3b9085ec072324c5fdac2b40304e" prot="public" static="no">
        <name>va_end</name>
        <param><defname>ap</defname></param>
        <initializer>__builtin_va_end(ap)</initializer>
        <briefdescription>
<para><computeroutput>_my_va_end</computeroutput>用于清除参数指针<computeroutput>ap</computeroutput>(argument pointer) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>使用<computeroutput>GCC</computeroutput>内建的<computeroutput>__builtin_va_end</computeroutput>来清空变参列表 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="58" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stdarg_8h_1ae641e06b00550c111ccb048aafe0fc4b" prot="public" static="no">
        <name>_my_va_start</name>
        <param><defname>ap</defname></param>
        <param><defname>v</defname></param>
        <initializer>ap = (<ref refid="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" kindref="member">va_list</ref>) &amp;v</initializer>
        <briefdescription>
<para><computeroutput>_my_va_start</computeroutput>用于将参数指针<computeroutput>ap</computeroutput>(argument pointer)指向第一个固定参数<computeroutput>v</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>参数指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>函数的第一个参数</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>弃用</xreftitle><xrefdescription><para>自己写的<computeroutput>_my_va_list</computeroutput>只适用于<computeroutput>x86-32</computeroutput>, 因此已经弃用, 详细的原因参考文件的doc </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="80" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stdarg_8h_1a7b0f2a88c33d642ab5d0298f3c4b3035" prot="public" static="no">
        <name>_my_va_arg</name>
        <param><defname>ap</defname></param>
        <param><defname>t</defname></param>
        <initializer>*((t*)(ap += 8))</initializer>
        <briefdescription>
<para><computeroutput>_my_va_arg</computeroutput>用于将参数指针<computeroutput>ap</computeroutput>(argument pointer)指向栈中下一个类型为<computeroutput>t</computeroutput>的参数. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>参数指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>下一个参数的类型</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>由于是<computeroutput>64位</computeroutput>机器, 因此每次参数指针<computeroutput>ap</computeroutput>向后(高地址)增加8个字节</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>弃用</xreftitle><xrefdescription><para>自己写的<computeroutput>_my_va_arg</computeroutput>只适用于<computeroutput>x86-32</computeroutput>, 因此已经弃用, 详细的原因参考文件的doc </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="92" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stdarg_8h_1af6468ba7e0b5727b681dd3905208872d" prot="public" static="no">
        <name>_my_va_end</name>
        <param><defname>ap</defname></param>
        <initializer>ap = <ref refid="types_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
<para><computeroutput>_my_va_end</computeroutput>用于清除参数指针<computeroutput>ap</computeroutput>(argument pointer) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>参数指针</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000004"><xreftitle>弃用</xreftitle><xrefdescription><para>自己写的<computeroutput>_my_va_end</computeroutput>只适用于<computeroutput>x86-32</computeroutput>, 因此已经弃用, 详细的原因参考文件的doc </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="101" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" prot="public" static="no">
        <type>__builtin_va_list</type>
        <definition>typedef __builtin_va_list va_list</definition>
        <argsstring></argsstring>
        <name>va_list</name>
        <briefdescription>
<para>变参列表类型, 本质就是一个指针, 因此也称为参数指针, 原理参考<computeroutput>GCC</computeroutput>编译器的传参原理 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>使用<computeroutput>GCC</computeroutput>内建的<computeroutput>__builtin_va_list</computeroutput>作为变参列表类型 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="34" column="27" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stdarg_8h_1a7606ba07f197c44b4185b4ce441e0d76" prot="public" static="no">
        <type>char *</type>
        <definition>typedef char* _my_va_list</definition>
        <argsstring></argsstring>
        <name>_my_va_list</name>
        <briefdescription>
<para>变参宏以字节形式处理在栈中的函数参数, 因此变参列表<computeroutput>_my_va_list</computeroutput>的本质就是字节 </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>弃用</xreftitle><xrefdescription><para>自己写的<computeroutput>_my_va_list</computeroutput>只适用于<computeroutput>x86-32</computeroutput>, 因此已经弃用, 详细的原因参考文件的doc </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h" line="69" column="14" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdarg.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput>stdargs.h</computeroutput>提供了自定义的变参函数支持 </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Shihong Wang (<ulink url="mailto:jack4shihong@gmail.com">jack4shihong@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.2 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-09</para>
</simplesect>
<simplesect kind="note"><para>deprecated, 原因见下. <computeroutput>GCC</computeroutput>调用时函数时通过栈传参, 因此参数在函数调用栈帧中依次排列. 所以变参宏的本质就是以字节的形式处理在栈中的依次排列的函数参数.</para>
</simplesect>
<simplesect kind="warning"><para>自己原先写的<computeroutput>stdargs</computeroutput>有BUG, 因为:<orderedlist>
<listitem><para><computeroutput>x86-32</computeroutput> 是全部通过栈传参</para>
</listitem><listitem><para><computeroutput>RISC-V LP64</computeroutput>的abi不是按照栈传参的, 先用寄存器再用栈, 所以如果要自己实现的话, 需要操作寄存器和栈 所以为了屏蔽不同的体系结构的<computeroutput>ABI</computeroutput>的差异, <computeroutput>GCC</computeroutput>使用了内建的<computeroutput>__builtin_va_list</computeroutput>, <computeroutput>__builtin_va_start()</computeroutput>和 <computeroutput>__builtin_va_end()</computeroutput> 因此如果需要自己实现<computeroutput>RISV-C</computeroutput>的<computeroutput>stdargs.h</computeroutput>的话, 就得参考GCC源码中的<computeroutput>__builtin_va_list</computeroutput>, <computeroutput>__builtin_va_start()</computeroutput>和 <computeroutput>__builtin_va_end()</computeroutput>的<computeroutput>RISC-V</computeroutput>部分的实现 所以综合考虑, 还是直接需要使用<computeroutput>GCC</computeroutput>内建的 <computeroutput>__builtin_va_list</computeroutput>, <computeroutput>__builtin_va_start()</computeroutput>和 <computeroutput>__builtin_va_end()</computeroutput>算了</para>
</listitem></orderedlist>
</para>
</simplesect>
<simplesect kind="warning"><para>所有我自己写的<computeroutput>stdargs.h</computeroutput>适用于<computeroutput>x86-32</computeroutput>, 已经全部加上了<computeroutput>_my_</computeroutput>的前缀</para>
</simplesect>
<simplesect kind="note"><para>参考: &lt;path-to-riscv-gnu-toolchain-installation-path&gt;/lib/gcc/riscv64-unknown-elf/12.2.0/include/stdarg.h</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright Shihong Wang (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_STRARG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_STRARG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__builtin_va_list<sp/><ref refid="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" kindref="member">va_list</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="stdarg_8h_1aab2fdb7b45868b2622028377c750dad9" refkind="member"><highlight class="preprocessor">#define<sp/>va_start(ap,<sp/>v)<sp/>__builtin_va_start(ap,<sp/>v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="stdarg_8h_1afeb46f660b756eb161fb4aa8969925c7" refkind="member"><highlight class="preprocessor">#define<sp/>va_arg(ap,<sp/>t)<sp/><sp/><sp/>__builtin_va_arg(ap,<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="stdarg_8h_1acd9b3b9085ec072324c5fdac2b40304e" refkind="member"><highlight class="preprocessor">#define<sp/>va_end(ap)<sp/><sp/>__builtin_va_end(ap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>已经弃用的实现<sp/>--------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="stdarg_8h_1a7606ba07f197c44b4185b4ce441e0d76" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="stdarg_8h_1a7606ba07f197c44b4185b4ce441e0d76" kindref="member">_my_va_list</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="stdarg_8h_1ae641e06b00550c111ccb048aafe0fc4b" refkind="member"><highlight class="preprocessor">#define<sp/>_my_va_start(ap,<sp/>v)<sp/>ap<sp/>=<sp/>(va_list)<sp/>&amp;v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="stdarg_8h_1a7b0f2a88c33d642ab5d0298f3c4b3035" refkind="member"><highlight class="preprocessor">#define<sp/>_my_va_arg(ap,<sp/>t)<sp/>*((t*)(ap<sp/>+=<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="stdarg_8h_1af6468ba7e0b5727b681dd3905208872d" refkind="member"><highlight class="preprocessor">#define<sp/>_my_va_end(ap)<sp/>ap<sp/>=<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/stdarg.h"/>
  </compounddef>
</doxygen>
