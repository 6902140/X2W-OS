<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stdfmt_8h" kind="file" language="C++">
    <compoundname>stdfmt.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includes refid="stdarg_8h" local="yes">stdarg.h</includes>
    <includes refid="string_8h" local="yes">string.h</includes>
    <includes refid="stdlib_8h" local="yes">stdlib.h</includes>
    <includedby refid="assert_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/assert.h</includedby>
    <includedby refid="kstdio_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/kernel/kstdio.h</includedby>
    <includedby refid="ustdio_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/user/ustdio.h</includedby>
    <includedby refid="sstdio_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/sbi/sstdio.h</includedby>
    <includedby refid="test__stdfmt_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/test/test_stdfmt.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdarg.h</label>
        <link refid="stdarg_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
      <node id="6">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/stdfmt.h</label>
        <link refid="stdfmt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>/home/data/proj/oskernel2023-x2w/include/user/ustdio.h</label>
        <link refid="ustdio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/sstdio.h</label>
        <link refid="sstdio_8h"/>
      </node>
      <node id="3">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kdebug.h</label>
        <link refid="kdebug_8h"/>
      </node>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/assert.h</label>
        <link refid="assert_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kstdio.h</label>
        <link refid="kstdio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/stdfmt.h</label>
        <link refid="stdfmt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/data/proj/oskernel2023-x2w/include/user/udebug.h</label>
        <link refid="udebug_8h"/>
      </node>
      <node id="8">
        <label>/home/data/proj/oskernel2023-x2w/include/test/test_stdfmt.h</label>
        <link refid="test__stdfmt_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stdfmt_8h_1aa318f0a68f8472c9fe524059ee464872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* _scan_number</definition>
        <argsstring>(const char *str, int *num)</argsstring>
        <name>_scan_number</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para><computeroutput>_scan_number</computeroutput>用于将存储在<computeroutput>str</computeroutput>中的字符串数字转换为<computeroutput>int</computeroutput>数字并存入<computeroutput>num</computeroutput>中 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>字符串形式的数字 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>转换后的数字将存入<computeroutput>num</computeroutput>中 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* str第一个非字符数字</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>_scan_number</computeroutput>将在第一个非字符数字前停下, 即:<itemizedlist>
<listitem><para>若<computeroutput>str = &quot;123TEST&quot;</computeroutput>, 则运行后<lsquo/>num = 123, *return = &apos;T<rsquo/><computeroutput></computeroutput></para>
</listitem><listitem><para><computeroutput>若</computeroutput>str = &quot;12EST456&quot;<computeroutput>, 则运行后</computeroutput>num = 12, *return = &apos;E&apos;<computeroutput></computeroutput></para>
</listitem><listitem><para><computeroutput>若</computeroutput>str = &quot;ST456&quot;<computeroutput>, 则运行后</computeroutput>num = 0, *return = &apos;S&apos;` </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" line="32" column="12" declfile="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stdfmt_8h_1a516ca7acae514264e2d3aae09cd33558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* copy_number</definition>
        <argsstring>(char *str, unsigned long num, int base, int width, int precision, int flag)</argsstring>
        <name>copy_number</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para><computeroutput>copy_number</computeroutput>用于将整形的数字<computeroutput>num</computeroutput>按照指定进制<computeroutput>base</computeroutput>转换为字符串数字, 而后按照指定的宽度<computeroutput>width</computeroutput>和精度<computeroutput>precision</computeroutput>复制到<computeroutput>str</computeroutput>中去 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>输出字符数组 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>整形数字 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>进制 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>对齐宽度 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>输出位数 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>格式控制字符 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* 复制后str的位置 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" line="45" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdfmt_8h_1a5d6013cf5c9d1311c9044f649a7d91cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a186ea1339bffb378854987065835afe3" kindref="member">size_t</ref></type>
        <definition>size_t vsprintf</definition>
        <argsstring>(char *str, const char *format, va_list ap)</argsstring>
        <name>vsprintf</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" kindref="member">va_list</ref></type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para><computeroutput>vsprintf</computeroutput>按照<computeroutput>format</computeroutput>中指定的格式将<computeroutput>ap</computeroutput>指向的可变参数列表的值复制到<computeroutput>str</computeroutput>中 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>接受输出的字符数组 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>含格式控制字符的字符串. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>可变参数列表 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t 处理后的字符串(str)的长度</para>
</simplesect>
<simplesect kind="note"><para>格式控制字符: <computeroutput>%[flag][width][precision][length]&lt;type&gt;</computeroutput>. 其中:<itemizedlist>
<listitem><para><computeroutput>type</computeroutput>字段必须存在, 其余字段均可选</para>
</listitem></itemizedlist>
</para>
</simplesect>
关于各个字段的说明:<itemizedlist>
<listitem><para><computeroutput>flag</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>-</computeroutput>: 左对齐输出, 默认是右对齐</para>
</listitem><listitem><para><computeroutput>+</computeroutput>: 输出正数前添加加号, 默认不添加</para>
</listitem><listitem><para><computeroutput>#</computeroutput>: 当<computeroutput>type</computeroutput>为<computeroutput>b</computeroutput>, <computeroutput>o</computeroutput>, <computeroutput>x</computeroutput>, <computeroutput>X</computeroutput>时, 添加前缀<computeroutput>0b</computeroutput>, <computeroutput>0</computeroutput>或者<computeroutput>0x</computeroutput></para>
</listitem><listitem><para><computeroutput>0</computeroutput>: 使用<computeroutput>0</computeroutput>填充对齐, 默认使用空格填充对齐</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>width</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>数字</computeroutput>: 设置对齐的宽度, 例如: <computeroutput>printf(&quot;%5d&quot;, 100)</computeroutput> 将会输出 <computeroutput>100</computeroutput></para>
</listitem><listitem><para><computeroutput>*:</computeroutput> 动态参数, 由后续的数字指定, 例如: <computeroutput>printf(&quot;%*d&quot;, 5, 10)</computeroutput> 等价于 printf(&quot;%5d&quot;, 10)<computeroutput> -</computeroutput>precision<computeroutput>字段: -</computeroutput>.数字<computeroutput>: 设置输出的位数, 例如:</computeroutput>printf(&quot;%.2d&quot;, 111)<computeroutput>将会输出</computeroutput>11<computeroutput> -</computeroutput>.*<computeroutput>: 动态参数, 由后续的数字指定, 例如:</computeroutput>printf(&quot;%.*d&quot;, 2, 111)<computeroutput>等价于 printf(&quot;%.2d&quot;, 111)</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>length</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>h</computeroutput>: 输出一个16位宽度的整数, 即: <computeroutput>short</computeroutput>, <computeroutput>unsigned short</computeroutput>, <computeroutput>int16_t</computeroutput>, <computeroutput>uint16_t</computeroutput></para>
</listitem><listitem><para><computeroutput>l</computeroutput>: 输出一个64位宽度的整数, 即: <computeroutput>long</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput></para>
</listitem><listitem><para><computeroutput>ll</computeroutput>: 输出一个64位宽度的整数, 即: <computeroutput>long long</computeroutput>, <computeroutput>unsigned long long</computeroutput></para>
</listitem><listitem><para>PS: RISC-V LP64中long long和long都是64位</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>type</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>%</computeroutput>: 输出一个<computeroutput>%</computeroutput></para>
</listitem><listitem><para><computeroutput>p</computeroutput>: 输出一个指针, 需要转换为(void*)</para>
</listitem><listitem><para><computeroutput>c</computeroutput>: 输出一个字符</para>
</listitem><listitem><para><computeroutput>s</computeroutput>: 输出一个<computeroutput>\0</computeroutput>结尾的字符串</para>
</listitem><listitem><para><computeroutput>b</computeroutput>: 以二进制输出一个整数, 无符号</para>
</listitem><listitem><para><computeroutput>o</computeroutput>: 以八进制输出一个整数, 无符号</para>
</listitem><listitem><para><computeroutput>i</computeroutput>: 以十进制输出一个整数, 有符号</para>
</listitem><listitem><para><computeroutput>d</computeroutput>: 以十进制输出一个整数, 有符号</para>
</listitem><listitem><para><computeroutput>u</computeroutput>: 以十进制输出一个整数, 无符号</para>
</listitem><listitem><para><computeroutput>x</computeroutput>: 以十六进制输出一个整数, 小写字母, 无符号</para>
</listitem><listitem><para><computeroutput>X</computeroutput>: 以十六进制输出一个整数, 大写字母, 无符号</para>
</listitem><listitem><para><computeroutput>n</computeroutput>: 到此处已经输出的字符的数量, 不会输出文本, 而是将值保存到地址中. 参考: <ulink url="https://blog.csdn.net/zsx0728/article/details/118100389">https://blog.csdn.net/zsx0728/article/details/118100389</ulink> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" line="91" column="8" declfile="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" declline="91" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="stdfmt_8h_1adfa2019cc501e5783a7476645ca0bcdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a186ea1339bffb378854987065835afe3" kindref="member">size_t</ref></type>
        <definition>size_t sprintf</definition>
        <argsstring>(char *buf, const char *format,...)</argsstring>
        <name>sprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para><computeroutput>sprintf</computeroutput>将格式字符串<computeroutput>format</computeroutput>的格式控制字符替换为可变参数并输出到<computeroutput>buf</computeroutput>中 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>接受输出的字符数组 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>含格式控制字符的格式字符串 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>可变参数列表 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t 输出到buf字符数组中的字符个数</para>
</simplesect>
<simplesect kind="note"><para>格式控制字符: <computeroutput>%[flag][width][precision][length]&lt;type&gt;</computeroutput>. 其中:<itemizedlist>
<listitem><para><computeroutput>type</computeroutput>字段必须存在, 其余字段均可选</para>
</listitem></itemizedlist>
</para>
</simplesect>
关于各个字段的说明:<itemizedlist>
<listitem><para><computeroutput>flag</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>-</computeroutput>: 左对齐输出, 默认是右对齐</para>
</listitem><listitem><para><computeroutput>+</computeroutput>: 输出正数前添加加号, 默认不添加</para>
</listitem><listitem><para><computeroutput>#</computeroutput>: 当<computeroutput>type</computeroutput>为<computeroutput>b</computeroutput>, <computeroutput>o</computeroutput>, <computeroutput>x</computeroutput>, <computeroutput>X</computeroutput>时, 添加前缀<computeroutput>0b</computeroutput>, <computeroutput>0</computeroutput>或者<computeroutput>0x</computeroutput></para>
</listitem><listitem><para><computeroutput>0</computeroutput>: 使用<computeroutput>0</computeroutput>填充对齐, 默认使用空格填充对齐</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>width</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>数字</computeroutput>: 设置对齐的宽度, 例如: <computeroutput>printf(&quot;%5d&quot;, 100)</computeroutput> 将会输出 <computeroutput>100</computeroutput></para>
</listitem><listitem><para><computeroutput>*:</computeroutput> 动态参数, 由后续的数字指定, 例如: <computeroutput>printf(&quot;%*d&quot;, 5, 10)</computeroutput> 等价于 printf(&quot;%5d&quot;, 10)<computeroutput> -</computeroutput>precision<computeroutput>字段: -</computeroutput>.数字<computeroutput>: 设置输出的位数, 例如:</computeroutput>printf(&quot;%.2d&quot;, 111)<computeroutput>将会输出</computeroutput>11<computeroutput> -</computeroutput>.*<computeroutput>: 动态参数, 由后续的数字指定, 例如:</computeroutput>printf(&quot;%.*d&quot;, 2, 111)<computeroutput>等价于 printf(&quot;%.2d&quot;, 111)</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>length</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>h</computeroutput>: 输出一个16位宽度的整数, 即: <computeroutput>short</computeroutput>, <computeroutput>unsigned short</computeroutput>, <computeroutput>int16_t</computeroutput>, <computeroutput>uint16_t</computeroutput></para>
</listitem><listitem><para><computeroutput>l</computeroutput>: 输出一个64位宽度的整数, 即: <computeroutput>long</computeroutput>, <computeroutput>unsigned long</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput></para>
</listitem><listitem><para><computeroutput>ll</computeroutput>: 输出一个64位宽度的整数, 即: <computeroutput>long long</computeroutput>, <computeroutput>unsigned long long</computeroutput></para>
</listitem><listitem><para>PS: RISC-V LP64中long long和long都是64位</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>type</computeroutput>字段:<itemizedlist>
<listitem><para><computeroutput>%</computeroutput>: 输出一个<computeroutput>%</computeroutput></para>
</listitem><listitem><para><computeroutput>p</computeroutput>: 输出一个指针, 需要转换为(void*)</para>
</listitem><listitem><para><computeroutput>c</computeroutput>: 输出一个字符</para>
</listitem><listitem><para><computeroutput>s</computeroutput>: 输出一个<computeroutput>\0</computeroutput>结尾的字符串</para>
</listitem><listitem><para><computeroutput>b</computeroutput>: 以二进制输出一个整数, 无符号</para>
</listitem><listitem><para><computeroutput>o</computeroutput>: 以八进制输出一个整数, 无符号</para>
</listitem><listitem><para><computeroutput>i</computeroutput>: 以十进制输出一个整数, 有符号</para>
</listitem><listitem><para><computeroutput>d</computeroutput>: 以十进制输出一个整数, 有符号</para>
</listitem><listitem><para><computeroutput>u</computeroutput>: 以十进制输出一个整数, 无符号</para>
</listitem><listitem><para><computeroutput>x</computeroutput>: 以十六进制输出一个整数, 小写字母, 无符号</para>
</listitem><listitem><para><computeroutput>X</computeroutput>: 以十六进制输出一个整数, 大写字母, 无符号</para>
</listitem><listitem><para><computeroutput>n</computeroutput>: 到此处已经输出的字符的数量, 不会输出文本, 而是将值保存到地址中. 参考: <ulink url="https://blog.csdn.net/zsx0728/article/details/118100389">https://blog.csdn.net/zsx0728/article/details/118100389</ulink> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" line="136" column="8" declfile="/home/data/proj/oskernel2023-x2w/include/stdfmt.h" declline="136" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="stdfmt_8h" kindref="compound">stdfmt.h</ref></computeroutput>提供了格式化函数 </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Shihong Wang (<ulink url="mailto:jack4shihong@gmail.com">jack4shihong@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.2 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-09</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright Shihong Wang (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_STDFMT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_STDFMT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdarg_8h" kindref="compound">stdarg.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_8h" kindref="compound">string.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdlib_8h" kindref="compound">stdlib.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="stdfmt_8h_1aa318f0a68f8472c9fe524059ee464872" kindref="member">_scan_number</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="stdfmt_8h_1a516ca7acae514264e2d3aae09cd33558" kindref="member">copy_number</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stdfmt_8h_1a5d6013cf5c9d1311c9044f649a7d91cf" kindref="member">vsprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/><ref refid="stdarg_8h_1af53f622e3b6c080daeb167c1955d7ec1" kindref="member">va_list</ref><sp/>ap);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stdfmt_8h_1adfa2019cc501e5783a7476645ca0bcdb" kindref="member">sprintf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/>...);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/stdfmt.h"/>
  </compounddef>
</doxygen>
