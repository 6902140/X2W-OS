<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="io_8h" kind="file" language="C++">
    <compoundname>io.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includes refid="constrains_8h" local="yes">constrains.h</includes>
    <includedby refid="uart_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/uart.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/io.h</label>
        <link refid="io_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/secall.h</label>
        <link refid="secall_8h"/>
      </node>
      <node id="9">
        <label>/home/data/proj/oskernel2023-x2w/include/sbi/sstdio.h</label>
        <link refid="sstdio_8h"/>
      </node>
      <node id="5">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kdebug.h</label>
        <link refid="kdebug_8h"/>
      </node>
      <node id="4">
        <label>/home/data/proj/oskernel2023-x2w/include/assert.h</label>
        <link refid="assert_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/io.h</label>
        <link refid="io_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kstdio.h</label>
        <link refid="kstdio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/uart.h</label>
        <link refid="uart_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/data/proj/oskernel2023-x2w/include/user/udebug.h</label>
        <link refid="udebug_8h"/>
      </node>
      <node id="7">
        <label>/home/data/proj/oskernel2023-x2w/include/kernel/kinit.h</label>
        <link refid="kinit_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="io_8h_1a3c3e456bfd6d0406bc6e20318da1760b" prot="public" static="no">
        <name>dmb</name>
        <param></param>
        <initializer>__asm__ __volatile__ (&quot;&quot; : : : &quot;memory&quot;)</initializer>
        <briefdescription>
<para><computeroutput>dmb</computeroutput>(<computeroutput>Define Memory Barrier</computeroutput>)定义了内存屏障(<computeroutput>Memory Barrier</computeroutput>) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>关于内存屏障, 参考:<itemizedlist>
<listitem><para><computeroutput>GCC</computeroutput>优化: <ulink url="https://www.cnblogs.com/nufangrensheng/p/3890856.html">https://www.cnblogs.com/nufangrensheng/p/3890856.html</ulink></para>
</listitem><listitem><para>内存屏障原理: <ulink url="https://stackoverflow.com/questions/14950614/working-of-asm-volatile-memory">https://stackoverflow.com/questions/14950614/working-of-asm-volatile-memory</ulink> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="100" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="io_8h_1aa2972611d217f2dd8bf17d8e5a9df24c" prot="public" static="no">
        <name>__iormb</name>
        <param></param>
        <initializer><ref refid="io_8h_1a3c3e456bfd6d0406bc6e20318da1760b" kindref="member">dmb</ref>()</initializer>
        <briefdescription>
<para><computeroutput>__iormb</computeroutput> 定义了读取寄存器的内存屏障 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="105" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="io_8h_1a76c5ac1cb98b83819b9cedd10ab863ca" prot="public" static="no">
        <name>__iowmb</name>
        <param></param>
        <initializer><ref refid="io_8h_1a3c3e456bfd6d0406bc6e20318da1760b" kindref="member">dmb</ref>()</initializer>
        <briefdescription>
<para><computeroutput>__iowmb</computeroutput> 定义了写入寄存器的内存屏障 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="110" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="io_8h_1a5c466414909380bc82d6d28e35193e7f" prot="public" static="no">
        <name>glue</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <param><defname>z</defname></param>
        <initializer>x ## _ ## y ## _ ## z</initializer>
        <briefdescription>
<para><computeroutput>glue</computeroutput>用于将符号<computeroutput>x</computeroutput>, <computeroutput>y</computeroutput>, <computeroutput>z</computeroutput>拼接为符号<computeroutput>x_y_z</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>第一个符号 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>第二个符号 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>第三个符号 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="119" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="io_8h_1ac2eaa508b61574c8081061907488e005" prot="public" static="no">
        <name>mkname</name>
        <param><defname>type</defname></param>
        <param><defname>width</defname></param>
        <initializer><ref refid="io_8h_1a5c466414909380bc82d6d28e35193e7f" kindref="member">glue</ref>(type, width, bits)</initializer>
        <briefdescription>
<para><computeroutput>mkname</computeroutput>用于方便的拼接得到函数名 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>读还是写寄存器, 只能是read或write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>读写的位数 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="127" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="io_8h_1a04306cf4d238a563ec6e862b546dc590" prot="public" static="no">
        <name>mkread</name>
        <param><defname>width</defname></param>
        <initializer>static inline uint##width##_t <ref refid="io_8h_1ac2eaa508b61574c8081061907488e005" kindref="member">mkname</ref>(read, width)(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref> addr){ \
    uint##width##_t __v = *(volatile uint##width##_t*)addr; \
    <ref refid="io_8h_1aa2972611d217f2dd8bf17d8e5a9df24c" kindref="member">__iormb</ref>(); \
    return __v; \
}</initializer>
        <briefdescription>
<para><computeroutput>mkread</computeroutput>用于生成读不同长度寄存器的函数 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>读取的位数</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>通常情况下，在内联汇编代码块的最后一条语句中将需要返回的值存储在一个特定的变量中，然后该变量将被作为代码块的返回值返回给调用者。在GCC扩展中，这个变量通常被命名为__v（两个下划线 + v），并且在代码块的最后一行写上__v;语句来表示将其作为返回值返回给调用者。 </para>
</simplesect>
<simplesect kind="note"><para>因为地址的值(寄存器的值)可能会被设备改变, 因此必须声明是volatile, 以避免GCC进行优化 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="137" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="io_8h_1a59e4e10887e0e4c54d738802bf969f1c" prot="public" static="no">
        <name>mkwrite</name>
        <param><defname>width</defname></param>
        <initializer>static inline void <ref refid="io_8h_1ac2eaa508b61574c8081061907488e005" kindref="member">mkname</ref>(write, width)(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref> addr, uint##width##_t value){ \
    uint##width##_t __v = value; \
    <ref refid="io_8h_1a76c5ac1cb98b83819b9cedd10ab863ca" kindref="member">__iowmb</ref>(); \
    *(volatile uint##width##_t*)addr = __v; \
}</initializer>
        <briefdescription>
<para><computeroutput>mkwrite</computeroutput>用于生成写不同长度寄存器的函数 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>写入的位数</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>因为地址的值(寄存器的值)可能会被设备改变, 因此必须声明是volatile, 以避免GCC进行优化 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="151" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/io.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="io_8h_1a18639e39bdfcb6762848ce1cfbfda178" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void write_8_bits</definition>
        <argsstring>(uint64_t addr, uint8_t value)</argsstring>
        <name>write_8_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><computeroutput>write_8_bits</computeroutput>向<computeroutput>addr</computeroutput>映射的寄存器写1个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>需要写入的数据, 1个字节 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="29" column="20" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="29" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1af2eed07cd896b7c3c278eaae94b3a3d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void write_16_bits</definition>
        <argsstring>(uint64_t addr, uint16_t value)</argsstring>
        <name>write_16_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a273cf69d639a59973b6019625df33e30" kindref="member">uint16_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><computeroutput>write_16_bits</computeroutput>向<computeroutput>addr</computeroutput>映射的寄存器写2个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>需要写入的数据, 2个字节 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="37" column="20" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="37" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1af7ff67b6e8e5a50f9e8681e2a6e6b37d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void write_32_bits</definition>
        <argsstring>(uint64_t addr, uint32_t value)</argsstring>
        <name>write_32_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><computeroutput>write_32_bits</computeroutput>向<computeroutput>addr</computeroutput>映射的寄存器写4个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>需要写入的数据, 4个字节 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="45" column="20" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="45" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a8cc27c4b245b4151270e7bcb175a2f3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void write_64_bits</definition>
        <argsstring>(uint64_t addr, uint64_t value)</argsstring>
        <name>write_64_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><computeroutput>write_64_bits</computeroutput>向<computeroutput>addr</computeroutput>映射的寄存器写8个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>需要写入的数据, 8个字节 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="53" column="20" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="53" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a42d854a1756d2f41414989d70a7e133c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref></type>
        <definition>static uint8_t read_8_bits</definition>
        <argsstring>(uint64_t addr)</argsstring>
        <name>read_8_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para><computeroutput>read_8_bits</computeroutput>从<computeroutput>addr</computeroutput>映射的寄存器读取1个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t 读取的数据 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="62" column="23" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="62" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a57dc0a0ba522db596e722ae4737a987b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8h_1a273cf69d639a59973b6019625df33e30" kindref="member">uint16_t</ref></type>
        <definition>static uint16_t read_16_bits</definition>
        <argsstring>(uint64_t addr)</argsstring>
        <name>read_16_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para><computeroutput>read_16_bits</computeroutput>从<computeroutput>addr</computeroutput>映射的寄存器读取2个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t 读取的数据 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="70" column="24" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="70" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a84a7582f0f2906a174b7b09e72aa9201" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t read_32_bits</definition>
        <argsstring>(uint64_t addr)</argsstring>
        <name>read_32_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para><computeroutput>read_32_bits</computeroutput>从<computeroutput>addr</computeroutput>映射的寄存器读取4个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t 读取的数据 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="79" column="24" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="79" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a16220d8c2bb2dd95396250d513e5587d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
        <definition>static uint64_t read_64_bits</definition>
        <argsstring>(uint64_t addr)</argsstring>
        <name>read_64_bits</name>
        <param>
          <type><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para><computeroutput>read_64_bits</computeroutput>从<computeroutput>addr</computeroutput>映射的寄存器读取8个字节的数据 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>寄存器映射的地址 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t 读取的数据 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="87" column="24" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="87" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1af5323b9c9edb836d4c9a0caf30b8755c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkread</definition>
        <argsstring>(8)</argsstring>
        <name>mkread</name>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="160" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="160" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1ae58e19d2fe95ee545850125e2cf044fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkread</definition>
        <argsstring>(16)</argsstring>
        <name>mkread</name>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="161" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="161" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a10c5fcbf785b7116785adce25a7eb59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkread</definition>
        <argsstring>(32)</argsstring>
        <name>mkread</name>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="162" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="162" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1ae19e962b9bf6616b46865283e6f13206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkread</definition>
        <argsstring>(64)</argsstring>
        <name>mkread</name>
        <param>
          <type>64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="163" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="163" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a7a4cd0abcc5f7d5123b60acc8d457684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkwrite</definition>
        <argsstring>(8)</argsstring>
        <name>mkwrite</name>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="165" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1ac199dfaa00c7aaeccf12f9657b3e76f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkwrite</definition>
        <argsstring>(16)</argsstring>
        <name>mkwrite</name>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="166" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1ae67e4a6176af3ef355f7c71884c46e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkwrite</definition>
        <argsstring>(32)</argsstring>
        <name>mkwrite</name>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="167" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="167" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="io_8h_1a3871a02099ba5ff1fe0de444078f6afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mkwrite</definition>
        <argsstring>(64)</argsstring>
        <name>mkwrite</name>
        <param>
          <type>64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/io.h" line="168" column="1" declfile="/home/data/proj/oskernel2023-x2w/include/io.h" declline="168" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="io_8h" kindref="compound">io.h</ref></computeroutput>中提供了<computeroutput>io</computeroutput>操作函数 </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Shihong Wang (<ulink url="mailto:jack4shihong@gmail.com">jack4shihong@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-09</para>
</simplesect>
<simplesect kind="note"><para><computeroutput>RISC-V</computeroutput>通过<computeroutput>Memory Mapping IO</computeroutput> (<computeroutput>MMIO</computeroutput>)的方式操作设备寄存器. 关于具体的<computeroutput>MMIO Map</computeroutput>, 参阅<computeroutput>QEMU</computeroutput>中的<computeroutput>virt_memmap[]</computeroutput>: <ulink url="https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c">https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c</ulink></para>
</simplesect>
<simplesect kind="copyright"><para>Copyright Shihong Wang (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_IO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_IO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constrains_8h" kindref="compound">constrains.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------<sp/>为VSCode提供补全<sp/>----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_8_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr,<sp/><ref refid="types_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_16_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr,<sp/><ref refid="types_8h_1a273cf69d639a59973b6019625df33e30" kindref="member">uint16_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_32_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr,<sp/><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_64_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr,<sp/><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="types_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>read_8_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a273cf69d639a59973b6019625df33e30" kindref="member">uint16_t</ref><sp/>read_16_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>read_32_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>read_64_bits(<ref refid="types_8h_1aa232ecf786a74ce5363c36c10798d2b1" kindref="member">uint64_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------<sp/>实现部分<sp/>----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>内联函数实现IO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="io_8h_1a3c3e456bfd6d0406bc6e20318da1760b" refkind="member"><highlight class="preprocessor">#define<sp/>dmb()<sp/>__asm__<sp/>__volatile__<sp/>(&quot;&quot;<sp/>:<sp/>:<sp/>:<sp/>&quot;memory&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="io_8h_1aa2972611d217f2dd8bf17d8e5a9df24c" refkind="member"><highlight class="preprocessor">#define<sp/>__iormb()<sp/>dmb()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="io_8h_1a76c5ac1cb98b83819b9cedd10ab863ca" refkind="member"><highlight class="preprocessor">#define<sp/>__iowmb()<sp/>dmb()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="io_8h_1a5c466414909380bc82d6d28e35193e7f" refkind="member"><highlight class="preprocessor">#define<sp/>glue(x,<sp/>y,<sp/>z)<sp/>x<sp/>##<sp/>_<sp/>##<sp/>y<sp/>##<sp/>_<sp/>##<sp/>z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="io_8h_1ac2eaa508b61574c8081061907488e005" refkind="member"><highlight class="preprocessor">#define<sp/>mkname(type,<sp/>width)<sp/>glue(type,<sp/>width,<sp/>bits)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="io_8h_1a04306cf4d238a563ec6e862b546dc590" refkind="member"><highlight class="preprocessor">#define<sp/>mkread(width)<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor">static<sp/>inline<sp/>uint##width##_t<sp/>mkname(read,<sp/>width)(uint64_t<sp/>addr){<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint##width##_t<sp/>__v<sp/>=<sp/>*(volatile<sp/>uint##width##_t*)addr;<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__iormb();<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>__v;<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="io_8h_1a59e4e10887e0e4c54d738802bf969f1c" refkind="member"><highlight class="preprocessor">#define<sp/>mkwrite(width)<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor">static<sp/>inline<sp/>void<sp/>mkname(write,<sp/>width)(uint64_t<sp/>addr,<sp/>uint##width##_t<sp/>value){<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint##width##_t<sp/>__v<sp/>=<sp/>value;<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__iowmb();<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(volatile<sp/>uint##width##_t*)addr<sp/>=<sp/>__v;<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="io_8h_1a04306cf4d238a563ec6e862b546dc590" kindref="member">mkread</ref>(8);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="io_8h_1a04306cf4d238a563ec6e862b546dc590" kindref="member">mkread</ref>(16);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="io_8h_1a04306cf4d238a563ec6e862b546dc590" kindref="member">mkread</ref>(32);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="io_8h_1a04306cf4d238a563ec6e862b546dc590" kindref="member">mkread</ref>(64);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="io_8h_1a59e4e10887e0e4c54d738802bf969f1c" kindref="member">mkwrite</ref>(8);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="io_8h_1a59e4e10887e0e4c54d738802bf969f1c" kindref="member">mkwrite</ref>(16);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="io_8h_1a59e4e10887e0e4c54d738802bf969f1c" kindref="member">mkwrite</ref>(32);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="io_8h_1a59e4e10887e0e4c54d738802bf969f1c" kindref="member">mkwrite</ref>(64);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/io.h"/>
  </compounddef>
</doxygen>
