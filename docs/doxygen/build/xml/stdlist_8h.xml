<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stdlist_8h" kind="file" language="C++">
    <compoundname>stdlist.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includes refid="stdlib_8h" local="yes">stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/stdlist.h</label>
        <link refid="stdlist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
      <node id="4">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct____list__elem__t" prot="public">__list_elem_t</innerclass>
    <innerclass refid="struct____list__t" prot="public">__list_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stdlist_8h_1a1588db56e801f7c095989db72375905c" prot="public" static="no">
        <type>struct <ref refid="struct____list__elem__t" kindref="compound">__list_elem_t</ref></type>
        <definition>typedef struct __list_elem_t list_elem_t</definition>
        <argsstring></argsstring>
        <name>list_elem_t</name>
        <briefdescription>
<para><computeroutput>list_elem_t</computeroutput>是链表节点结构体 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><computeroutput>list_elem_t</computeroutput>需要作为结构体的成员, 而后通过<computeroutput>member2struct</computeroutput>宏获得指向结构体的指针 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="30" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" prot="public" static="no">
        <type>struct <ref refid="struct____list__t" kindref="compound">__list_t</ref></type>
        <definition>typedef struct __list_t list_t</definition>
        <argsstring></argsstring>
        <name>list_t</name>
        <briefdescription>
<para><computeroutput>list_t</computeroutput>是链表结构体 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="40" column="8"/>
      </memberdef>
      <memberdef kind="typedef" id="stdlist_8h_1a296e363010c1571191477c449be1ec79" prot="public" static="no">
        <type><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref>()</type>
        <definition>typedef Bool() list_walking_func_t(list_elem_t *elem_ptr, int arg)</definition>
        <argsstring>(list_elem_t *elem_ptr, int arg)</argsstring>
        <name>list_walking_func_t</name>
        <briefdescription>
<para><computeroutput>list_walking_func_t</computeroutput>是自定义函数类型, 用于在链表遍历函数<computeroutput>list_walking</computeroutput>中作为回调函数 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>链表节点指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>参数 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="48" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stdlist_8h_1ab59346b047e534df51dd14354809b36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_init</definition>
        <argsstring>(list_t *list_ptr)</argsstring>
        <name>list_init</name>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_init</computeroutput>用于初始化<computeroutput>list_ptr</computeroutput>指向的链表 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向需要初始化的链表的指针 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="56" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1a679f7e7104a62e180c03511489241925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_insert</definition>
        <argsstring>(list_elem_t *before_ptr, list_elem_t *add_ptr)</argsstring>
        <name>list_insert</name>
        <param>
          <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
          <declname>before_ptr</declname>
        </param>
        <param>
          <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
          <declname>add_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_insert</computeroutput>用于在<computeroutput>before_ptr</computeroutput>指向的节点前插入<computeroutput>add_ptr</computeroutput>指向的节点 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>before_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向链表中被插入的节点的指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要插入到链表中的节点的指针</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>在实现锁或者中断之后需要保护一下 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="66" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1ad97d47d7e94c09725c2166dbf933e209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_append</definition>
        <argsstring>(list_elem_t *elem_ptr, list_t *list_ptr)</argsstring>
        <name>list_append</name>
        <param>
          <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
          <declname>elem_ptr</declname>
        </param>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_append</computeroutput>用于将<computeroutput>elem_ptr</computeroutput>指向的节点添加到<computeroutput>list_ptr</computeroutput>指向的链表后面 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要添加的节点的指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向被添加的链表的指针 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="74" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1aa31fa3bfee3869b8076890ffe2f5ef80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_remove</definition>
        <argsstring>(list_elem_t *elem_ptr)</argsstring>
        <name>list_remove</name>
        <param>
          <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
          <declname>elem_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_remove</computeroutput>用于将<computeroutput>elem_ptr</computeroutput>指向的节点从在其所在的链表中删除 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要删除的节点的指针 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="81" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1a0efbd84e3f75a8912344f130ba06e929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_push</definition>
        <argsstring>(list_elem_t *elem_ptr, list_t *list_ptr)</argsstring>
        <name>list_push</name>
        <param>
          <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
          <declname>elem_ptr</declname>
        </param>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_push</computeroutput>将链表视为一个栈, 用于向<computeroutput>list_ptr</computeroutput>指向的链表头前(栈顶)压入<computeroutput>elem_ptr</computeroutput>指向的节点 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要被压入的节点的指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要被压入的链表的指针 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="89" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1a3351742610f542e8a0ecd35bc152d3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
        <definition>list_elem_t* list_pop</definition>
        <argsstring>(list_t *list_ptr)</argsstring>
        <name>list_pop</name>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_pop</computeroutput>将链表视为一个栈, 用于向<computeroutput>list_ptr</computeroutput>指向的链表头前(栈顶)弹出一个节点 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要被弹出的链表的指针</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list_elem_t 指向被弹出的节点的指针 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="98" column="13" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="98" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1adc56bb04e13bdd9922f53da75e7a2920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref></type>
        <definition>Bool list_empty</definition>
        <argsstring>(list_t *list_ptr)</argsstring>
        <name>list_empty</name>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_empty</computeroutput>用于判断<computeroutput>list_ptr</computeroutput>指向的链表是否为空 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向被判断的链表的指针 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True 链表为空 </para>
</simplesect>
<simplesect kind="return"><para>False 链表不为空 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="108" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1ae428635a67c41f1d5e97f4b9c1f701f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a186ea1339bffb378854987065835afe3" kindref="member">size_t</ref></type>
        <definition>size_t list_size</definition>
        <argsstring>(list_t *list_ptr)</argsstring>
        <name>list_size</name>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_size</computeroutput>用于计算<computeroutput>list_ptr</computeroutput>指向的链表的长度(元素个数) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>被计算长度的链表 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t 链表的长度(元素个数) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="116" column="8" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="116" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1a562e2bec1e05334211af8d3a728b0104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref></type>
        <definition>Bool list_search</definition>
        <argsstring>(list_elem_t *elem_ptr, list_t *list_ptr)</argsstring>
        <name>list_search</name>
        <param>
          <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
          <declname>elem_ptr</declname>
        </param>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_search</computeroutput>用于在<computeroutput>list_ptr</computeroutput>指向的链表中查找是否存在<computeroutput>elem_ptr</computeroutput>指向的节点 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向被查找的节点的指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向被查找的链表的指针</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True <computeroutput>elem_ptr</computeroutput>指向的节点在<computeroutput>list_ptr</computeroutput>指向的链表中 </para>
</simplesect>
<simplesect kind="return"><para>False <computeroutput>elem_ptr</computeroutput>指向的节点不在<computeroutput>list_ptr</computeroutput>指向的链表中 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="127" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlist_8h_1abc7842d9a4f9b807ae9a09f1ba6d5bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref> *</type>
        <definition>list_elem_t* list_walking</definition>
        <argsstring>(list_t *list_ptr, list_walking_func_t func, int arg)</argsstring>
        <name>list_walking</name>
        <param>
          <type><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref> *</type>
          <declname>list_ptr</declname>
        </param>
        <param>
          <type><ref refid="stdlist_8h_1a296e363010c1571191477c449be1ec79" kindref="member">list_walking_func_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para><computeroutput>list_walking</computeroutput>用于遍历<computeroutput>list_ptr</computeroutput>指向的链表, 并对每一个节点调用<computeroutput>func</computeroutput>判断是否继续遍历 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>指向要遍历的链表的指针 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>将应用在每一个节点上的函数 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>传给<computeroutput>func</computeroutput>的参数 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list_elem_t* 若将<computeroutput>func</computeroutput>应用在当前节点后返回值为True, 则停止遍历, 且返回指向当前节点的指针, 否则继续遍历; 若将func应用于链表中所有元素后, 没有一个节点返回True, 则返回NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h" line="137" column="13" declfile="/home/data/proj/oskernel2023-x2w/include/stdlist.h" declline="137" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="stdlist_8h" kindref="compound">stdlist.h</ref></computeroutput>是<computeroutput>X2W-OS</computeroutput>的标准链表实现 </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Shihong Wang (<ulink url="mailto:jack4shihong@gmail.com">jack4shihong@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-12</para>
</simplesect>
<xrefsect id="todo_1_todo000003"><xreftitle>待办事项</xreftitle><xrefdescription><para><orderedlist>
<listitem><para>测试stdlist库</para>
</listitem></orderedlist>
</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="copyright"><para>Copyright Shihong Wang (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="14"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_STDLIST_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_STDLIST_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdlib_8h" kindref="compound">stdlib.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="struct____list__elem__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct____list__elem__t" kindref="compound">__list_elem_t</ref><sp/>{</highlight></codeline>
<codeline lineno="27" refid="struct____list__elem__t_1a2c866e1669966b579fb5250a8cc921c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct____list__elem__t" kindref="compound">__list_elem_t</ref>*<sp/><ref refid="struct____list__elem__t_1a2c866e1669966b579fb5250a8cc921c5" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="29" refid="struct____list__elem__t_1acd5d436f8999ad2891e58132b72a3deb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct____list__elem__t" kindref="compound">__list_elem_t</ref>*<sp/><ref refid="struct____list__elem__t_1acd5d436f8999ad2891e58132b72a3deb" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/><ref refid="stdlist_8h_1a1588db56e801f7c095989db72375905c" kindref="member">list_elem_t</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="struct____list__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct____list__t" kindref="compound">__list_t</ref><sp/>{</highlight></codeline>
<codeline lineno="37" refid="struct____list__t_1a407b979d5091660f1a092f33d30c1d40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/><ref refid="struct____list__t_1a407b979d5091660f1a092f33d30c1d40" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="39" refid="struct____list__t_1a79d7f7660eed936241ec490d29d3995d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/><ref refid="struct____list__t_1a79d7f7660eed936241ec490d29d3995d" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/><ref refid="stdlist_8h_1a5ca7f35b21e2be1520d96d730fd70b2c" kindref="member">list_t</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="stdlist_8h_1a296e363010c1571191477c449be1ec79" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref><sp/>(<ref refid="stdlist_8h_1a296e363010c1571191477c449be1ec79" kindref="member">list_walking_func_t</ref>)(<ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*elem_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stdlist_8h_1ab59346b047e534df51dd14354809b36a" kindref="member">list_init</ref>(<ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stdlist_8h_1a679f7e7104a62e180c03511489241925" kindref="member">list_insert</ref>(<ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*before_ptr,<sp/><ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*add_ptr);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stdlist_8h_1ad97d47d7e94c09725c2166dbf933e209" kindref="member">list_append</ref>(<ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*elem_ptr,<sp/><ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stdlist_8h_1aa31fa3bfee3869b8076890ffe2f5ef80" kindref="member">list_remove</ref>(<ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*elem_ptr);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stdlist_8h_1a0efbd84e3f75a8912344f130ba06e929" kindref="member">list_push</ref>(<ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*elem_ptr,<sp/><ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref>*<sp/><ref refid="stdlist_8h_1a3351742610f542e8a0ecd35bc152d3d4" kindref="member">list_pop</ref>(<ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref><sp/><ref refid="stdlist_8h_1adc56bb04e13bdd9922f53da75e7a2920" kindref="member">list_empty</ref>(<ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stdlist_8h_1ae428635a67c41f1d5e97f4b9c1f701f6" kindref="member">list_size</ref>(<ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="types_8h_1a253b248072cfc8bd812c69acd0046eed" kindref="member">Bool</ref><sp/><ref refid="stdlist_8h_1a562e2bec1e05334211af8d3a728b0104" kindref="member">list_search</ref>(<ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref><sp/>*elem_ptr,<sp/><ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="struct____list__elem__t" kindref="compound">list_elem_t</ref>*<sp/><ref refid="stdlist_8h_1abc7842d9a4f9b807ae9a09f1ba6d5bcb" kindref="member">list_walking</ref>(<ref refid="struct____list__t" kindref="compound">list_t</ref><sp/>*list_ptr,<sp/><ref refid="stdlist_8h_1a296e363010c1571191477c449be1ec79" kindref="member">list_walking_func_t</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/stdlist.h"/>
  </compounddef>
</doxygen>
