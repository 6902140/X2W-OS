<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test_8h" kind="file" language="C++">
    <compoundname>test.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includedby refid="test__memory_8h" local="yes">/home/data/proj/oskernel2023-x2w/include/test/test_memory.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/test/test.h</label>
        <link refid="test_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>constrains.h</label>
        <link refid="constrains_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/data/proj/oskernel2023-x2w/include/test/test.h</label>
        <link refid="test_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/data/proj/oskernel2023-x2w/include/test/test_memory.h</label>
        <link refid="test__memory_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="test_8h_1a846aee27093c62bc074b1ddf5e67ded6" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* test_func_pointer_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>test_func_pointer_t</name>
        <briefdescription>
<para><computeroutput>test_func_pointer_t</computeroutput>测试函数指针类型 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>测试函数的通用原型应该是<computeroutput>int test_XXXX(void)</computeroutput>, 例如:<itemizedlist>
<listitem><para><computeroutput>uart</computeroutput>的测试函数<computeroutput>int <ref refid="test__uart_8h_1abbdb4b9ab6b89d7a6f6dfeb7e52e6c91" kindref="member">test_uart(void)</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>函数名即为函数的地址/函数第一条指令的地址, 因此函数名就是一个函数指针, 例如:<itemizedlist>
<listitem><para>函数原型是<computeroutput>int <ref refid="test__uart_8h_1abbdb4b9ab6b89d7a6f6dfeb7e52e6c91" kindref="member">test_uart(void)</ref></computeroutput>, 则<computeroutput>test_uart</computeroutput>就是指向<computeroutput>int (void)</computeroutput>的函数指针 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>函数类型由函数的参数和返回值决定, 因此不同参数返回值的函数的函数类型不同, 因此不能放到数组中. 但是函数指针都是一个指针, 因此可以放到数组中, 所以这里声明的是函数指针 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/test/test.h" line="28" column="9" bodyfile="/home/data/proj/oskernel2023-x2w/include/test/test.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_8h_1ab9b71e6b53b29da0acfa3883cad174d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void register_test_func</definition>
        <argsstring>(test_func_pointer_t func)</argsstring>
        <name>register_test_func</name>
        <param>
          <type><ref refid="test_8h_1a846aee27093c62bc074b1ddf5e67ded6" kindref="member">test_func_pointer_t</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para><computeroutput>register_test_func</computeroutput>用于注册测试函数, 测试函数模板: int test_XXX(void) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>测试函数指针, 测试函数名即可 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/test/test.h" line="36" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/test/test.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test_8h_1add1fe75ad79de762a3906b6d41897ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_all</definition>
        <argsstring>(void)</argsstring>
        <name>test_all</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><computeroutput>test_all</computeroutput>函数运行所有测试函数 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/data/proj/oskernel2023-x2w/include/test/test.h" line="42" column="6" declfile="/home/data/proj/oskernel2023-x2w/include/test/test.h" declline="42" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="test_8h" kindref="compound">test.h</ref></computeroutput>是系统的测试模块, 为各个模块提供了测试注册函数, 并在初始化时进行测试 </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Shihong Wang (<ulink url="mailto:jack4shihong@gmail.com">jack4shihong@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2023-04-10</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright Shihong Wang (c) 2023 with GNU Public License V3.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>__INCLUDE_TEST_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__INCLUDE_TEST_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="test_8h_1a846aee27093c62bc074b1ddf5e67ded6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="test_8h_1a846aee27093c62bc074b1ddf5e67ded6" kindref="member">test_func_pointer_t</ref>)(void);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8h_1ab9b71e6b53b29da0acfa3883cad174d5" kindref="member">register_test_func</ref>(<ref refid="test_8h_1a846aee27093c62bc074b1ddf5e67ded6" kindref="member">test_func_pointer_t</ref><sp/>func);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8h_1add1fe75ad79de762a3906b6d41897ff2" kindref="member">test_all</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/data/proj/oskernel2023-x2w/include/test/test.h"/>
  </compounddef>
</doxygen>
